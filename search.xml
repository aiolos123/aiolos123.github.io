<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[SSM-01-在IntelliJIDEA中创建基于Maven构建的Web项目]]></title>
      <url>https://aiolos123.github.io/2017/03/02/SSM-01-%E5%9C%A8IntelliJIDEA%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%9F%BA%E4%BA%8EMaven%E6%9E%84%E5%BB%BA%E7%9A%84Web%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>本文以图文形式介绍如何使用IntelliJ IDEA创建基于Maven构建的Web项目的过程<br><a id="more"></a></p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><pre><code>IntelliJ IDEA: 2016.3.4 Ultimate
JDK: 1.8.0_20
Maven: 3.3.9
</code></pre><p>开发环境的下载及配置请自行百度</p>
<h2 id="基于Maven构建的Web项目的步骤"><a href="#基于Maven构建的Web项目的步骤" class="headerlink" title="基于Maven构建的Web项目的步骤"></a>基于Maven构建的Web项目的步骤</h2><p>1、如果是第一次打开软件直接点击 Create New Project ，如果之前已经打开过项目了，需要点击菜单中 File → New Project … 如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-1.jpg" alt=""><br>2、选择Maven，配置jdk、选中Create from archetype,从列表中选择web app骨架，如下图，再点击 Next：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-2.jpg" alt=""><br>3、编辑 GroupId、ArtifactId即包名、模块名 ，点击Next 如下：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-3.jpg" alt=""><br>4、选择本地安装的Maven即其配置，确认信息正确后点击Next 如下：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-4.jpg" alt=""><br>注：为了加快maven的构建，可添加本地的archetypeCatalog=local<br>5、输入项目名称和路径，点击 Finish 按钮即可生成项目，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-5.jpg" alt=""><br>6、待maven下载导入成功后，生成的项目结构如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-6.jpg" alt=""><br>至此，项目已经创建完成，下面开始配置 Tomcat服务</p>
<h2 id="配置Tomcat服务"><a href="#配置Tomcat服务" class="headerlink" title="配置Tomcat服务"></a>配置Tomcat服务</h2><p>7、点击工具栏中的向下箭头的图标（如下图 红框标注）或者点击菜单栏中的 Run → Edit Configurations…  如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-7.jpg" alt=""><br>8、在Edit Configurations界面，点击左上角红色标注的 + 按钮，选择 Tomcat Server → Local  如下图:<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-8.jpg" alt=""><br>9、在该配置页面，输入名称（随便取比如 tomcat8）、配置tomcat 本地环境以及相应端口后，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-9.jpg" alt=""><br>10、再点击 页签 Deployment，点击 + 选择 Artifact …，选择需要发布的应用，点击 OK 按钮，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-10.jpg" alt=""><br>11、编辑 Application Context 的名称(一般建议与项目名相同)，点击OK按钮即完成Tomcat 配置。<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-11.jpg" alt=""></p>
<h2 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h2><p>12、双击打开 index.jsp 并编辑，点击下图中标注的绿色启动按钮，即可发布相关应用：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-12.jpg" alt=""><br>13、启动正常应该看到如下信息：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-13.jpg" alt=""><br>14、启动后会自动跳转到浏览器,看到如下内容：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-14.jpg" alt=""><br>到此已经完成了项目创建、Tomcat配置、项目发布等过程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 事务管理]]></title>
      <url>https://aiolos123.github.io/2017/01/22/50-how-to-use-spring-transcation-manager/</url>
      <content type="html"><![CDATA[<p>本文讲解 Spring 事务管理的相关知识，具体讲解基于AspectJ的事务管理<br>和基于注解的事务管理的具体用法<br>视频地址：<a href="http://www.imooc.com/learn/478" target="_blank" rel="external">http://www.imooc.com/learn/478</a><br><a id="more"></a></p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><pre><code>指的是逻辑上的一组操作，这组操作要么全部成功，要不全部失败。如银行转账的转入和转出
</code></pre><h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><pre><code>原子性(Atomicity )：指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生；

一致性(Consistency)：指事务执行前后，数据的完整性必须保持一致；

隔离性(Isolation)：指多个用户并发访问数据库时，一个用户的事务执行过程中不能被其他用户的事务所干扰，多个并发事务之间数据要相互隔离；

持久性(Durabilily)：指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，即使数据库发生故障也不应该对其有任何影响；
</code></pre><h2 id="Spring的事务管理"><a href="#Spring的事务管理" class="headerlink" title="Spring的事务管理"></a>Spring的事务管理</h2><p>Spring支持两种方式的事务管理:</p>
<pre><code>* 编程式事务管理  (很少使用)
    - 手动编写代码进行事务管理
* 使用XML配置声明式事务管理 (推荐使用)
    Spring的声明式事务管理是通过AOP实现的；
    - 基于TransactionProxyFactoryBean的方式(很少使用)
        . 需要为每个进行事务管理的类,配置一个TransactionProxyFactoryBean进行增强
    - 基于AspectJ的xml方式(经常使用)
        . 一旦配置好,类上不需要添加任何东西
    - 基于注解(经常使用)
        . 配置简单,需要在业务层类上添加一个@Transactionl的注解
</code></pre><p>以下，我们将讲解最常用的2种事务管理的用法</p>
<h3 id="基于AspectJ的事务管理"><a href="#基于AspectJ的事务管理" class="headerlink" title="基于AspectJ的事务管理"></a>基于AspectJ的事务管理</h3><p>1、在applicationContext.xml文件中做如下配置<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!--首先加入tx的xmlns--&gt;</span></span></div><div class="line">xmlns:tx="http://www.springframework.org/schema/tx"</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置c3p0数据库连接池--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jdbc.driverClassName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--  配置业务层的类  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span>  <span class="attr">class</span>=<span class="string">"cn.mooc.spring.service.AccountServiceImpl"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDaoImpl"</span>  <span class="attr">ref</span>=<span class="string">"accountDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置DAO的类  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"accountDaoImpl"</span>  <span class="attr">class</span>=<span class="string">"cn.mooc.spring.dao.AccountDaoImpl"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--  注入连接池 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>=<span class="string">"dataSource"</span>  <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--  配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionMangager"</span>   <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span>  <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--  配置事务的通知（事务的增强） --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span>  <span class="attr">id</span>=<span class="string">"txAdvice"</span>  <span class="attr">transaction-manager</span>=<span class="string">"transactionMangager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span>  <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>  /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置AOP切面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置切入点 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.mooc.spring.service.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pointCut"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span>  <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"pointCut"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、测试代码<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="variable">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:applicationContext.xml"</span>&#125;)  </div><div class="line">public class TestAccountService &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//注入业务层类</span></div><div class="line">    <span class="variable">@Resource</span>(name=<span class="string">"accountService"</span>)</div><div class="line">    private IAccountService accountService;</div><div class="line">    </div><div class="line">    <span class="variable">@Test</span></div><div class="line">    public void testTransfer()&#123;</div><div class="line">        accountService<span class="selector-class">.transfer</span>(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="number">200</span>d);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="基于注解的事务管理"><a href="#基于注解的事务管理" class="headerlink" title="基于注解的事务管理"></a>基于注解的事务管理</h3><p>1、在applicationContext.xml文件中做如下配置<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!--首先加入aop和tx的xmlns--&gt;</span></span></div><div class="line">xmlns:tx="http://www.springframework.org/schema/tx"</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置c3p0数据库连接池--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jdbc.driverClassName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--  配置业务层的类  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span>  <span class="attr">class</span>=<span class="string">"cn.mooc.spring.service.AccountServiceImpl"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDaoImpl"</span>  <span class="attr">ref</span>=<span class="string">"accountDaoImpl"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置DAO的类  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"accountDaoImpl"</span>  <span class="attr">class</span>=<span class="string">"cn.mooc.spring.dao.AccountDaoImpl"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--  注入连接池 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>=<span class="string">"dataSource"</span>  <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--  声明式事务管理方式三：基于注解的声明式事务管理 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionMangager"</span>   <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span>  <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--  开启注解事务 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>  <span class="attr">transaction-manager</span>=<span class="string">"transactionMangager"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在需要事务管理的类上加上@Transactional注解<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation=Propagation.REQUIRED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> &#123;</span>&#125;</div></pre></td></tr></table></figure></p>
<p>3、测试代码同上</p>
<h3 id="Spring事务的传播行为和隔离级别"><a href="#Spring事务的传播行为和隔离级别" class="headerlink" title="Spring事务的传播行为和隔离级别"></a>Spring事务的传播行为和隔离级别</h3><p>在讲解上述2种事务管理时，都用到了Spring中定义的事务的传播行为和隔离级别，以下将具体讲解这2个概念</p>
<pre><code>参考：http://blog.csdn.net/it_wangxiangpan/article/details/24180085

PROPAGATION_REQUIRED--支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
PROPAGATION_SUPPORTS--支持当前事务，如果当前没有事务，就以非事务方式执行。
PROPAGATION_MANDATORY--支持当前事务，如果当前没有事务，就抛出异常。 
PROPAGATION_REQUIRES_NEW--新建事务，如果当前存在事务，把当前事务挂起。 
PROPAGATION_NOT_SUPPORTED--以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
PROPAGATION_NEVER--以非事务方式执行，如果当前存在事务，则抛出异常。
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSM-00-SpringMVC入门]]></title>
      <url>https://aiolos123.github.io/2016/12/20/SSM-00-SpringMVC%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>本文介绍SpringMVC的入门知识，如何创建SpringMVC项目、编写xml部署文件，如何编写简单的SpringMVC程序，开发IDE为MyEclipse2014</p>
<p>学习视频：<br>    Spring MVC起步<br>    <a href="http://www.imooc.com/learn/47" target="_blank" rel="external">http://www.imooc.com/learn/47</a><br>    SpringMVC从基础到实战视频课程<br>    <a href="http://edu.51cto.com/course/course_id-5804.html" target="_blank" rel="external">http://edu.51cto.com/course/course_id-5804.html</a><br>    Spring MVC拦截器<br>    <a href="http://www.imooc.com/learn/498" target="_blank" rel="external">http://www.imooc.com/learn/498</a></p>
<p>参考文档：<br>    史上最全最强SpringMVC详细示例实战教程<br>    <a href="http://www.cnblogs.com/sunniest/p/4555801.html" target="_blank" rel="external">http://www.cnblogs.com/sunniest/p/4555801.html</a><br>    第二章 Spring MVC入门 —— 跟开涛学SpringMVC<br>    <a href="http://jinnianshilongnian.iteye.com/blog/1594806" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1594806</a><br><a id="more"></a></p>
<h2 id="SpringMVC入门"><a href="#SpringMVC入门" class="headerlink" title="SpringMVC入门"></a>SpringMVC入门</h2><p>1、MVC框架(或Servlet)要做哪些事情<br>    a) 将url映射到java类或java类的方法上<br>    b）封装用户提交的数据<br>    c) 处理用户请求——调用相关的业务处理请求,并封装响应的数据<br>    d) 将响应的数据进行渲染成jsp、freemaker、html等表现形式<br>2、SpringMVC是一个轻量级的、基于请求响应的MVC框架<br>    性能较Struct2好<br>    简单、便捷、易学<br>    天生和Spring无缝集成，无缝使用Spring IOC、AOP<br>    使用约定优于配置<br>    能够进行简单的junit测试<br>    支持Restful风格<br>    异常处理<br>    本地化、国际化<br>    数据验证、类型转换<br>    拦截器<br>    使用广泛等<br>3、SpringMVC请求处理流程图<br><img src="http://ocej2soxx.bkt.clouddn.com/SpringMVC%20%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E5%9B%BE.JPG" alt="SpringMVC请求处理流程图"></p>
<p>4、SpringMVC核心架构图<br><img src="http://ocej2soxx.bkt.clouddn.com/SpringMVC%E6%9E%B6%E6%9E%84.JPG" alt="SpringMVC核心架构图"></p>
<h2 id="创建SpringMVC项目"><a href="#创建SpringMVC项目" class="headerlink" title="创建SpringMVC项目"></a>创建SpringMVC项目</h2><p>本节内容摘录自《如何使用Maven》</p>
<p>1、新建项目<br>右键–&gt;New –&gt; Web Project –&gt; 勾选上add maven support，选择Java version1.7+、JavaEE 7 - Web3.1+、JSTL Version1.2.2+; 然后一路next，到项目结构(Project structure)那儿，选择Stardard Maven JEE project structure, 最后点击Finish</p>
<p>2、更新自己安装的jdk，而不是myeclipse自带的jdk。<br>右键项目–&gt; Properties –&gt; Java Build Path –&gt; Libraries<br>选中jdk–&gt; Edit –&gt;选择自己安装的jdk，而不是myeclipse自带的jdk</p>
<p>3、使用Tomcat运行Maven项目</p>
<p>菜单栏快捷方式Deploy MyEclipse J2EE Project to Server –&gt; add –&gt; server中选中已安装的Tomcat版本 –&gt; OK </p>
<p>右键项目–&gt; Run As –&gt; MyEclipse Server Application<br>或者Server控制台 –&gt; Redeploy –&gt; Run</p>
<p>地址栏输入：<a href="http://localhost:8080/{项目名}/" target="_blank" rel="external">http://localhost:8080/{项目名}/</a></p>
<p>5、或者使用Jetty运行Maven项目</p>
<p>在cmd命令窗口中cd 到项目目录后，输入mvn jetty:run<br>待jetty启动成功后(出现Start Jetty Server的文字)</p>
<p>在地址栏输入：<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a></p>
<h2 id="编写xml部署文件"><a href="#编写xml部署文件" class="headerlink" title="编写xml部署文件"></a>编写xml部署文件</h2><p>1、新建maven的pom.xml部署文件,内容如下<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>MyFirstSpringMVC<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyFirstSpringMVC<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>MySecondSpringMVC-Practice<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>/&gt;</span></div><div class="line">    </div><div class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">commons-lang.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">commons-lang.version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-framework-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$<span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--Spring jar包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$<span class="template-variable">&#123;commons-lang.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--org.slf4j日志 jar包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$<span class="template-variable">&#123;slf4j.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$<span class="template-variable">&#123;slf4j.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--servlet jar包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--文件上传 jar包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--json jar包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$<span class="template-variable">&#123;jackson.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--J2EE jar包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--JSTL jar包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">        </div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--Jetty jar包--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.2.2.v20140723<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、新建WEB-INF/web.xml————配置分发器即DispatcherServlet<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.4"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee </span></div><div class="line">    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt;   </div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 以上是WebApp 2.4标准， 默认支持EL语言 --&gt;</span>  </div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>My Spring MVC<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- Spring的配置开始 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Spring应用上下文， 理解层次化的ApplicationContext </span></div><div class="line">            ContextLoaderListener加载整个应用的公共服务、公共组件</div><div class="line">            mvc-dispatcher-servlet.xml加载特定DispatcherServlet的服务</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/configs/spring/applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Spring的配置结束 --&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- SpringMVC的配置开始 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- DispatcherServlet, Spring MVC的核心 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- DispatcherServlet对应的上下文配置， 默认为/WEB-INF/$servlet-name$-servlet.xml</span></div><div class="line">         --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/configs/spring/mvc-dispatcher-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 随服务器启动一起启动的Servlet --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- mvc-dispatcher拦截所有的请求--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- SpringMVC的配置结束 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、添加springMVC配置文件<br>    默认在WEB-INF文件夹下，文件名为[DispatcherServletName]-servlet.xml,此处指定文件夹名和文件名，故新建WEB-INF/configs/spring/mvc-dispatcher-servlet.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/context </div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">        http://www.springframework.org/schema/mvc</div><div class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 本配置文件是供名为mvc-dispatcher的DispatcherServlet使用， 提供其相关的Spring MVC配置 --&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required </span></div><div class="line">        @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service</span></div><div class="line"></div><div class="line">    gx.mvcdemo为包的前缀名称</div><div class="line"></div><div class="line">     --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"gx.mvcdemo"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line">            <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。 </span></div><div class="line">        DefaultAnnotationHandlerMapping </div><div class="line">            annotation-driven HandlerMapping --&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 静态资源处理， css， js， imgs --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span>  <span class="attr">location</span>=<span class="string">"/resources/"</span>  /&gt;</span> </div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultViews"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- JSON View --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">                    <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJackson2JsonView"</span>&gt;</div><div class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span></span></div><div class="line">            <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsps/"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--文件上传的ViewResolver  --&gt;</span></div><div class="line">    <span class="comment">&lt;!--200*1024*1024即200M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"209715200"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resolveLazily"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>4、添加spring配置文件<br>新建WEB-INF/configs/spring/applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/context </div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">        http://www.springframework.org/schema/mvc</div><div class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Spring上下文， 不管理@Controller类型的bean--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"gx.mvcdemo"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line">            <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="编写简单的SpringMVC程序"><a href="#编写简单的SpringMVC程序" class="headerlink" title="编写简单的SpringMVC程序"></a>编写简单的SpringMVC程序</h2><p>右键src/main/java，新建gx.mvcdemo.service、gx.mvcdemo.controller、gx.mvcdemo.model三个包</p>
<p>在gx.mvcdemo.controller包下新建class，代码如下<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Controller</span></div><div class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">public class HelloTest &#123;</div><div class="line">    </div><div class="line">    <span class="variable">@RequestMapping</span>(<span class="string">"/mvc"</span>)</div><div class="line">    public String sayHello()&#123;</div><div class="line">        return "home";</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在/WEB-INF/jsps/下新建home.jsp</p>
<p>在Dos窗口中进入到项目目录下，输入 mvn jetty:run<br>待jetty启动成功后，在地址栏中输入：<a href="http://localhost:8080/hello/mvc" target="_blank" rel="external">http://localhost:8080/hello/mvc</a></p>
<h2 id="SpringMVC配置解析"><a href="#SpringMVC配置解析" class="headerlink" title="SpringMVC配置解析"></a>SpringMVC配置解析</h2><p>引用自见下文的《二、配置解析》<br><a href="http://www.cnblogs.com/sunniest/p/4555801.html" target="_blank" rel="external">http://www.cnblogs.com/sunniest/p/4555801.html</a></p>
<p>1.Dispatcherservlet</p>
<pre><code>DispatcherServlet是前置控制器，配置在web.xml文件中。

DispatcherServlet用于拦截匹配的请求(拦截匹配规则要自已定义)，把拦截下来的请求，依据相应的匹配规则分发到目标Controller来处理。

这是配置spring MVC的第一步。
</code></pre><p>2.InternalResourceViewResolver</p>
<p>　　视图名称解析器</p>
<h2 id="SpringMVC常用注解"><a href="#SpringMVC常用注解" class="headerlink" title="SpringMVC常用注解"></a>SpringMVC常用注解</h2><p>引用自见下文的《三、SpringMVC常用注解》<br><a href="http://www.cnblogs.com/sunniest/p/4555801.html" target="_blank" rel="external">http://www.cnblogs.com/sunniest/p/4555801.html</a></p>
<p>@Controller   负责注册一个bean 到spring 上下文中<br>@RequestMapping  为控制器指定可以处理哪些 URL 请求</p>
<p>@RequestBody<br>　　该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上 ,再把HttpMessageConverter返回的对象数据绑定到controller中方法的参数上</p>
<p>@ResponseBody<br>　　 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区</p>
<p>@ModelAttribute 　　　<br>　　在方法定义上使用 @ModelAttribute 注解：Spring MVC 在调用目标处理方法前，会先逐个调用在方法级上标注了@ModelAttribute 的方法</p>
<p>　　在方法的入参前使用 @ModelAttribute 注解：可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数 –绑定到对象中，再传入入参将方法入参对象添加到模型中 </p>
<p>@RequestParam　</p>
<p>　　在处理方法入参处使用 @RequestParam 可以把请求参 数传递给请求方法</p>
<p>@PathVariable</p>
<p>　　绑定 URL 占位符到入参<br>@ExceptionHandler</p>
<p>　　注解到方法上，出现异常时会执行该方法<br>@ControllerAdvice</p>
<p>　　使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常</p>
<h2 id="自动匹配参数和自动装箱"><a href="#自动匹配参数和自动装箱" class="headerlink" title="自动匹配参数和自动装箱"></a>自动匹配参数和自动装箱</h2><p>引用自见下文的《四、自动匹配参数；五、自动装箱》<br><a href="http://www.cnblogs.com/sunniest/p/4555801.html" target="_blank" rel="external">http://www.cnblogs.com/sunniest/p/4555801.html</a></p>
<p>1.编写一个Person实体类<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gx.mvcdemo.model;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="comment">//getter 和 setter方法</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.在Controller里编写方法<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//match automatically  自动匹配参数</span></div><div class="line"> <span class="comment">//url?name=张三&amp;age=12.3</span></div><div class="line"> <span class="variable">@RequestMapping</span>(<span class="string">"/automatch"</span>)</div><div class="line"> public String toPerson(String name,double age)&#123;</div><div class="line">     System<span class="selector-class">.out</span><span class="selector-class">.println</span>(name+<span class="string">" "</span>+age);</div><div class="line">     return "hello";</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"><span class="comment">//boxing automatically  自动装箱</span></div><div class="line"> <span class="variable">@RequestMapping</span>(<span class="string">"/autoboxing"</span>)</div><div class="line"> public String toPerson(Person p)&#123;</div><div class="line">     System<span class="selector-class">.out</span><span class="selector-class">.println</span>(p.getName()+<span class="string">" "</span>+p.getAge());</div><div class="line">     return "hello";</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h2><pre><code>拦截器：是通过统一拦截从浏览器发往服务器的请求来完成功能的增强
使用场景：解决请求的共性问题，如乱码问题、权限验证问题等
</code></pre><p>拦截器的工作原理：———— 公路收费站<br>    拦截器的工作原理和过滤器非常相似<br>    SpringMVC可以通过配置CharacterEncodingFilter过滤器来解决乱码问题</p>
<p>拦截器的实现<br>1、编写拦截器类，并实现HandlerInterceptor接口<br>//实现WebRequestInterceptor接口的preHandle无返回值，故无法终止请求，所以使用较少</p>
<p>2、将拦截器注册到SpringMVC配置文件中，并配置拦截器的拦截规则<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">                        <span class="comment">&lt;!--  拦截规则：</span></div><div class="line">                               "/**"表示该路径及该路径下的所有子孙路径———拦截所有controller</div><div class="line">                            “/admin/*”拦截的是  /admin/add，/admin/list，等等直接子路径；而/admin/user/add不被拦截</div><div class="line">                            “/admin/**”拦截  /admin/add，/admin/list，/admin/user/add 等所有子孙路径;</div><div class="line">                         --&gt;</div><div class="line">                        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></div><div class="line">                        <span class="comment">&lt;!-- 对应的拦截器 --&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.gx.interceptor.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>拦截器使用原则：处理所有请求的共同问题<br>拦截器的使用场景：<br>  1、解决乱码问题<br>                    //使用过滤器处理乱码问题的办法，在preHandle()中增加如下语句<br>                    //request.setCharacterEncoding(“utf-8”);<br>     2、解决权限验证问题<br>                   //在preHandle()中添加如下代码<br>                   if(request.getSession().getAttribute(“user”)==null){<br>                         //用户未登录，则终止请求，并转发到登录页面<br>                        request.getRequestDispatcher(“/login.jsp”).forward(request, response);<br>                        return false;<br>                   }</p>
<p>拦截器Interceptor和过滤器Filter的区别</p>
<pre><code>①拦截器是基于java的反射机制的，而过滤器是基于函数回调。

②拦截器依赖于框架容器，只过滤请求;过滤器依赖于servlet容器，过滤范围大。

③拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。

④拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。

⑤在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。

⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑
</code></pre><p>总结：<br>    拦截器可以处理Web应用中请求的一些共性问题，这样可以减少重复代码、便于维护</p>
<h2 id="SpringMVC数据绑定"><a href="#SpringMVC数据绑定" class="headerlink" title="SpringMVC数据绑定"></a>SpringMVC数据绑定</h2><p>简单数据绑定：是将一个用户界面元素(控件)的属性绑定到一个模型对象实例上的某个属性的过程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA IO流]]></title>
      <url>https://aiolos123.github.io/2016/12/07/how-to-use-java-io-stream/</url>
      <content type="html"><![CDATA[<p>如何在Java中进行文件的读写，Java IO流是必备的知识。本门课程主要为您带来Java中的输入输出流的内容，包括文件编码、使用File类对文件和目录进行管理、字节流和字符流的基本操作，以及对象的序列化和反序列化的内容。<br>视频来源：<a href="http://www.imooc.com/learn/123" target="_blank" rel="external">http://www.imooc.com/learn/123</a><br><a id="more"></a></p>
<h2 id="IO流分类"><a href="#IO流分类" class="headerlink" title="IO流分类"></a>IO流分类</h2><p>引用自：<a href="http://blog.csdn.net/javaweiming/article/details/17396737" target="_blank" rel="external">http://blog.csdn.net/javaweiming/article/details/17396737</a></p>
<pre><code>高端流 = 字符流 = 包装流
低端流 = 字节流 = 原始流
</code></pre><table>
<thead>
<tr>
<th style="text-align:center">分类依据</th>
<th style="text-align:center">内存</th>
<th style="text-align:center">外设</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">根据数据的流向来分</td>
<td style="text-align:center">输出流</td>
<td style="text-align:center">输入流</td>
</tr>
<tr>
<td style="text-align:center">根据流的位置来分</td>
<td style="text-align:center">高端流</td>
<td style="text-align:center">低端流</td>
</tr>
<tr>
<td style="text-align:center">根据流数据的格式来分</td>
<td style="text-align:center">字符流</td>
<td style="text-align:center">字节流</td>
</tr>
<tr>
<td style="text-align:center">根据流数据的包装过程来分</td>
<td style="text-align:center">包装流</td>
<td style="text-align:center">原始流</td>
</tr>
<tr>
<td style="text-align:center">文件存储方式</td>
<td style="text-align:center">文件在内存中以二进制序列存储</td>
<td style="text-align:center">文件在外设中以字节(byte)序列存储</td>
</tr>
<tr>
<td style="text-align:center">文件读取方式</td>
<td style="text-align:center">以字符为单位读取文件，常用于读文本，数字等类型的文件;以行为单位读取文件，常用于读面向行的格式化文件</td>
<td style="text-align:center">以字节为单位读取文件，常用于读二进制文件，如图片、声音、影像等文件</td>
</tr>
</tbody>
</table>
<p><img src="http://ocej2soxx.bkt.clouddn.com/java%20io%E6%B5%81%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" alt="java io流继承关系"></p>
<p>1、根据数据的流向来分：<br>    输出流：是用来写数据的，是由程序（内存）—&gt;外界设备<br>    输入流：是用来读数据的，是由外界设备—&gt;程序（内存）<br>    如何区分：一般来说输入流带有Input，输出流带有Output<br>2、根据流的位置来分<br>    高端流：所有的内存中的流都是高端流，如InputStreamReader<br>    低端流：所有的外界设备中的流都是低端流，如InputStream、OutputStream<br>    如何区分：所有的流对象的后缀中包含Reader或者Writer的都是高端流，反之，则基本上为低端流，不过也有例外，比如PrintStream就是高端流<br>3、根据流数据的格式来分：<br>    字节流：处理声音或者图片等二进制的数据的流，比如InputStream<br>    字符流：处理文本数据（如txt文件）的流，比如InputStreamReader<br>    如何区分：可用高低端流来区分，所有的低端流都是字节流，所有的高端流都是字符流<br>4、根据流数据的包装过程来分：<br>    原始流：在实例化流的对象的过程中，不需要传入另外一个流作为自己构造方法的参数的流，称之为原始流。<br>    包装流：在实例化流的对象的过程中，需要传入另外一个流作为自己构造方法发参数的流，称之为包装流。<br>    如何区分：所以的低端流都是原始流，所以的高端流都是包装流</p>
<h2 id="IO总结————字节序列是IO的根本"><a href="#IO总结————字节序列是IO的根本" class="headerlink" title="IO总结————字节序列是IO的根本"></a>IO总结————字节序列是IO的根本</h2><pre><code>java中文件是byte byte byte...的字节序列，可以是任意编码的字节序列；

从文件中读取数据到内存中成为读read,也就是对应输入input流;
从内存中把数据存储到文件中就是写write,也就是对应输出output流

以内存为中心看待读写与输入输出
</code></pre><p><img src="http://ocej2soxx.bkt.clouddn.com/java%20io%E6%B5%81%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" alt="java io流继承关系"></p>
<p>一、字节流的抽象基类：InputStream、OutputStream</p>
<pre><code>//读取数据填充到字节数组buf中，从buf的start位置开始，存放size长度的数据
    in.read(byte[] buf,int start,int size);
//将buf字节数组从start位置开始，写size长度的字节到流
    out.wirte(byte[] buf,int start,int size);

//字节流的第一组实现：读取文件数据
FileInputStream   ---&gt; 具体实现了从文件上读取字节数据
FileOutputStream  ---&gt; 具体实现了向文件中写出字节数据

//字节流的第二组实现：读取int、long、字符等类型数据,主要用于操作类型数据
DataOutputStream:
    wirteInt()/wirteDouble()/wirteUTF()等等
DataInputStream:
    readInt()/readDouble()/readUTF()等等

//字节流的第三组实现：
BufferedInputStream和BufferedOutputStream
这两个流类为IO提供了带缓冲区的操作，一般打开文件进行写入或读取操作时，都会加上缓冲，这种流模式提高了IO的读写性能。

缓冲流是将需要读取或写入的数据先放入内存中的缓冲（存）区，然后再一次性进行数据读取或写入的操作，效率比较高;

从应用程序中把数据输出到文件，相当于将一缸水(内存中)倒入到另一个缸中(硬盘文件中):
FileOutputStream---&gt;write()方法相当于一滴一滴地把水“转移”过去
DataOutputStream--&gt;writeXxx()方法会方便一些，相当于一瓢一瓢把水“转移”过去
BufferedOutputStream---&gt;write()方法更方便，相当于一飘一瓢先放入桶(即缓冲区)中，再从桶中倒入到另一个缸中，性能提高了
</code></pre><p>二、字符流的抽象基类：Reader、Writer<br>    <strong>字符流操作的是文本文件</strong></p>
<pre><code>字符输入流抽象基类Reader
字符输出流抽象基类Writer

字符的处理，一次处理一个字符(字符所占大小不一样)
字符的底层任然是基本的字节序列

//字符流的基本实现：字节字符转换流
InputStreamReader 完成byte流解析为char流，按照编码解析
OutputStreamWirter 完成char流解析为byte流，按照编码解析

//字符流的第二组实现：字符文件读写流
FileReader  操作文件的读
FileWriter  操作文件的写

//字符流的第萨三组实现：字符缓冲流
BufferedReader   --&gt;readLine   一次读一行,不识别换行
BufferedWriter   --&gt;write  一次写一行,不可输出换行
PrintWriter      --&gt;print/println  一次写一行,可输出换行

FileReader与FileWriter无法指定编码，只能取项目的默认编码
如果要指定编码，只能使用InputStreamReader和OutputStreamWirter
</code></pre><p>三、对象的序列化和反序列化</p>
<pre><code>1、对象序列化：就是将Object对象转换成byte序列，反之就是对象的反序列化。
2、序列化流(ObjectOutputStream是字节输出流)的核心方法————writeObject()
   反序列化流(ObjectInputStream是字节输入流)的核心方法————readObject()
3、对象要序列化需要实现序列化接口————Serializable
   对象必须实现序列化接口，才能进行序列化，否则将出现异常，
   这个接口，没有任何方法，只是一个标准
</code></pre><h2 id="java文件模型"><a href="#java文件模型" class="headerlink" title="java文件模型"></a>java文件模型</h2><pre><code>java中的文本是字符(char)即是16位无符号整数，是字符的unicode编码(即双字节编码)；

java中的字符串是文本即char的组成的。

java中文件是byte byte byte...的字节序列，可以是任意编码的字节序列；

java中文本文件是文本(即char)序列按照某种编码方案(如utf-8,utf-16be,gbk)序列化为byte的存储结果。

如果在中文机器上直接创建文本文件，那么文本文件只以ansi编码来保存文字信息。
中文系统中，ANSI编码代表GBK编码。

java文件模型：在硬盘上的文件是byte byte...即以字节方式存储的，是数据的集合
</code></pre><h2 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h2><pre><code>在GBK编码中，中文占两个字节，英文占一个字节
在UTF-8编码中，中文占用三个字节，英文还是一个字节
在UTF-16BE编码中，中文占两个字节，英文占两个字节，
                 java是双字节编码(即java中一个字符占2个字节)，编码格式即为utf-16be

当你的字节序列是某种编码时，如果想把字节序列变成字符串，也必须用这种编码方式进行转换，否则会出现乱码
</code></pre><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"慕课ABC"</span>;</div><div class="line"><span class="comment">//使用utf-16be编码将字符串转换为字节序列</span></div><div class="line"><span class="built_in">byte</span>[] byteArr3 = <span class="built_in">str</span>.getBytes(<span class="string">"utf-16be"</span>);</div><div class="line"></div><div class="line"><span class="comment">//用gbk编码转换utf-16be字节序列</span></div><div class="line"><span class="keyword">String</span> s1 = <span class="keyword">new</span> <span class="keyword">String</span>(byteArr3,<span class="string">"gbk"</span>);</div><div class="line">System.out.<span class="built_in">println</span>(s1);<span class="comment">//输出结果为乱码</span></div><div class="line"></div><div class="line"><span class="comment">//用正确的字节序列编码转换 字节序列为字符串</span></div><div class="line">s1 = <span class="keyword">new</span> <span class="keyword">String</span>(byteArr3,<span class="string">"utf-16be"</span>);</div><div class="line">System.out.<span class="built_in">println</span>(s1);<span class="comment">//输出结果正确</span></div></pre></td></tr></table></figure>
<h2 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h2><p>java.io.File用于操作文件或目录<br>File类只用于表示文件或目录的信息如名称、大小等，不能用于文件或目录内容的访问<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> fileDemo()&#123;</div><div class="line">            <span class="comment">//了解构造函数的情况， alt+/  查看帮助</span></div><div class="line">            <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"D:\\test\\javaio"</span>);</div><div class="line">            <span class="comment">//效果同上，兼容所有系统的分隔符</span></div><div class="line">            <span class="comment">//File file = new File("D:"+File.separator+"test"+File.separator+"javaio");</span></div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">file</span>.exists())&#123;<span class="comment">//file.exists()判断文件或目录是否存在</span></div><div class="line">                <span class="keyword">file</span>.mkdir();<span class="comment">//创建目录</span></div><div class="line">                <span class="comment">//file.mkdirs();//创建多级目录</span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">file</span>.<span class="keyword">delete</span>();<span class="comment">//删除文件或目录</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//判断是否是一个目录</span></div><div class="line">            <span class="comment">//存在返回true，不存在或者不是目录返回false</span></div><div class="line">            System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.isDirectory());</div><div class="line">            <span class="comment">//判断是否是一个文件</span></div><div class="line">            System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.isFile());</div><div class="line">            </div><div class="line">            <span class="comment">//创建文件对象</span></div><div class="line">            <span class="comment">//File file2 = new File("D:\\test\\javaio.txt");</span></div><div class="line">            <span class="comment">//效果同上</span></div><div class="line">            <span class="keyword">File</span> file2 = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"D:\\test"</span>,<span class="string">"javaio.txt"</span>);</div><div class="line">            <span class="keyword">if</span>(!file2.exists())&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">//创建文件</span></div><div class="line">                    file2.createNewFile();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                file2.<span class="keyword">delete</span>();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//其他常用的File对象的API</span></div><div class="line">            System.out.<span class="keyword">println</span>(<span class="keyword">file</span>); <span class="comment">//相当于打印file.toString()的内容</span></div><div class="line">            System.out.<span class="keyword">println</span>(file2);<span class="comment">//相当于打印file2.toString()的内容</span></div><div class="line">            System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getAbsolutePath());<span class="comment">//获取绝对路径</span></div><div class="line">            System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getName());<span class="comment">//获取文件或目录名称</span></div><div class="line">            System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getParent());<span class="comment">//获取父目录的路径</span></div><div class="line">            System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getParentFile());<span class="comment">//获取父目录的File对象</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="RandomAccessFile的使用"><a href="#RandomAccessFile的使用" class="headerlink" title="RandomAccessFile的使用"></a>RandomAccessFile的使用</h2><p>RandomAccessFile是java提供的对文件内容的访问，即可以读文件，也可以写文件<br>RandomAccessFile支持随机访问文件，即可以访问文件的任意位置</p>
<p>1、打开文件有两种模式——“rw”和”r”<br>    RandomAccessFile raf = new RandomAccessFile(file,”rw”);<br>    文件指针: 打开文件时指针在开头，pointer = 0；在读写文件的过程中，指针也同时移动<br>2、写方法<br>    raf.write()  ———— 只写一个字节(后8位)，同时指针指向下一个位置，准备再次写入<br>3、读方法<br>    int b = raf.read() ———— 读一个字节<br>4、文件读写完成后以后一定要关闭</p>
<h2 id="使用字节流对文件进行读写操作"><a href="#使用字节流对文件进行读写操作" class="headerlink" title="使用字节流对文件进行读写操作"></a>使用字节流对文件进行读写操作</h2><p>1、字节流的抽象父类：InputStream、OutputStream，其中：<br>    InputStream抽象了应用程序读取数据的方式<br>    OutputStream抽象了应用程序写出数据的方式</p>
<p>2、文件读写结束的标志：<br>    EOF表示到达文件结尾或者读到-1也表示读到文件结尾</p>
<p>3、抽象父类中的重要API:</p>
<pre><code>输入流(即读取数据，如键盘)的基本方法：
    int b = in.read();//读取一个字节无符号填充到int的低8位；读到-1表示结束
    in.read(byte[] buf);//读取数据填充到字节数组buf中
    in.read(byte[] buf,int start,int size);//读取数据填充到字节数组buf中，从buf的start位置开始，存放size长度的数据
    in.close();//关闭输入流

输出流(即写出数据)的基本方法：
    out.write(int b);//写出一个字节(byte)到流，写的是b的低8位
    out.wirte(byte[] buf);//将buf字节数组全部都写入到流
    out.wirte(byte[] buf,int start,int size);//将buf字节数组从start位置开始，写size长度的字节到流
    //关闭输出流
</code></pre><p>4、字节流的第一组具体实现子类————文件输入输出流<br>FileInputStream   —&gt; 具体实现了从文件上读取字节数据<br><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> * 批量读取，对大文件而言效率较高，也是我们常用的读取文件的方式</div><div class="line"> * <span class="keyword">@param</span> fileName</div><div class="line"> * <span class="keyword">@throws</span> IOException</div><div class="line"> *</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> printHexByByteArray(String fileName) throws IOException&#123;</div><div class="line">    FileInputStream <span class="keyword">in</span> = <span class="keyword">new</span> FileInputStream(fileName);</div><div class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</div><div class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//从in中批量读取字节，放入到buf这个字节数组中，从第0个位置开始放，</span></div><div class="line">    <span class="comment">//最多放buf.length个，返回的是读到的字节的个数</span></div><div class="line">    </div><div class="line">    <span class="keyword">int</span> bytesNum = <span class="number">0</span>;</div><div class="line">    <span class="comment">//如果字节数组不是足够大，则重复使用该数组</span></div><div class="line">    <span class="keyword">while</span>((bytesNum = <span class="keyword">in</span>.read(buf,<span class="number">0</span>,buf.length))!=-<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bytesNum;i++)&#123;</div><div class="line">            <span class="keyword">if</span>((buf[i]&amp; <span class="number">0</span>xff)&lt;=<span class="number">0</span>xf)&#123;</div><div class="line">                System.<span class="keyword">out</span>.print(<span class="string">"0"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//byte类型为8位，int类型是32位</span></div><div class="line">            <span class="comment">//为了避免数据转换错误，通过&amp; 0xff 将高24位清零</span></div><div class="line">            System.<span class="keyword">out</span>.print(Integer.toHexString(buf[i] &amp; <span class="number">0</span>xff)+<span class="string">" "</span>);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(j++%<span class="number">10</span>==<span class="number">0</span>)&#123;<span class="comment">//每输出10个byte换行</span></div><div class="line">                System.<span class="keyword">out</span>.println();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//关闭输入流</span></div><div class="line">    fin.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>FileOutputStream  —&gt; 具体实现了向文件中写出字节数据<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//append不写时,如果该文件不存在，则直接创建；如果存在，则删除后创建</span></div><div class="line"><span class="comment">//FileOutputStream out = new FileOutputStream("d:\\test\\javaio.txt");</span></div><div class="line"><span class="comment">//append为true时，如果该文件不存在，则直接创建；如果存在，则在文件尾部追加内容</span></div><div class="line"><span class="comment">//      FileOutputStream out = new FileOutputStream("d:\\test\\out.txt", true);</span></div><div class="line"><span class="comment">//      out.write('A');//write每次只写一个字节，本例写出A字符的低8位，</span></div><div class="line"><span class="comment">//      byte[] gbk = "中国".getBytes("gbk");</span></div><div class="line"><span class="comment">//      out.write(gbk);</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFile(<span class="built_in">File</span> srcFile,<span class="built_in">File</span> destFile) throws IOException&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">if</span>(!srcFile.<span class="built_in">exists</span>())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"文件"</span>+srcFile+<span class="string">"不存在"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">if</span>(!srcFile.isFile())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(srcFile+<span class="string">"不是文件"</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(srcFile);</div><div class="line">        FileOutputStream out  = <span class="keyword">new</span> FileOutputStream(destFile);</div><div class="line">        </div><div class="line">        <span class="comment">//批量写入</span></div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> b;</div><div class="line">        </div><div class="line">        <span class="built_in">while</span>((b = in.<span class="built_in">read</span>(buf,<span class="number">0</span>,buf.length))!=<span class="number">-1</span>)&#123;</div><div class="line">             out.<span class="built_in">write</span>(buf, <span class="number">0</span>, b);     </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        out.<span class="built_in">flush</span>();<span class="comment">//最好加上</span></div><div class="line">        in.<span class="built_in">close</span>();</div><div class="line">        out.<span class="built_in">close</span>();</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>5、字节流的第二组具体实现子类————数据输入输出流<br>DataInputStream/DataOutputStream<br>    对”流”功能的扩展，可以更加方面的读取int、long、字符等类型数据,主要用于操作类型数据<br>    DataOutputStream:<br>        wirteInt()/wirteDouble()/wirteUTF()等等<br>    DataInputStream:<br>        readInt()/readDouble()/readUTF()等等<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用FileOutputStream对象包装DataOutputStream</span></div><div class="line">DataOutputStream <span class="keyword">dos</span> = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\test\\out.txt"</span>));</div><div class="line"></div><div class="line"><span class="keyword">dos</span>.writeInt(<span class="number">10</span>);</div><div class="line"><span class="keyword">dos</span>.writeUTF(<span class="string">"中国"</span>);<span class="comment">//采用UTF-8编码写出</span></div><div class="line"><span class="keyword">dos</span>.writeChars(<span class="string">"中国"</span>);<span class="comment">//采用UTF-16BE编码写出</span></div><div class="line">    </div><div class="line"><span class="comment">//使用FileInputStream对象包装DataInputStream</span></div><div class="line">DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(fileName));</div><div class="line">int i = dis.readInt();</div><div class="line"><span class="keyword">System</span>.out.println(i);</div><div class="line"></div><div class="line"><span class="comment">//采用UTF-8编码读取</span></div><div class="line"><span class="keyword">System</span>.out.println(dis.readUTF());</div><div class="line"><span class="comment">//采用UTF-16BE编码读取</span></div><div class="line"><span class="keyword">System</span>.out.println(dis.readChar());</div><div class="line"><span class="keyword">System</span>.out.println(dis.readChar());</div><div class="line">dis.<span class="built_in">close</span>();</div></pre></td></tr></table></figure></p>
<p>6、字节缓存流<br>BufferedInputStream和BufferedOutputStream<br>    这两个流类为IO提供了带缓冲区的操作，一般打开文件进行写入或读取操作时，都会加上缓冲，这种流模式提高了IO的读写性能。</p>
<pre><code>缓冲流是将需要读取或写入的数据先放入内存中的缓冲（存）区，然后再一次性进行数据读取或写入的操作，效率比较高;
</code></pre><p>从应用程序中把数据输出到文件，相当于将一缸水(内存中)倒入到另一个缸中(硬盘文件中):<br>    FileOutputStream—&gt;write()方法相当于一滴一滴地把水“转移”过去<br>    DataOutputStream–&gt;writeXxx()方法会方便一些，相当于一瓢一瓢把水“转移”过去<br>    BufferedOutputStream—&gt;write()方法更方便，相当于一飘一瓢先放入桶(即缓冲区)中，再从桶中倒入到另一个缸中，性能提高了<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//批量读取、缓冲输出的字节流进行文件复制</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFileByBufferAndByteArray(<span class="built_in">File</span> srcFile,<span class="built_in">File</span> destFile) throws IOException&#123;</div><div class="line">        <span class="built_in">if</span>(!srcFile.<span class="built_in">exists</span>())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"文件"</span>+srcFile+<span class="string">"不存在"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">if</span>(!srcFile.isFile())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(srcFile+<span class="string">"不是文件"</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream( <span class="keyword">new</span> FileInputStream(srcFile));</div><div class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(destFile));</div><div class="line">        </div><div class="line">        <span class="comment">//批量读取</span></div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> b;</div><div class="line">        <span class="built_in">while</span>((b = bis.<span class="built_in">read</span>(buf))!=<span class="number">-1</span>)&#123;</div><div class="line">            <span class="comment">//缓冲输出</span></div><div class="line">            bos.<span class="built_in">write</span>(buf, <span class="number">0</span>, b);   </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//复制文件最快的做法应该是批量读取到字节数组中然后使用缓冲输出流写入到文件。</span></div><div class="line">        <span class="comment">//并且在循环写入的过程中不要flush，要不然就失去了缓冲的意义，</span></div><div class="line">        <span class="comment">//缓冲输出流在关闭的时候会将所有缓冲区中的数据全部写入文件。</span></div><div class="line">        </div><div class="line">        <span class="comment">//flush()主要用于即使缓存区没有满的情况下，会把缓存区的内容强制写入外设（主要是文件），</span></div><div class="line">        <span class="comment">//而当缓存区满了，会自动写入文件中;</span></div><div class="line"></div><div class="line">        bos.<span class="built_in">flush</span>();</div><div class="line">        bos.<span class="built_in">close</span>();</div><div class="line">        bis.<span class="built_in">close</span>();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用字符流对文件进行读写操作"><a href="#使用字符流对文件进行读写操作" class="headerlink" title="使用字符流对文件进行读写操作"></a>使用字符流对文件进行读写操作</h2><p><strong>字符流操作的是文本文件</strong></p>
<p>1、字符输入流和输出流抽象基类</p>
<pre><code>字符输入流抽象基类Reader
字符输出流抽象基类Writer

字符的处理，一次处理一个字符(字符所占大小不一样)
字符的底层任然是基本的字节序列
</code></pre><p>2、字符流的基本实现</p>
<pre><code>InputStreamReader 完成byte流解析为char流，按照编码解析
OutputStreamWirter 完成char流解析为byte流，按照编码解析
</code></pre><h3 id="字节字符转换流"><a href="#字节字符转换流" class="headerlink" title="字节字符转换流"></a>字节字符转换流</h3><p>见上一节的2——字符流的基本实现</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//利用字符数组批量读取进行文件复制</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFileByCharArray(<span class="built_in">File</span> srcFile,<span class="built_in">File</span> destFile) throws IOException&#123;</div><div class="line">        <span class="built_in">if</span>(!srcFile.<span class="built_in">exists</span>())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"文件"</span>+srcFile+<span class="string">"不存在"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">if</span>(!srcFile.isFile())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(srcFile+<span class="string">"不是文件"</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//构造字符输入、输出流对象</span></div><div class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(srcFile);</div><div class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(in);<span class="comment">//默认是项目的编码,将要写文件本身的编码格式</span></div><div class="line">        </div><div class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(destFile);</div><div class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(out);<span class="comment">//默认是项目的编码</span></div><div class="line">        </div><div class="line">        <span class="comment">//每次读一个字符</span></div><div class="line"><span class="comment">//      int c ;</span></div><div class="line"><span class="comment">//      while((c=isr.read())!=-1)&#123;</span></div><div class="line"><span class="comment">//          System.out.print((char)c);</span></div><div class="line"><span class="comment">//      &#125;</span></div><div class="line">        </div><div class="line">        <span class="comment">//每次读一个字符数组</span></div><div class="line">        <span class="keyword">char</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">8</span>*<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> d;</div><div class="line">        <span class="comment">//批量读取，放入buffer这个字符数组，从第0个位置开始放置，最多放buffer.length个</span></div><div class="line">        <span class="comment">//返回的是读到的字符的个数</span></div><div class="line">        <span class="built_in">while</span>((d=isr.<span class="built_in">read</span>(<span class="built_in">buffer</span>))!=<span class="number">-1</span>)&#123;</div><div class="line">            <span class="comment">//String s = new String(buffer,0,d);</span></div><div class="line">            <span class="comment">//System.out.print(s);</span></div><div class="line">            osw.<span class="built_in">write</span>(<span class="built_in">buffer</span>,<span class="number">0</span>,d);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        osw.<span class="built_in">flush</span>();</div><div class="line">        osw.<span class="built_in">close</span>();</div><div class="line">        isr.<span class="built_in">close</span>();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="字符流文件读写流"><a href="#字符流文件读写流" class="headerlink" title="字符流文件读写流"></a>字符流文件读写流</h3><p>FileReader  操作文件的读<br>FileWriter  操作文件的写</p>
<p><strong>FileReader与FileWriter无法指定编码，只能取项目的默认编码</strong><br>如果要指定编码，只能使用InputStreamReader和OutputStreamWirter<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//无法指定编码，只能默认去项目的编码</span></div><div class="line">FileReader fr = <span class="keyword">new</span> FileReader(srcFile);</div><div class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(destFile);           </div><div class="line"></div><div class="line"><span class="comment">//批量读取</span></div><div class="line"><span class="keyword">char</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">8</span>*<span class="number">1024</span>];</div><div class="line"><span class="keyword">int</span> c;</div><div class="line"><span class="built_in">while</span>((c= fr.<span class="built_in">read</span>(<span class="built_in">buffer</span>))!=<span class="number">-1</span>)&#123;</div><div class="line">                fw.<span class="built_in">write</span>(<span class="built_in">buffer</span>,<span class="number">0</span>,c);</div><div class="line">&#125;</div><div class="line">        </div><div class="line">fw.<span class="built_in">flush</span>();</div><div class="line">fr.<span class="built_in">close</span>();</div><div class="line">fw.<span class="built_in">close</span>();</div></pre></td></tr></table></figure></p>
<h3 id="字符流的缓冲器"><a href="#字符流的缓冲器" class="headerlink" title="字符流的缓冲器"></a>字符流的缓冲器</h3><p>BufferedReader   –&gt;readLine   一次读一行,不识别换行<br>BufferedWriter   –&gt;write  一次写一行,不可输出换行<br>PrintWriter      –&gt;print/println  一次写一行,可输出换行<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//利用BufferedReader和PrintWriter字符缓冲流进行文件复制</span></div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(</div><div class="line">                <span class="keyword">new</span> InputStreamReader(</div><div class="line">                        <span class="keyword">new</span> FileInputStream(srcFile)));</div><div class="line">        </div><div class="line"><span class="comment">//      BufferedWriter bw  = new BufferedWriter(</span></div><div class="line"><span class="comment">//              new OutputStreamWriter(</span></div><div class="line"><span class="comment">//                      new FileOutputStream(destFile)));</span></div><div class="line"><span class="comment">//      </span></div><div class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(destFile);</div><div class="line">        <span class="comment">//PrintWriter pw2 = new PrintWriter(out, autoFlush)</span></div><div class="line">        <span class="keyword">String</span> <span class="built_in">line</span>;</div><div class="line">        <span class="built_in">while</span>((<span class="built_in">line</span> = br.readLine())!=null)&#123;</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="built_in">line</span>);<span class="comment">//一次读一行，不识别换行</span></div><div class="line"><span class="comment">//          bw.write(line);//单独写出换行操作</span></div><div class="line"><span class="comment">//          bw.newLine();//换行操作</span></div><div class="line">            </div><div class="line">            pw.<span class="built_in">println</span>(<span class="built_in">line</span>);<span class="comment">//一次读一行，可输出换行</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">            <span class="comment">//bw.flush();</span></div><div class="line">            pw.<span class="built_in">flush</span>();</div><div class="line">            br.<span class="built_in">close</span>();</div><div class="line">            <span class="comment">//bw.close();</span></div><div class="line">            pw.<span class="built_in">close</span>();</div></pre></td></tr></table></figure></p>
<h2 id="对象的序列化和反序列化"><a href="#对象的序列化和反序列化" class="headerlink" title="对象的序列化和反序列化"></a>对象的序列化和反序列化</h2><p>1、对象序列化：就是将Object对象转换成byte序列，反之就是对象的反序列化。<br>2、序列化流(ObjectOutputStream是字节输出流)的核心方法————writeObject()<br>   反序列化流(ObjectInputStream是字节输入流)的核心方法————readObject()<br>3、对象要序列化需要实现序列化接口————Serializable<br>    对象必须实现序列化接口，才能进行序列化，否则将出现异常，<br>    这个接口，没有任何方法，只是一个标准<br>4、transient关键字<br>    被transient修饰的成员变量不会进行jvm默认的序列化，<br>    但可以自己完成该元素的序列化<br>5、一个类实现了序列化接口，其子类一定都可以进行序列化；<br>    对子类对象进行反序列化操作时，如果其父类没有实现序列化接口，则其父类的构造函数会被调用————当父类没实现Serializable接口，子类继承父类并实现Serializable接口，子类序列化时，父类的部分是没有被序列化的，那么反序列化的时候就没办法找到父类的部分，这时候怎么办呢，就调用父类构造器初始化父类部分。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、对象要序列化需要实现序列化接口————Serializable</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> StudentSeriali <span class="keyword">implements</span> Serializable&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> stuAge;</div><div class="line">    <span class="comment">//被transient修饰的元素不会进行jvm默认的序列化，</span></div><div class="line">    <span class="comment">//但可以自己完成该元素的序列化</span></div><div class="line"></div><div class="line">    <span class="comment">//自己完成元素的序列化</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)</div><div class="line">    <span class="keyword">throws</span> java.io.IOException&#123;</div><div class="line"></div><div class="line">        s.defaultWriteObject();<span class="comment">//把jvm能默认序列化的元素进行序列化操作</span></div><div class="line">        </div><div class="line">        s.writeInt(stuAge);<span class="comment">//自己完成stuAge的序列化</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//自己完成元素的反序列化</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)</div><div class="line">            <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</div><div class="line">        s.defaultReadObject();<span class="comment">//把jvm能默认反序列化的元素进行反序列化操作</span></div><div class="line">        <span class="keyword">this</span>.stuAge  = s.readInt();<span class="comment">//自己完成stuAge的反序列化操作</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//2、对象序列化</span></div><div class="line">String <span class="keyword">file</span> = <span class="string">"d:\\test\\obj.dat"</span>;</div><div class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(</div><div class="line">        <span class="keyword">new</span> FileOutputStream(<span class="keyword">file</span>));</div><div class="line"></div><div class="line">StudentSeriali stu = <span class="keyword">new</span> StudentSeriali(<span class="string">"1001"</span>,<span class="string">"张三"</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line">oos.writeObject(stu);</div><div class="line"></div><div class="line">oos.flush();</div><div class="line">oos.close();</div><div class="line"></div><div class="line"><span class="comment">//3、对象的反序列化</span></div><div class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(</div><div class="line">        <span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>));</div><div class="line"></div><div class="line">StudentSeriali stu2 = (StudentSeriali)ois.readObject();</div><div class="line">System.out.<span class="keyword">println</span>(stu2);</div><div class="line"></div><div class="line">ois.close();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ajax全接触]]></title>
      <url>https://aiolos123.github.io/2016/11/24/how-to-use-ajax/</url>
      <content type="html"><![CDATA[<p>本节课程由浅入深，循序渐进的介绍了Ajax的所有相关知识<br>视频来源：<a href="http://www.imooc.com/learn/250" target="_blank" rel="external">http://www.imooc.com/learn/250</a><br><a id="more"></a></p>
<h2 id="什么是异步"><a href="#什么是异步" class="headerlink" title="什么是异步"></a>什么是异步</h2><pre><code>XMLHttpRequest对象的出现分割了同步和异步的时代。XMLHttpRequest出现之前是同步的，出现之后是异步的。
</code></pre><p>同步：用户填写相关信息后一次性提交所有信息，若出现错误信息或者必填数据没填写，需要重新填写或者更正后重新提交，这样耗时长，无法实时更正信息，用户体验差。</p>
<p>异步：用户在填写相关信息时，系统会实时的检验数据正确与否，若不符合要求则会实时提示用户，这样用户提交时就不会出现因为填写的数据不准确而失败，需要重新填写的情况，耗时短、实时更正信息、用户体验强。</p>
<h2 id="什么是HTTP请求"><a href="#什么是HTTP请求" class="headerlink" title="什么是HTTP请求"></a>什么是HTTP请求</h2><p>本节视频来源：<a href="http://www.imooc.com/video/5647" target="_blank" rel="external">http://www.imooc.com/video/5647</a></p>
<p>HTTP是计算机通过网络进行通信的协议；使浏览器是可以从服务器请求信息和服务；<br>HTTP是一种无状态协议，即不会保存浏览器与服务器端连接状态的协议；</p>
<p>1、一次完整的HTTP请求与响应，有如下7步：<br>    1.建立TCP连接————三次握手<br>    2.Web浏览器向Web服务器发送请求命令<br>    3.Web浏览器发送请求头信息<br>    4.Web服务器应答<br>    5.Web服务器发送应答头信息<br>    6.Web服务器向浏览器发送数据<br>    7.Web服务器关闭TCP连接————无状态协议的特点</p>
<p>其中，前三步属于HTTP请求，后四步属于HTTP响应</p>
<p>2、HTTP请求一般由四部分组成：<br>    1.HTTP请求的方法或动作，比如是GET还是POST请求。<br>        GET：一般用于查询服务器信息<br>            使用URL传递参数<br>            对所发送信息的数量也有限制，一般在2000个字符<br>        POST：一般用于修改服务器上的资源<br>            对所发送信息的数量无限制<br>    2.正在请求的URL，总得知道请求的服务端地址是什么吧<br>    3.请求头，包含一些客户端环境信息，身份证信息等<br>    4.请求体，也就是请求正文，请求正文中可以包含客户提交的查询字符串信息，表单信息等等(请求头与请求体之间以空行分隔)。<br>3、HTTP响应一般由三部分组成：<br>    1、由数字和文字组成的状态码，显示成功还是失败了<br>        1xx：信息类，表示收到web浏览器请求，正在进一步的处理中<br>        2xx：成功，表示用户请求被正确接收，理解和处理<br>        3xx：重定向，表示请求没有成功，客户必须采取进一步的动作<br>        4xx：客户端错误，表示客户端提交的请求有错误，例如：404 not found，意味着请求中所引用的文档不存在。<br>        5xx：服务器错误，表示服务器不能完成对请求的处理：如500<br>    2、响应头，列入服务器类型 日期内容长度<br>    3、响应体，也就是响应正文</p>
<h2 id="如何使用AJAX"><a href="#如何使用AJAX" class="headerlink" title="如何使用AJAX"></a>如何使用AJAX</h2><h3 id="使用AJAX的步骤"><a href="#使用AJAX的步骤" class="headerlink" title="使用AJAX的步骤"></a>使用AJAX的步骤</h3><p>1、利用html+css来实现页面，表达信息；<br>2、用XMLHttpRequest和web服务器进行数据的异步交换；(重点)<br>3、运用JS操作DOM，实现动态局部刷新；</p>
<h3 id="利用html-css来实现页面，表达信息"><a href="#利用html-css来实现页面，表达信息" class="headerlink" title="利用html+css来实现页面，表达信息"></a>利用html+css来实现页面，表达信息</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>员工查询<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入员工编号：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"keyword"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"search"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"searchResult"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>员工新建<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入员工姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"staffName"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入员工编号：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"staffNumber"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>请选择员工性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"staffSex"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入员工职位：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"staffJob"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"save"</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"createResult"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="使用AJAX和web服务器进行数据的异步交换，局部刷新"><a href="#使用AJAX和web服务器进行数据的异步交换，局部刷新" class="headerlink" title="使用AJAX和web服务器进行数据的异步交换，局部刷新"></a>使用AJAX和web服务器进行数据的异步交换，局部刷新</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">&lt;!-- 一、jS中的AJAX --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"search"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">            <span class="comment">//一、创建XMLHttpRequest对象</span></div><div class="line">            <span class="keyword">var</span> request;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">                <span class="comment">//IE7+,FF,Chrome,Opera,Safari</span></div><div class="line">                request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//IE5,IE6</span></div><div class="line">                request = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//二、XMLHttpRequest对象发送请求</span></div><div class="line">            </div><div class="line">            <span class="comment">//open(请求的方式,请求的url地址,请求是同步还是异步true为默认值表异步)</span></div><div class="line">            <span class="comment">//send(请求体的内容字符串)</span></div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">///////////////GET方式///////////////////////</span></div><div class="line">            request.open(<span class="string">"GET"</span>, <span class="string">"server.php?number="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"keyword"</span>).value);<span class="comment">//参数在url的?后</span></div><div class="line">            request.send(<span class="literal">null</span>);</div><div class="line">            </div><div class="line">            <span class="comment">///////////////////POST方式/////////////////</span></div><div class="line">            request.open(<span class="string">"POST"</span>, <span class="string">"server.php"</span>);</div><div class="line">            <span class="comment">//setRequestHeader()方法设置HTTP的头信息，通知服务器将要发送一个表单信息</span></div><div class="line">            request.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">            <span class="keyword">var</span> data = <span class="string">"name="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffName"</span>).value </div><div class="line">                      + <span class="string">"&amp;number="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffNumber"</span>).value </div><div class="line">                      + <span class="string">"&amp;sex="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffSex"</span>).value </div><div class="line">                      + <span class="string">"&amp;job="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffJob"</span>).value;</div><div class="line">            request.send(data);<span class="comment">//参数在send的参数中</span></div><div class="line"></div><div class="line">            <span class="comment">//三、XMLHttpRequest对象获取响应</span></div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="comment">//XMLHttpRequest对象的一些属性</span></div><div class="line">            <span class="comment">//  1、responseText: 获得字符串形式的响应数据</span></div><div class="line">            <span class="comment">//  2、responseXML:  获得XML形式的响应数据</span></div><div class="line">            <span class="comment">//  3、status和statusText:以数字和文本形式返回HTTP状态码</span></div><div class="line">            <span class="comment">//          200：表示请求成功</span></div><div class="line">            <span class="comment">//  4、getAllResponseHeader():  获得所有的响应报头</span></div><div class="line">            <span class="comment">//  5、getResponseHeader(String) ：查询响应中的某个字段的值</span></div><div class="line">            <span class="comment">//  6、readyState: 表示服务器相应状态</span></div><div class="line">            <span class="comment">//          0：表示请求未初始化，open还没有调用</span></div><div class="line">            <span class="comment">//          1：服务器连接已建立，open已经被调用</span></div><div class="line">            <span class="comment">//          2：请求已接收，即服务器已经接收到头信息了</span></div><div class="line">            <span class="comment">//          3：请求处理中，即服务器已经接收到响应头和响应主体了</span></div><div class="line">            <span class="comment">//          4：请求已完成，且响应已就绪，即响应完成了</span></div><div class="line">            <span class="comment">//   7、onreadystatechange事件，监听readyState的变化并作相应处理,该事件在每次readyState发生变化时触发，共触发5次</span></div><div class="line">            request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//响应完成且请求成功</span></div><div class="line">                <span class="keyword">if</span>(request.readyState === <span class="number">4</span> &amp;&amp; request.status === <span class="number">200</span>)&#123;</div><div class="line">                    <span class="comment">//做事情  request.responseText</span></div><div class="line">                    <span class="comment">//var data = JSON.parse(request.responseText);</span></div><div class="line">                    <span class="comment">//运用JS操作DOM，实现动态局部刷新</span></div><div class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">"searchResult"</span>).innerHTML = request.responseText;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    alert(<span class="string">"发生错误"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>1、JSON: JavaScript对象表示法————JavaScript Object Notation<br>2、JSON是存储和交换文本信息的语法，类似XML。采用键值对的方式来组织，易于人们阅读和编写，同时也易于机器解析和生成。<br>3、JSON是独立于语言的，即不管什么语言，都可以解析json，只需按照json的规则来即可。<br>4、JSON可以使用javascript内建的方法直接进行解析，转换成javascript对象，非常方便<br>5、JSON比XML读写速度更快<br>6、JSON的语法规则：<br>    由键值对组成<br>    JSON的值可以是数字、字符串、逻辑值、数组——用[]括住、对象——用{}括住、null<br>7、在JS中解析JSON的两种方式————eval()和JSON.parse()<br>    <strong>因在代码中使用eval很危险，推荐使用JSON.parse()来解析字符串，该方法还可以捕捉JSON中的语法错误。</strong></p>
<pre><code>JSON.parse()可在JS中直接使用，无需导入任何代码
JSON.parse是大写的不能搞错了!
</code></pre><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> jsondata='&#123;<span class="string">"staff"</span>: [&#123;<span class="string">"name"</span>: <span class="string">"hongqi"</span>,<span class="string">"age"</span>: <span class="number">20</span>&#125;, &#123;<span class="string">"name"</span>: <span class="string">"guo"</span>, <span class="string">"age"</span>: <span class="number">70</span>&#125;, &#123;<span class="string">"name"</span>: <span class="string">"li"</span>,<span class="string">"age"</span>: <span class="number">30</span>&#125;]&#125;';</div><div class="line"></div><div class="line"><span class="comment">//将json字符串转换为js对象</span></div><div class="line"><span class="built_in">var</span> jsonobj = JSON.<span class="built_in">parse</span>(jsondata);</div><div class="line">alert(jsonobj.staff[<span class="number">0</span>].name);</div></pre></td></tr></table></figure>
<p> 8、json校验工具<br>    jsonlint.com </p>
<h2 id="利用jQuery使用AJAX"><a href="#利用jQuery使用AJAX" class="headerlink" title="利用jQuery使用AJAX"></a>利用jQuery使用AJAX</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/1.11.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">//jQuery.ajax的参数说明：</span></div><div class="line"><span class="comment">// jQuery.ajax([</span></div><div class="line">        <span class="comment">//   type: 请求类型的字符串，"POST"或"GET"，默认为"GET"</span></div><div class="line">        <span class="comment">//   url:  发送请求的地址字符串</span></div><div class="line">        <span class="comment">//   data：是一个对象，连同请求发送到服务器的数据，主要在POST请求时使用</span></div><div class="line">        <span class="comment">//   dataType:预期服务器返回的数据类型字符串，如果不指定，jQuery将自动根据HTTP包MIME信息来智能判断，一般采用JSON格式，可以设置为“json”</span></div><div class="line">        <span class="comment">//   success:是一个方法，请求成功后的回调函数，传入返回的数据，以及包含成功代码的字符串</span></div><div class="line">        <span class="comment">//   error：是一个方法，请求失败时调用此方法，传入XMLHTTPRequest对象</span></div><div class="line">        <span class="comment">// ])</span></div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="comment">// GET 方式</span></div><div class="line">    $(<span class="string">"#search"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">        $.ajax(&#123; </div><div class="line">            type: <span class="string">"GET"</span>,    </div><div class="line">            url: <span class="string">"./serverjson2.php?number="</span> + $(<span class="string">"#keyword"</span>).val(),</div><div class="line">            dataType: <span class="string">"json"</span>,</div><div class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                <span class="comment">//因dataType已指定为json，此处的data已经进行了json的格式化和对象化</span></div><div class="line">                <span class="keyword">if</span> (data.success) &#123; </div><div class="line">                    $(<span class="string">"#searchResult"</span>).html(data.msg);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $(<span class="string">"#searchResult"</span>).html(<span class="string">"出现错误："</span> + data.msg);</div><div class="line">                &#125;  </div><div class="line">            &#125;,</div><div class="line">            error: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>&#123;     </div><div class="line">               alert(<span class="string">"发生错误："</span> + jqXHR.status);  </div><div class="line">            &#125;,     </div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// POST 方式</span></div><div class="line">    $(<span class="string">"#save"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">        $.ajax(&#123; </div><div class="line">            type: <span class="string">"POST"</span>,   </div><div class="line">            url: <span class="string">"serverjson.php"</span>,</div><div class="line">            dataType: <span class="string">"json"</span>,</div><div class="line">            <span class="comment">//data为json格式的数据</span></div><div class="line">            data: &#123;</div><div class="line">                name: $(<span class="string">"#staffName"</span>).val(), </div><div class="line">                number: $(<span class="string">"#staffNumber"</span>).val(), </div><div class="line">                sex: $(<span class="string">"#staffSex"</span>).val(), </div><div class="line">                job: $(<span class="string">"#staffJob"</span>).val()</div><div class="line">            &#125;,</div><div class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span> (data.success) &#123; </div><div class="line">                    $(<span class="string">"#createResult"</span>).html(data.msg);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $(<span class="string">"#createResult"</span>).html(<span class="string">"出现错误："</span> + data.msg);</div><div class="line">                &#125;  </div><div class="line">            &#125;,</div><div class="line">            error: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>&#123;     </div><div class="line">               alert(<span class="string">"发生错误："</span> + jqXHR.status);  </div><div class="line">            &#125;,     </div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h2><pre><code>不同域：当协议、子域名、主域名、端口号中任意一个不相同时，就是不同域
跨域：当不同域之间相互请求资源时就是跨域
</code></pre><p><img src="http://ocej2soxx.bkt.clouddn.com/%E8%B7%A8%E5%9F%9F.jpg" alt="跨域"></p>
<h3 id="出现跨域的原因"><a href="#出现跨域的原因" class="headerlink" title="出现跨域的原因"></a>出现跨域的原因</h3><p><img src="http://ocej2soxx.bkt.clouddn.com/%E8%B7%A8%E5%9F%9F2.jpg" alt="出现跨域的原因"></p>
<p><strong>解决跨域问题的三种方式：</strong></p>
<pre><code>1、使用代理解决跨域问题
2、使用JSONP解决跨域问题
3、使用XHR2解决跨域问题
</code></pre><h3 id="使用代理解决跨域问题"><a href="#使用代理解决跨域问题" class="headerlink" title="使用代理解决跨域问题"></a>使用代理解决跨域问题</h3><p><img src="http://ocej2soxx.bkt.clouddn.com/%E8%B7%A8%E5%9F%9F3.jpg" alt="使用代理解决跨域问题"></p>
<h3 id="使用JSONP解决跨域问题"><a href="#使用JSONP解决跨域问题" class="headerlink" title="使用JSONP解决跨域问题"></a>使用JSONP解决跨域问题</h3><p>关于JSONP的详细说明，请参考:<br><a href="http://blog.csdn.net/u010235716/article/details/51553746" target="_blank" rel="external">http://blog.csdn.net/u010235716/article/details/51553746</a></p>
<pre><code>JSONP协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。
</code></pre><p>一、JSONP可用于解决主流浏览器的跨域GET数据请求问题</p>
<pre><code>JSONP不支持POST请求，只支持GET请求

JSONP的原理是利用动态添加&lt;script&gt;标签、其src可以请求任何域名资源的特点，来调用服务器提供的js脚本从而解决跨域问题。如下代码：

ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加&lt;script&gt;标签来调用服务器提供的js脚本。
</code></pre><p>在www.aaa.com页面中定义函数，从远程jsonp.js中传入数据进行调用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="actionscript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span><span class="params">(json)</span></span>&#123;</div><div class="line">        alert(json[<span class="string">"name"</span>]);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">     相当于函数的调用,即：</div><div class="line">     jsonp(&#123;'name':'红旗','age':24&#125;);</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.bbb.com/jsonp.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在www.bbb.com页面的jsonp.js中：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">jsonp</span><span class="params">(&#123;<span class="string">'name'</span>:<span class="string">'红旗'</span>,<span class="string">'age'</span>:<span class="number">24</span>&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>运行结果：页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据</p>
<p>jsonp完成调用的全过程：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">// 得到航班信息查询结果后的回调函数</span></div><div class="line">    <span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        alert(<span class="string">'你查询的航班结果是：票价 '</span> + data.price + <span class="string">' 元，'</span> + <span class="string">'余票 '</span> + data.tickets + <span class="string">' 张。'</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></div><div class="line">    <span class="comment">//url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。</span></div><div class="line">    <span class="keyword">var</span> url = <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler"</span>;</div><div class="line">    <span class="comment">// 创建script标签，设置其属性</span></div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    script.setAttribute(<span class="string">'src'</span>, url);</div><div class="line">    <span class="comment">// 把script标签加入head，此时调用开始</span></div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script); </div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>服务器flightResult.aspx返回的数据<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flightHandler(&#123;</div><div class="line">    <span class="string">"code"</span>: <span class="string">"CA1998"</span>,</div><div class="line">    <span class="string">"price"</span>: <span class="number">1780</span>,</div><div class="line">    <span class="string">"tickets"</span>: <span class="number">5</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>二、在jQuery中使用JSONP<br>前端代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="comment">// GET 方式</span></div><div class="line">    $(<span class="string">"#search"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">        $.ajax(&#123; </div><div class="line">            type: <span class="string">"GET"</span>,    </div><div class="line">            url: <span class="string">"./serverjson2.php?number="</span> + $(<span class="string">"#keyword"</span>).val(),</div><div class="line">            dataType: <span class="string">"jsonp"</span>, <span class="comment">//指定服务器返回的数据类型为jsonp</span></div><div class="line">            jsonp: <span class="string">"callback"</span>,<span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></div><div class="line">            jsonpCallback:<span class="string">"flightHandler"</span>,<span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"或不写这一行，jQuery会自动为你处理数据</span></div><div class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                <span class="comment">//因dataType已指定为json，此处的data已经进行了json的格式化和对象化</span></div><div class="line">                <span class="keyword">if</span> (data.success) &#123; </div><div class="line">                    $(<span class="string">"#searchResult"</span>).html(data.msg);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $(<span class="string">"#searchResult"</span>).html(<span class="string">"出现错误："</span> + data.msg);</div><div class="line">                &#125;  </div><div class="line">            &#125;,</div><div class="line">            error: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>&#123;     </div><div class="line">               alert(<span class="string">"发生错误："</span> + jqXHR.status);  </div><div class="line">            &#125;,     </div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>后台代码如下<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后台返回方法及其实参，并将实参赋予ajax中success的data形参</span></div><div class="line"><span class="keyword">return</span> <span class="symbol">'callback</span>(&#123;<span class="string">"success"</span>:<span class="literal">false</span>,<span class="string">"msg"</span>:<span class="string">"没有找到员工。"</span>&#125;)';</div></pre></td></tr></table></figure></p>
<h3 id="使用XHR2解决跨域问题"><a href="#使用XHR2解决跨域问题" class="headerlink" title="使用XHR2解决跨域问题"></a>使用XHR2解决跨域问题</h3><p>HTML5提供的XMLHttpRequest Level2(简称XHR2)已经实现了跨域访问以及其他的一些新功能</p>
<pre><code>默认IE10以下的版本不支持XHR2
</code></pre><p>使用XHR2解决跨域问题的方式：<br>    只需在PHP服务器端增加如下2句代码中的任何一句<br>    header(“Access-Control-Allow-Origin:*”);<br>    header(“Access-Control-Allow-Methods:POST,GET”);</p>
<p>注：解决XHR2的IE10以下跨域：<br>    只需在代码中js加上一句<br>    jQuery.support.cors =true;或者$.support.cors =true;<br>    然后：设置IE浏览器-&gt;Internet选项-&gt;安全-&gt;自定义级别-&gt;其他选项下面的-&gt;通过源数据：选择“启用”或者“提示”</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android切换Tab的实现]]></title>
      <url>https://aiolos123.github.io/2016/11/21/15-Android%E5%88%87%E6%8D%A2Tab%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>本节课程讲解4中App主界面Tab实现方法,及自定义ViewPagerIndicator的实现<br>视频来源：<br><a href="http://www.imooc.com/learn/264" target="_blank" rel="external">http://www.imooc.com/learn/264</a><br><a href="http://www.imooc.com/learn/615" target="_blank" rel="external">http://www.imooc.com/learn/615</a><br><a id="more"></a><br>1、layout_gravity与gravity的区别：<br>    layout_gravity———— 本控件在其父控件中的对齐方式<br>    gravity———— 控件内部元素的对齐方式</p>
<p>2、layout_weight = 1的妙用：<br>    layout_weight = 1并且layout_width=”0dp”<br>    layout_weight = 1并且layout_height=”0dp”</p>
<pre><code>本控件将占用/均分屏幕的剩余全部空间；
layout_weight 仅可使用在LinearLayout中
</code></pre><p>3、解决点击ImageButton不切换的Bug<br>     为ImageButton增加android:clickable=”false”的属性，使其不具备处理点击事件的能力，从而将处理点击事件的责任交给其父控件；</p>
<pre><code>造成点击ImageButton不切换的原因是：当点击事件发生后，LinearLayout会首先接受到该事件，同时LinearLayout发现其内部子控件ImageButton具有处理点击事件的能力，因此将该点击事件就给其内部子控件ImageButton进行处理，但因为ImageButton未绑定事件处理方法，所以出现了点击ImageButton不出现效果的Bug。

解决办法是通知LinearLayout其内部子控件ImageButton不具有处理点击事件的能力，则该点击事件将直接由LinearLayout进行处理。而说明ImageButton不具有处理点击事件的能力的方式就是为ImageButton增加android:clickable=&quot;false&quot;的属性。
</code></pre><p>4、优化布局层次可以使用：<br>    include<br>    merge<br>    viewStub</p>
<p>5、Fragment实现Tab较ViewPager的优点<br>    每个切换页面的事件处理都放到各种的Fragment中编写，避免使用ViewPager时都只能编写到MainActivity中</p>
<h2 id="ViewPager实现Tab"><a href="#ViewPager实现Tab" class="headerlink" title="ViewPager实现Tab"></a>ViewPager实现Tab</h2><p>一、底部切换Tab布局文件————tablearning_bottom.xml<br>    一个横向LinearLayout中包括四个纵向的LinearLayout<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"55dp"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@drawable/bottom_bar"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--一个横向LinearLayout中包括四个纵向的LinearLayout--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_weixin"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_weixin_img"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:clickable</span>=<span class="string">"false"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/tab_weixin_pressed"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#ffffffff"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"微信"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_friend"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_friend_img"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:clickable</span>=<span class="string">"false"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/tab_find_frd_normal"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#ffffffff"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"朋友"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_address"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_address_img"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:clickable</span>=<span class="string">"false"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/tab_address_normal"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#ffffffff"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"通讯录"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_setting"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_setting_img"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:clickable</span>=<span class="string">"false"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/tab_settings_normal"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#ffffffff"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"设置"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>二、主布局文件————main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--引入top布局文件,内容忽略--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/tablearning_top"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--使用ViewPager实现Tab--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_viewpager"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--引入bottom布局文件--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/tablearning_bottom"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>三、各切换页面————tab_content01.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"This is WeiXin Tab"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"30sp"</span></div><div class="line">        <span class="attr">android:textStyle</span>=<span class="string">"bold"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>四、MainActivity<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.view.PagerAdapter;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TabActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line">    <span class="comment">//Tab,用于在这四个Tab上进行点击</span></div><div class="line">    <span class="keyword">private</span> LinearLayout mTabWeiXin;</div><div class="line">    <span class="keyword">private</span> LinearLayout mTabFriend;</div><div class="line">    <span class="keyword">private</span> LinearLayout mTabAddress;</div><div class="line">    <span class="keyword">private</span> LinearLayout mTabSetting;</div><div class="line"></div><div class="line">    <span class="comment">//ImageButton，用于更换图片</span></div><div class="line">    <span class="keyword">private</span> ImageButton mWeinXinImg;</div><div class="line">    <span class="keyword">private</span> ImageButton mFriendImg;</div><div class="line">    <span class="keyword">private</span> ImageButton mAddressImg;</div><div class="line">    <span class="keyword">private</span> ImageButton mSettingImg;</div><div class="line"></div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> PagerAdapter mAdapter; <span class="comment">//初始化ViewPager需要PagerAdapter</span></div><div class="line">    <span class="keyword">private</span> List&lt;View&gt; mViews = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//初始化PagerAdapter需要List&lt;View&gt;</span></div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab////////////////////////////</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="comment">//去掉默认title区域，必须写在setContentView之前</span></div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line"></div><div class="line">        <span class="comment">//////////////使用ViewPager实现Tab开始////////////////////////////</span></div><div class="line">        setContentView(R.layout.main);</div><div class="line">        <span class="comment">//视图初始化</span></div><div class="line">        initViewWithViewPager();</div><div class="line">        <span class="comment">//事件初始化</span></div><div class="line">        initEventWithViewPager();</div><div class="line">        <span class="comment">//////////////使用ViewPager实现Tab结束////////////////////////////</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab————initViewWithViewPager////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initViewWithViewPager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//初始化ViewPager</span></div><div class="line">        mViewPager = (ViewPager) findViewById(R.id.id_tab_viewpager);</div><div class="line">        <span class="comment">//初始化底部Tab</span></div><div class="line">        mTabWeiXin = (LinearLayout) findViewById(R.id.id_tab_weixin);</div><div class="line">        mTabFriend = (LinearLayout) findViewById(R.id.id_tab_friend);</div><div class="line">        mTabAddress = (LinearLayout) findViewById(R.id.id_tab_address);</div><div class="line">        mTabSetting = (LinearLayout) findViewById(R.id.id_tab_setting);</div><div class="line">        <span class="comment">//初始化ImageButton</span></div><div class="line">        mWeinXinImg = (ImageButton) findViewById(R.id.id_tab_weixin_img);</div><div class="line">        mFriendImg = (ImageButton) findViewById(R.id.id_tab_friend_img);</div><div class="line">        mAddressImg = (ImageButton) findViewById(R.id.id_tab_address_img);</div><div class="line">        mSettingImg = (ImageButton) findViewById(R.id.id_tab_setting_img);</div><div class="line"></div><div class="line">        <span class="comment">//初始化Tab Content布局</span></div><div class="line">        LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</div><div class="line">        View tabContent1 = inflater.inflate(R.layout.tablearning_tab_content01,<span class="keyword">null</span>);</div><div class="line">        View tabContent2 = inflater.inflate(R.layout.tablearning_tab_content02,<span class="keyword">null</span>);</div><div class="line">        View tabContent3 = inflater.inflate(R.layout.tablearning_tab_content03,<span class="keyword">null</span>);</div><div class="line">        View tabContent4 = inflater.inflate(R.layout.tablearning_tab_content04,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">        mViews.add(tabContent1);</div><div class="line">        mViews.add(tabContent2);</div><div class="line">        mViews.add(tabContent3);</div><div class="line">        mViews.add(tabContent4);</div><div class="line"></div><div class="line">        <span class="comment">//初始化PagerAdapter</span></div><div class="line">        mAdapter = <span class="keyword">new</span> PagerAdapter() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> mViews.<span class="title">size</span><span class="params">()</span></span>;<span class="comment">//包含View的个数</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> view == object;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//一般初始化PagerAdapter还需要重新如下2个方法</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                View view = mViews.get(position);</div><div class="line">                container.addView(view);</div><div class="line">                <span class="keyword">return</span> view;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">                container.removeView(mViews.get(position));</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        mViewPager.setAdapter(mAdapter);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab————initEventWithViewPager////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initEventWithViewPager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//为底部Tab增加点击切换效果</span></div><div class="line">        mTabWeiXin.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabFriend.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabAddress.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabSetting.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//为ViewPager添加滑动监听事件————滑动tab content时切换底部Tab</span></div><div class="line">        mViewPager.setOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> curr = mViewPager.getCurrentItem();</div><div class="line">                resetTabDefaultImage();</div><div class="line">                <span class="keyword">switch</span> (curr)&#123;</div><div class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                        mWeinXinImg.setImageResource(R.drawable.tab_weixin_pressed);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                        mFriendImg.setImageResource(R.drawable.tab_find_frd_pressed);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                        mAddressImg.setImageResource(R.drawable.tab_address_pressed);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                        mSettingImg.setImageResource(R.drawable.tab_settings_pressed);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab————itapWithViewPager////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">tapWithViewPager</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">//设置底部Tab图片为默认值</span></div><div class="line">        resetTabDefaultImage();</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_weixin:</div><div class="line">                mViewPager.setCurrentItem(0);<span class="comment">//设置当前Tab Content显示内容</span></div><div class="line">                <span class="comment">//设置底部Tab的图片为点中亮色</span></div><div class="line">                mWeinXinImg.setImageResource(R.drawable.tab_weixin_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_friend:</div><div class="line">                mViewPager.setCurrentItem(1);</div><div class="line">                mFriendImg.setImageResource(R.drawable.tab_find_frd_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_address:</div><div class="line">                mViewPager.setCurrentItem(2);</div><div class="line">                mAddressImg.setImageResource(R.drawable.tab_address_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_setting:</div><div class="line">                mViewPager.setCurrentItem(3);</div><div class="line">                mSettingImg.setImageResource(R.drawable.tab_settings_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        tapWithViewPager(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置底部Tab图片为默认暗色值</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">resetTabDefaultImage</span><span class="params">()</span> </span>&#123;</div><div class="line">        mWeinXinImg.setImageResource(R.drawable.tab_weixin_normal);</div><div class="line">        mFriendImg.setImageResource(R.drawable.tab_find_frd_normal);</div><div class="line">        mAddressImg.setImageResource(R.drawable.tab_address_normal);</div><div class="line">        mSettingImg.setImageResource(R.drawable.tab_settings_normal);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Fragment实现Tab"><a href="#Fragment实现Tab" class="headerlink" title="Fragment实现Tab"></a>Fragment实现Tab</h2><p>缺点：无法通过左右滑动进行切换</p>
<p>一、底部切换Tab布局文件同上<br>二、主布局文件————main<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--引入top布局文件--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/tablearning_top"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--使用Fragment实现Tab--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_fragment"</span>&gt;<span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--引入bottom布局文件--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/tablearning_bottom"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>三、各切换页面同上<br>四、各Fragment文件<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.app</span><span class="selector-class">.Fragment</span>;</div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">WeiXinFragment</span> <span class="selector-tag">extends</span> <span class="selector-tag">Fragment</span> &#123;</div><div class="line">    <span class="variable">@Nullable</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public View onCreateView(LayoutInflater inflater, <span class="variable">@Nullable</span> ViewGroup container, <span class="variable">@Nullable</span> Bundle savedInstanceState) &#123;</div><div class="line">        return inflater<span class="selector-class">.inflate</span>(R.layout.tab_content01,container,false);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>五、MainActivity<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentActivity;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentTransaction;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TabActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line">    <span class="comment">//Tab,用于在这四个Tab上进行点击</span></div><div class="line">    <span class="keyword">private</span> LinearLayout mTabWeiXin;</div><div class="line">    <span class="keyword">private</span> LinearLayout mTabFriend;</div><div class="line">    <span class="keyword">private</span> LinearLayout mTabAddress;</div><div class="line">    <span class="keyword">private</span> LinearLayout mTabSetting;</div><div class="line"></div><div class="line">    <span class="comment">//ImageButton，用于更换图片</span></div><div class="line">    <span class="keyword">private</span> ImageButton mWeinXinImg;</div><div class="line">    <span class="keyword">private</span> ImageButton mFriendImg;</div><div class="line">    <span class="keyword">private</span> ImageButton mAddressImg;</div><div class="line">    <span class="keyword">private</span> ImageButton mSettingImg;</div><div class="line"></div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab////////////////////////////</span></div><div class="line">    <span class="comment">//ViewPager</span></div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> PagerAdapter mAdapter; <span class="comment">//初始化ViewPager需要PagerAdapter</span></div><div class="line">    <span class="keyword">private</span> List&lt;View&gt; mViews = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//初始化PagerAdapter需要List&lt;View&gt;</span></div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab////////////////////////////</span></div><div class="line"></div><div class="line">    <span class="comment">//////////////使用Fragment实现Tab////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> Fragment mFragment01;</div><div class="line">    <span class="keyword">private</span> Fragment mFragment02;</div><div class="line">    <span class="keyword">private</span> Fragment mFragment03;</div><div class="line">    <span class="keyword">private</span> Fragment mFragment04;</div><div class="line">    <span class="comment">//////////////使用Fragment实现Tab////////////////////////////</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="comment">//去掉默认title区域，必须写在setContentView之前</span></div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line"></div><div class="line">        <span class="comment">//////////////使用ViewPager实现Tab开始////////////////////////////</span></div><div class="line">        <span class="comment">//setContentView(R.layout.tablearning_main);</span></div><div class="line">        <span class="comment">//视图初始化</span></div><div class="line">        <span class="comment">//initViewWithViewPager();</span></div><div class="line">        <span class="comment">//事件初始化</span></div><div class="line">        <span class="comment">//initEventWithViewPager();</span></div><div class="line">        <span class="comment">//////////////使用ViewPager实现Tab结束////////////////////////////</span></div><div class="line"></div><div class="line">        <span class="comment">//////////////使用Fragment实现Tab开始////////////////////////////</span></div><div class="line">        setContentView(R.layout.tablearning_fragment_main);</div><div class="line">        initViewWithFragment();</div><div class="line">        initEventWithFragment();</div><div class="line"></div><div class="line">        <span class="comment">//显示第一个Fragment</span></div><div class="line">        setCurrentFragment(<span class="number">1</span>);</div><div class="line">        <span class="comment">//////////////使用Fragment实现Tab结束////////////////////////////</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//////////////使用Fragment实现Tab////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initEventWithFragment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//为底部Tab增加点击切换效果</span></div><div class="line">        mTabWeiXin.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabFriend.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabAddress.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabSetting.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//////////////使用Fragment实现Tab////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initViewWithFragment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//初始化底部Tab</span></div><div class="line">        mTabWeiXin = (LinearLayout) findViewById(R.id.id_tab_weixin);</div><div class="line">        mTabFriend = (LinearLayout) findViewById(R.id.id_tab_friend);</div><div class="line">        mTabAddress = (LinearLayout) findViewById(R.id.id_tab_address);</div><div class="line">        mTabSetting = (LinearLayout) findViewById(R.id.id_tab_setting);</div><div class="line">        <span class="comment">//初始化ImageButton</span></div><div class="line">        mWeinXinImg = (ImageButton) findViewById(R.id.id_tab_weixin_img);</div><div class="line">        mFriendImg = (ImageButton) findViewById(R.id.id_tab_friend_img);</div><div class="line">        mAddressImg = (ImageButton) findViewById(R.id.id_tab_address_img);</div><div class="line">        mSettingImg = (ImageButton) findViewById(R.id.id_tab_setting_img);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//////////////使用Fragment实现Tab////////////////////////////</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 切换Fragment</div><div class="line">     * <span class="doctag">@param</span> v</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">tapWithFragment</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">//设置底部Tab图片为默认值</span></div><div class="line">        resetTabDefaultImage();</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_weixin:</div><div class="line">                setCurrentFragment(1);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_friend:</div><div class="line">                setCurrentFragment(2);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_address:</div><div class="line">                setCurrentFragment(3);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_setting:</div><div class="line">                setCurrentFragment(4);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置当前显示的Fragment</div><div class="line">     * 设置底部Tab的图片为点中亮色</div><div class="line">     * <span class="doctag">@param</span> i</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">setCurrentFragment</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="comment">//通过FragmentManager</span></div><div class="line">        FragmentManager fm = getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = fm.beginTransaction();</div><div class="line">        <span class="comment">//隐藏全部Fragment，仅显示需要显示的一个Fragment</span></div><div class="line">        hideAllFragments(transaction);</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (i)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">if</span>(mFragment01 == <span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="comment">//初始化</span></div><div class="line">                    mFragment01 = <span class="keyword">new</span> WeiXinFragment();</div><div class="line">                    <span class="comment">//设置当前显示Fragment</span></div><div class="line">                    transaction.add(R.id.id_tab_fragment,mFragment01);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    transaction.show(mFragment01);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//设置底部Tab的图片为点中亮色</span></div><div class="line">                mWeinXinImg.setImageResource(R.drawable.tab_weixin_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="keyword">if</span>(mFragment02 == <span class="keyword">null</span>)&#123;</div><div class="line">                    mFragment02 = <span class="keyword">new</span> FriendFragment();</div><div class="line">                    transaction.add(R.id.id_tab_fragment,mFragment02);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    transaction.show(mFragment02);</div><div class="line">                &#125;</div><div class="line">                mFriendImg.setImageResource(R.drawable.tab_find_frd_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="keyword">if</span>(mFragment03 == <span class="keyword">null</span>)&#123;</div><div class="line">                    mFragment03 = <span class="keyword">new</span> AddressFragment();</div><div class="line">                    transaction.add(R.id.id_tab_fragment,mFragment03);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    transaction.show(mFragment03);</div><div class="line">                &#125;</div><div class="line">                mAddressImg.setImageResource(R.drawable.tab_address_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                <span class="keyword">if</span>(mFragment04 == <span class="keyword">null</span>)&#123;</div><div class="line">                    mFragment04 = <span class="keyword">new</span> SettingFragment();</div><div class="line">                    transaction.add(R.id.id_tab_fragment,mFragment04);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    transaction.show(mFragment04);</div><div class="line">                &#125;</div><div class="line">                mSettingImg.setImageResource(R.drawable.tab_settings_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        transaction.commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 隐藏全部Fragment</div><div class="line">     * <span class="doctag">@param</span> transaction</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">hideAllFragments</span><span class="params">(FragmentTransaction transaction)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(mFragment01 != <span class="keyword">null</span>)&#123;</div><div class="line">            transaction.hide(mFragment01);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(mFragment02 != <span class="keyword">null</span>)&#123;</div><div class="line">            transaction.hide(mFragment02);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(mFragment03 != <span class="keyword">null</span>)&#123;</div><div class="line">            transaction.hide(mFragment03);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(mFragment04 != <span class="keyword">null</span>)&#123;</div><div class="line">            transaction.hide(mFragment04);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab————initViewWithViewPager////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initViewWithViewPager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//初始化ViewPager</span></div><div class="line">        mViewPager = (ViewPager) findViewById(R.id.id_tab_viewpager);</div><div class="line">        <span class="comment">//初始化底部Tab</span></div><div class="line">        mTabWeiXin = (LinearLayout) findViewById(R.id.id_tab_weixin);</div><div class="line">        mTabFriend = (LinearLayout) findViewById(R.id.id_tab_friend);</div><div class="line">        mTabAddress = (LinearLayout) findViewById(R.id.id_tab_address);</div><div class="line">        mTabSetting = (LinearLayout) findViewById(R.id.id_tab_setting);</div><div class="line">        <span class="comment">//初始化ImageButton</span></div><div class="line">        mWeinXinImg = (ImageButton) findViewById(R.id.id_tab_weixin_img);</div><div class="line">        mFriendImg = (ImageButton) findViewById(R.id.id_tab_friend_img);</div><div class="line">        mAddressImg = (ImageButton) findViewById(R.id.id_tab_address_img);</div><div class="line">        mSettingImg = (ImageButton) findViewById(R.id.id_tab_setting_img);</div><div class="line"></div><div class="line">        <span class="comment">//初始化Tab Content布局</span></div><div class="line">        LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</div><div class="line">        View tabContent1 = inflater.inflate(R.layout.tablearning_tab_content01,<span class="keyword">null</span>);</div><div class="line">        View tabContent2 = inflater.inflate(R.layout.tablearning_tab_content02,<span class="keyword">null</span>);</div><div class="line">        View tabContent3 = inflater.inflate(R.layout.tablearning_tab_content03,<span class="keyword">null</span>);</div><div class="line">        View tabContent4 = inflater.inflate(R.layout.tablearning_tab_content04,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">        mViews.add(tabContent1);</div><div class="line">        mViews.add(tabContent2);</div><div class="line">        mViews.add(tabContent3);</div><div class="line">        mViews.add(tabContent4);</div><div class="line"></div><div class="line">        <span class="comment">//初始化PagerAdapter</span></div><div class="line">        mAdapter = <span class="keyword">new</span> PagerAdapter() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> mViews.<span class="title">size</span><span class="params">()</span></span>;<span class="comment">//包含View的个数</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> view == object;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//一般初始化PagerAdapter还需要重新如下2个方法</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                View view = mViews.get(position);</div><div class="line">                container.addView(view);</div><div class="line">                <span class="keyword">return</span> view;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">                container.removeView(mViews.get(position));</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        mViewPager.setAdapter(mAdapter);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab————initEventWithViewPager////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initEventWithViewPager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//为底部Tab增加点击切换效果</span></div><div class="line">        mTabWeiXin.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabFriend.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabAddress.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabSetting.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//为ViewPager添加滑动监听事件————滑动tab content时切换底部Tab</span></div><div class="line">        mViewPager.setOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> curr = mViewPager.getCurrentItem();</div><div class="line">                resetTabDefaultImage();</div><div class="line">                <span class="keyword">switch</span> (curr)&#123;</div><div class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                        mWeinXinImg.setImageResource(R.drawable.tab_weixin_pressed);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                        mFriendImg.setImageResource(R.drawable.tab_find_frd_pressed);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                        mAddressImg.setImageResource(R.drawable.tab_address_pressed);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                        mSettingImg.setImageResource(R.drawable.tab_settings_pressed);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab————itapWithViewPager////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">tapWithViewPager</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">//设置底部Tab图片为默认值</span></div><div class="line">        resetTabDefaultImage();</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_weixin:</div><div class="line">                mViewPager.setCurrentItem(0);<span class="comment">//设置当前Tab Content显示内容</span></div><div class="line">                <span class="comment">//设置底部Tab的图片为点中亮色</span></div><div class="line">                mWeinXinImg.setImageResource(R.drawable.tab_weixin_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_friend:</div><div class="line">                mViewPager.setCurrentItem(1);</div><div class="line">                mFriendImg.setImageResource(R.drawable.tab_find_frd_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_address:</div><div class="line">                mViewPager.setCurrentItem(2);</div><div class="line">                mAddressImg.setImageResource(R.drawable.tab_address_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_setting:</div><div class="line">                mViewPager.setCurrentItem(3);</div><div class="line">                mSettingImg.setImageResource(R.drawable.tab_settings_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">//////////////使用ViewPager实现Tab</span></div><div class="line">        <span class="comment">//tapWithViewPager(v);</span></div><div class="line"></div><div class="line">        <span class="comment">//////////////使用Fragment实现Tab</span></div><div class="line">        tapWithFragment(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置底部Tab图片为默认暗色值</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">resetTabDefaultImage</span><span class="params">()</span> </span>&#123;</div><div class="line">        mWeinXinImg.setImageResource(R.drawable.tab_weixin_normal);</div><div class="line">        mFriendImg.setImageResource(R.drawable.tab_find_frd_normal);</div><div class="line">        mAddressImg.setImageResource(R.drawable.tab_address_normal);</div><div class="line">        mSettingImg.setImageResource(R.drawable.tab_settings_normal);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="FragmentPagerAdapter-ViewPager实现Tab"><a href="#FragmentPagerAdapter-ViewPager实现Tab" class="headerlink" title="FragmentPagerAdapter+ViewPager实现Tab"></a>FragmentPagerAdapter+ViewPager实现Tab</h2><p>优点：通过ViewPager实现左右滑动进行切换<br>    Fragment管理内容区域<br>    ViewPager实现左右滑动切换</p>
<p>一、底部切换Tab布局文件同第二节<br>二、主布局文件同第一节的main.xml，使用V4.ViewPager<br>三、各切换页面同第二节的Fragment<br>四、MainActivity<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentActivity;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TabActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line">    <span class="comment">//Tab,用于在这四个Tab上进行点击</span></div><div class="line">    <span class="keyword">private</span> LinearLayout mTabWeiXin;</div><div class="line">    <span class="keyword">private</span> LinearLayout mTabFriend;</div><div class="line">    <span class="keyword">private</span> LinearLayout mTabAddress;</div><div class="line">    <span class="keyword">private</span> LinearLayout mTabSetting;</div><div class="line"></div><div class="line">    <span class="comment">//ImageButton，用于更换图片</span></div><div class="line">    <span class="keyword">private</span> ImageButton mWeinXinImg;</div><div class="line">    <span class="keyword">private</span> ImageButton mFriendImg;</div><div class="line">    <span class="keyword">private</span> ImageButton mAddressImg;</div><div class="line">    <span class="keyword">private</span> ImageButton mSettingImg;</div><div class="line"></div><div class="line">    <span class="comment">//////////////使用ViewPager实现Tab////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> PagerAdapter mAdapter; <span class="comment">//初始化ViewPager需要PagerAdapter</span></div><div class="line">    <span class="keyword">private</span> List&lt;View&gt; mViews = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//初始化PagerAdapter需要List&lt;View&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">//////////////使用Fragment实现Tab////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> Fragment mFragment01;</div><div class="line">    <span class="keyword">private</span> Fragment mFragment02;</div><div class="line">    <span class="keyword">private</span> Fragment mFragment03;</div><div class="line">    <span class="keyword">private</span> Fragment mFragment04;</div><div class="line"></div><div class="line">    <span class="comment">/////////////FragmentPagerAdapter+ViewPager实现Tab//////////</span></div><div class="line">    <span class="keyword">private</span> ViewPager mFragmentViewPager;</div><div class="line">    <span class="keyword">private</span> FragmentPagerAdapter mFragmentPagerAdapter;</div><div class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; mFragments;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="comment">//去掉默认title区域，必须写在setContentView之前</span></div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line"></div><div class="line">        <span class="comment">/////////////FragmentPagerAdapter+ViewPager实现Tab开始//////////</span></div><div class="line">        setContentView(R.layout.tablearning_main);</div><div class="line">        initViewWithFragmentPagerAdapter();</div><div class="line">        initEventWithFragment();</div><div class="line">        <span class="comment">//默认显示第一个Fragment</span></div><div class="line">        setCurrentFragmentWithFragmentPagerAdapter(<span class="number">1</span>);</div><div class="line">        <span class="comment">/////////////FragmentPagerAdapter+ViewPager实现Tab结束//////////</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/////////////FragmentPagerAdapter+ViewPager实现Tab//////////</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initViewWithFragmentPagerAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//初始化ViewPager</span></div><div class="line">        mFragmentViewPager = (ViewPager) findViewById(R.id.id_tab_viewpager);</div><div class="line">        <span class="comment">//初始化底部Tab</span></div><div class="line">        mTabWeiXin = (LinearLayout) findViewById(R.id.id_tab_weixin);</div><div class="line">        mTabFriend = (LinearLayout) findViewById(R.id.id_tab_friend);</div><div class="line">        mTabAddress = (LinearLayout) findViewById(R.id.id_tab_address);</div><div class="line">        mTabSetting = (LinearLayout) findViewById(R.id.id_tab_setting);</div><div class="line">        <span class="comment">//初始化ImageButton</span></div><div class="line">        mWeinXinImg = (ImageButton) findViewById(R.id.id_tab_weixin_img);</div><div class="line">        mFriendImg = (ImageButton) findViewById(R.id.id_tab_friend_img);</div><div class="line">        mAddressImg = (ImageButton) findViewById(R.id.id_tab_address_img);</div><div class="line">        mSettingImg = (ImageButton) findViewById(R.id.id_tab_setting_img);</div><div class="line"></div><div class="line">        <span class="comment">//初始化数据源</span></div><div class="line">        mFragments = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        mFragment01 = <span class="keyword">new</span> WeiXinFragment();</div><div class="line">        mFragment02 = <span class="keyword">new</span> FriendFragment();</div><div class="line">        mFragment03 = <span class="keyword">new</span> AddressFragment();</div><div class="line">        mFragment04 = <span class="keyword">new</span> SettingFragment();</div><div class="line"></div><div class="line">        mFragments.add(mFragment01);</div><div class="line">        mFragments.add(mFragment02);</div><div class="line">        mFragments.add(mFragment03);</div><div class="line">        mFragments.add(mFragment04);</div><div class="line"></div><div class="line">        <span class="comment">//初始化Adapter</span></div><div class="line">        mFragmentPagerAdapter = <span class="keyword">new</span> FragmentPagerAdapter(getSupportFragmentManager()) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function">Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> mFragments.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> mFragments.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        mFragmentViewPager.setAdapter(mFragmentPagerAdapter);</div><div class="line"></div><div class="line">        <span class="comment">//解决滑动Fragment时底部Tab不切换</span></div><div class="line">        mFragmentViewPager.setOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> curr = mFragmentViewPager.getCurrentItem();</div><div class="line">                setTabHighLightImage(curr+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">tapWithFragmentPagerAdapter</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_weixin:</div><div class="line">                setCurrentFragmentWithFragmentPagerAdapter(1);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_friend:</div><div class="line">                setCurrentFragmentWithFragmentPagerAdapter(2);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_address:</div><div class="line">                setCurrentFragmentWithFragmentPagerAdapter(3);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.id_tab_setting:</div><div class="line">                setCurrentFragmentWithFragmentPagerAdapter(4);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置当前显示的Fragment</div><div class="line">     * 设置底部Tab的图片为点中亮色</div><div class="line">     * <span class="doctag">@param</span> i</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">setCurrentFragmentWithFragmentPagerAdapter</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="comment">//设置底部Tab的图片为点中亮色</span></div><div class="line">        setTabHighLightImage(i);</div><div class="line">        <span class="comment">//设置当前显示的Fragment</span></div><div class="line">        mFragmentViewPager.setCurrentItem(i<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置底部Tab的图片为点中亮色</div><div class="line">     * <span class="doctag">@param</span> i</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">setTabHighLightImage</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="comment">//设置底部Tab图片为默认值</span></div><div class="line">        resetTabDefaultImage();</div><div class="line">        <span class="keyword">switch</span> (i)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                //设置底部Tab的图片为点中亮色</div><div class="line">                mWeinXinImg.setImageResource(R.drawable.tab_weixin_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                mFriendImg.setImageResource(R.drawable.tab_find_frd_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                mAddressImg.setImageResource(R.drawable.tab_address_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                mSettingImg.setImageResource(R.drawable.tab_settings_pressed);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initEventWithFragment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//为底部Tab增加点击切换效果</span></div><div class="line">        mTabWeiXin.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabFriend.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabAddress.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mTabSetting.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">////////FragmentPagerAdapter+ViewPager实现Tab//////////</span></div><div class="line">        tapWithFragmentPagerAdapter(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置底部Tab图片为默认暗色值</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">resetTabDefaultImage</span><span class="params">()</span> </span>&#123;</div><div class="line">        mWeinXinImg.setImageResource(R.drawable.tab_weixin_normal);</div><div class="line">        mFriendImg.setImageResource(R.drawable.tab_find_frd_normal);</div><div class="line">        mAddressImg.setImageResource(R.drawable.tab_address_normal);</div><div class="line">        mSettingImg.setImageResource(R.drawable.tab_settings_normal);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ViewPagerIndicator-ViewPager实现Tab"><a href="#ViewPagerIndicator-ViewPager实现Tab" class="headerlink" title="ViewPagerIndicator+ViewPager实现Tab"></a>ViewPagerIndicator+ViewPager实现Tab</h2><p>一、导入github中的ViewPagerIndicator包<br>1、File–Project Structure–项目–Dependencies– 右侧+号 – Library dependency<br>2、在搜索栏中输入”com.github.JakeWharton:ViewPagerIndicator:2.4.1@aar”，点击搜索，出现包后点击OK<br>3、在”Module.项目名”的build.gradle中加编译compile那一行</p>
<p>dependencies {<br>        …<br>        compile ‘com.github.JakeWharton:ViewPagerIndicator:2.4.1@aar’<br>}<br>4、最后sync即可使用<br>二、主布局文件————tablearning_indicator_main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--引入top布局文件--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/tablearning_indicator_top"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--tab指示器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">com.viewpagerindicator.TabPageIndicator</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_indicator"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@android:color/transparent"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--使用ViewPager实现Tab--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_viewpager"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>三、各切换页面同第二节的Fragment<br>四、MainActivity<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TabActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//////////////使用Fragment实现Tab////////////////////////////</span></div><div class="line">    <span class="keyword">private</span> Fragment mFragment01;</div><div class="line">    <span class="keyword">private</span> Fragment mFragment02;</div><div class="line">    <span class="keyword">private</span> Fragment mFragment03;</div><div class="line">    <span class="keyword">private</span> Fragment mFragment04;</div><div class="line"></div><div class="line">    <span class="comment">/////////////FragmentPagerAdapter+ViewPager实现Tab//////////</span></div><div class="line">    <span class="keyword">private</span> ViewPager mFragmentViewPager;</div><div class="line">    <span class="keyword">private</span> FragmentPagerAdapter mFragmentPagerAdapter;</div><div class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; mFragments;</div><div class="line"></div><div class="line">    <span class="comment">////ViewPagerIndicator+FragmentPagerAdapter+ViewPager实现Tab////</span></div><div class="line">    <span class="keyword">private</span> TabPageIndicator mTabPageIndicator;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="comment">//去掉默认title区域，必须写在setContentView之前</span></div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line"></div><div class="line">        <span class="comment">////ViewPagerIndicator+FragmentPagerAdapter+ViewPager实现Tab</span></div><div class="line">        setContentView(R.layout.tablearning_indicator_main);</div><div class="line">        initViewWithIndicator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">////ViewPagerIndicator+FragmentPagerAdapter+ViewPager实现Tab</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initViewWithIndicator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//初始化ViewPager</span></div><div class="line">        mFragmentViewPager = (ViewPager) findViewById(R.id.id_tab_viewpager);</div><div class="line">        mTabPageIndicator = (TabPageIndicator) findViewById(R.id.id_tab_indicator);</div><div class="line"></div><div class="line">        <span class="comment">//初始化数据源</span></div><div class="line">        mFragments = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        mFragment01 = <span class="keyword">new</span> WeiXinFragment();</div><div class="line">        mFragment02 = <span class="keyword">new</span> FriendFragment();</div><div class="line">        mFragment03 = <span class="keyword">new</span> AddressFragment();</div><div class="line">        mFragment04 = <span class="keyword">new</span> SettingFragment();</div><div class="line"></div><div class="line">        mFragments.add(mFragment01);</div><div class="line">        mFragments.add(mFragment02);</div><div class="line">        mFragments.add(mFragment03);</div><div class="line">        mFragments.add(mFragment04);</div><div class="line"></div><div class="line">        mFragmentPagerAdapter = <span class="keyword">new</span> FragmentPagerAdapter(getSupportFragmentManager()) &#123;</div><div class="line"></div><div class="line">            <span class="comment">//指示器的标题</span></div><div class="line">            <span class="keyword">private</span> String[] titles = &#123;<span class="string">"微信"</span>,<span class="string">"朋友"</span>,<span class="string">"通讯录"</span>,<span class="string">"设置"</span>&#125;;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function">Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> mFragments.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> mFragments.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function">CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> titles[position];</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        mFragmentViewPager.setAdapter(mFragmentPagerAdapter);</div><div class="line">        mTabPageIndicator.setViewPager(mFragmentViewPager,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="自定义跟随型ViewPager指示器————ViewPagerIndicator"><a href="#自定义跟随型ViewPager指示器————ViewPagerIndicator" class="headerlink" title="自定义跟随型ViewPager指示器————ViewPagerIndicator"></a>自定义跟随型ViewPager指示器————ViewPagerIndicator</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android下拉刷新]]></title>
      <url>https://aiolos123.github.io/2016/11/14/14-Android%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</url>
      <content type="html"><![CDATA[<p>本节课程实现ListView下拉刷新功能<br>视频来源：<a href="http://www.imooc.com/learn/135" target="_blank" rel="external">http://www.imooc.com/learn/135</a><br><a id="more"></a></p>
<h2 id="下拉刷新功能的实现步骤"><a href="#下拉刷新功能的实现步骤" class="headerlink" title="下拉刷新功能的实现步骤"></a>下拉刷新功能的实现步骤</h2><p>第1步、添加提示界面，即ListView的header头布局<br>第2步、监听ListView滚动事件，即onScrollListener()事件<br>第3步、监听ListView的onTouch()事件<br>第4步、加载最新数据</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android学习13————打造万能适配器]]></title>
      <url>https://aiolos123.github.io/2016/11/01/13-Android%E6%89%93%E9%80%A0%E4%B8%87%E8%83%BD%E9%80%82%E9%85%8D%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>本课程深入的讲解为ListView打造万能适配器<br>学习来源：<a href="http://www.imooc.com/learn/372" target="_blank" rel="external">http://www.imooc.com/learn/372</a></p>
<p>本课程是《android学习七————BaseAdapter的使用与优化》的进一步优化课程<br><a id="more"></a></p>
<h2 id="通常编写ListView的思路及缺点"><a href="#通常编写ListView的思路及缺点" class="headerlink" title="通常编写ListView的思路及缺点"></a>通常编写ListView的思路及缺点</h2><p>目的：要展示数据集List<t>:<br>步骤：为该数据集编写一个ListView，<br>             为每个ListView编写一个继承自BaseAdapter的自定义Adapter，<br>             并在这个自定义Adapter类内中编写viewHolder类，用于对应ListView Item中的控件，以提高控件的查询效率；</t></p>
<p>viewHolder类的缺点：<br>    一个ListView类对应一个自定义Adapter类，对应一个ViewHolder类；如果项目中出现多个ListView，则需要多个自定义Adapter类和ViewHolder类；</p>
<p>但由于多个自定义Adapter类和ViewHolder类的实现、逻辑都是类似的，因此可以将其抽取为公共的、通用的Adapter类和ViewHolder类</p>
<h2 id="传统写法回顾-文艺式Adapter"><a href="#传统写法回顾-文艺式Adapter" class="headerlink" title="传统写法回顾(文艺式Adapter)"></a>传统写法回顾(文艺式Adapter)</h2><p>1、创建Bean<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Bean &#123;</div><div class="line"></div><div class="line">    <span class="comment">//声明Bean的属性</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> title;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> desc;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> time;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> phone;</div><div class="line"></div><div class="line">    <span class="comment">//带参构造方法</span></div><div class="line">    <span class="keyword">public</span> Bean(<span class="keyword">String</span> title, <span class="keyword">String</span> desc, <span class="keyword">String</span> time, <span class="keyword">String</span> phone) &#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">        <span class="keyword">this</span>.desc = desc;</div><div class="line">        <span class="keyword">this</span>.time = time;</div><div class="line">        <span class="keyword">this</span>.phone = phone;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//生成getter和setter方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、创建主布局xml文件，其中只包含一个listView控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/lv_main"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、编写item的布局xml文件<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?xml <span class="built_in">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:padding=<span class="string">"10dp"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/id_title"</span></div><div class="line">        android:textSize=<span class="string">"16sp"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"Android新技能"</span></div><div class="line">        android:maxLines=<span class="string">"1"</span></div><div class="line">        android:textColor=<span class="string">"#444"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/id_desc"</span></div><div class="line">        android:layout_below=<span class="string">"@+id/id_title"</span></div><div class="line">        android:layout_marginTop=<span class="string">"10dp"</span></div><div class="line">        android:minLines=<span class="string">"1"</span></div><div class="line">        android:maxLines=<span class="string">"2"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"Android打造万能的ListView和GridView适配器"</span></div><div class="line">        android:textColor=<span class="string">"#898989"</span></div><div class="line">        android:textSize=<span class="string">"16sp"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/id_time"</span></div><div class="line">        android:layout_below=<span class="string">"@+id/id_desc"</span></div><div class="line">        android:layout_marginTop=<span class="string">"10dp"</span></div><div class="line">        android:maxLines=<span class="string">"1"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"2012-12-12"</span></div><div class="line">        android:textColor=<span class="string">"#898989"</span></div><div class="line">        android:textSize=<span class="string">"12sp"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/id_phone"</span></div><div class="line">        android:layout_below=<span class="string">"@+id/id_desc"</span></div><div class="line">        android:layout_marginTop=<span class="string">"10dp"</span></div><div class="line">        android:maxLines=<span class="string">"1"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"10086"</span></div><div class="line">        android:drawableLeft=<span class="string">"@drawable/a"</span></div><div class="line">        android:drawablePadding=<span class="string">"5dp"</span></div><div class="line">        android:padding=<span class="string">"3dp"</span></div><div class="line">        android:layout_alignParentRight=<span class="string">"true"</span></div><div class="line">        android:textColor=<span class="string">"#fff"</span></div><div class="line">        android:textSize=<span class="string">"12sp"</span></div><div class="line">        android:background=<span class="string">"#2ed667"</span>/&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>
<p>4、编写文艺式的Adapter<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniversalAdapterLearn_Adapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//数据集</span></div><div class="line">    <span class="keyword">private</span> List&lt;Bean&gt; mDatas;</div><div class="line">    <span class="comment">//加载布局文件</span></div><div class="line">    <span class="keyword">private</span> LayoutInflater mInflater;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UniversalAdapterLearn_Adapter</span><span class="params">(Context context, List&lt;Bean&gt; datas)</span> </span>&#123;</div><div class="line">        <span class="comment">//通过context获取LayoutInflater,通过LayoutInflater加载item布局xml文件</span></div><div class="line">        mInflater = LayoutInflater.from(context);</div><div class="line">        mDatas = datas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mDatas.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mDatas.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        ViewHolder holder = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(convertView == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//加载布局</span></div><div class="line">            convertView = mInflater.inflate(R.layout.universaladapter_item,parent,<span class="keyword">false</span>);</div><div class="line">            holder = <span class="keyword">new</span> ViewHolder();</div><div class="line">            <span class="comment">//为holder绑定控件的引用</span></div><div class="line">            holder.tv_time = (TextView) convertView.findViewById(R.id.id_title);</div><div class="line">            holder.tv_time = (TextView) convertView.findViewById(R.id.id_time);</div><div class="line">            holder.tv_desc = (TextView) convertView.findViewById(R.id.id_desc);</div><div class="line">            holder.tv_phone = (TextView) convertView.findViewById(R.id.id_phone);</div><div class="line">            convertView.setTag(holder);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            holder = (ViewHolder) convertView.getTag();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Bean bean =  mDatas.get(position);</div><div class="line">        holder.tv_title.setText(bean.getTitle());</div><div class="line">        holder.tv_phone.setText(bean.getPhone());</div><div class="line">        holder.tv_time.setText(bean.getTime());</div><div class="line">        holder.tv_desc.setText(bean.getDesc());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> convertView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//传统的ViewHolder内部类</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</div><div class="line">        <span class="comment">//对应item中的控件</span></div><div class="line">        TextView tv_title,tv_desc,tv_time,tv_phone;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、在Activity中为listView绑定自定义Adapter<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UniversalAdapterShowActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//声明ListView控件</span></div><div class="line">    <span class="keyword">private</span> <span class="type">ListView</span> mListView;</div><div class="line">    <span class="comment">//声明数据集</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">Bean</span>&gt; mDatas;</div><div class="line">    <span class="comment">//声明适配器</span></div><div class="line">    <span class="keyword">private</span> <span class="type">UniversalAdapterLearn_Adapter</span> mAdapter;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="comment">//初始化数据</span></div><div class="line">        initDatas();</div><div class="line">        <span class="comment">//初始化View</span></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> void initDatas() &#123;</div><div class="line">        mDatas = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">            <span class="type">String</span> title = <span class="string">"Android新技能Get "</span> + i;</div><div class="line">            <span class="comment">//实例化Bean</span></div><div class="line">            <span class="type">Bean</span> bean = <span class="keyword">new</span> <span class="type">Bean</span>(title,</div><div class="line">                    <span class="string">"Android打造万能的ListView和GridView适配器"</span>,<span class="string">"2014-12-02"</span>,</div><div class="line">                    <span class="string">"10086"</span>);</div><div class="line">            <span class="comment">//将bean保存到数据集中</span></div><div class="line">            mDatas.add(bean);</div><div class="line">        &#125;</div><div class="line">        mAdapter = <span class="keyword">new</span> <span class="type">UniversalAdapterLearn_Adapter</span>(<span class="keyword">this</span>,mDatas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> void initView()&#123;</div><div class="line">        mListView = (<span class="type">ListView</span>) findViewById(<span class="type">R</span>.id.lv_main);</div><div class="line">        mListView.setAdapter(mAdapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="通用的ViewHolder类"><a href="#通用的ViewHolder类" class="headerlink" title="通用的ViewHolder类"></a>通用的ViewHolder类</h2><p>文艺式的ViewHolder的做法是：<br>    通过convertView.setTag(holder)来存储holder；<br>    ViewHolder类是存储Item中各种控件的引用；</p>
<p>通用的ViewHolder类需要解决的问题：<br>    不同ListView的Item中的控件类型不同</p>
<p>通用的ViewHolder类的解决方案：<br>    通过SparseArray<view>来存储不同类型的Item中的控件<br>(SpareseArray是一个直接继承object的类，比Map的效率高)<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewHolder</span> &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//存储item的控件的集合</span></div><div class="line">    <span class="keyword">private</span> SparseArray&lt;View&gt; mViews;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPosition;</div><div class="line">    <span class="keyword">private</span> View mConvertView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getConvertView</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mConvertView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span>(<span class="params">Context context, ViewGroup parent, <span class="keyword">int</span> layoutId, <span class="keyword">int</span> position</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.mPosition = position;</div><div class="line">        <span class="keyword">this</span>.mViews = <span class="keyword">new</span> SparseArray&lt;View&gt;();</div><div class="line">        <span class="keyword">this</span>.mConvertView = LayoutInflater.<span class="keyword">from</span>(context).inflate(layoutId,parent,<span class="literal">false</span>);</div><div class="line">        <span class="keyword">this</span>.mConvertView.setTag(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//由于convertView可以复用，所以无需每次都创建新的ViewHolder对象，也可以复用ViewHolder</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  ViewHolder <span class="title">get</span>(<span class="params">Context context,View convertView,ViewGroup parent,<span class="keyword">int</span> position,<span class="keyword">int</span> layoutId</span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(convertView == <span class="literal">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(context,parent,position,layoutId);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            ViewHolder holder = (ViewHolder) convertView.getTag();</div><div class="line">            <span class="comment">//更新position</span></div><div class="line">            holder.mPosition = position;</div><div class="line">            <span class="keyword">return</span> holder;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//通过viewId获取控件对象</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends View&gt; <span class="function">T <span class="title">getView</span>(<span class="params"><span class="keyword">int</span> viewId</span>)</span>&#123;</div><div class="line">        View view = mViews.<span class="keyword">get</span>(viewId);</div><div class="line">        <span class="keyword">if</span>(view == <span class="literal">null</span>)&#123;</div><div class="line">            view = mConvertView.findViewById(viewId);</div><div class="line">            mViews.put(viewId,view);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (T)view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></view></p>
<p>在自定义Adapter中调用通用的ViewHolder<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public View getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span>调用通用的ViewHolder<span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        ViewHolder holder = ViewHolder.get(mContext,convertView,null,position,R.layout.universaladapter_item);</div><div class="line">        Bean bean =  mDatas.get(position);</div><div class="line"></div><div class="line">        TextView tv = holder.getView(R.id.id_title);</div><div class="line">        tv.setText(bean.getTitle());</div><div class="line"></div><div class="line">        ((TextView)holder.getView(R.id.id_desc)).setText(bean.getDesc());</div><div class="line"></div><div class="line">        ((TextView)holder.getView(R.id.id_phone)).setText(bean.getPhone());</div><div class="line"></div><div class="line">        ((TextView)holder.getView(R.id.id_time)).setText(bean.getTime());</div><div class="line"></div><div class="line">        return holder.getConvertView();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="打造万能适配器"><a href="#打造万能适配器" class="headerlink" title="打造万能适配器"></a>打造万能适配器</h2><p>万能适配器代码如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonAdapter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> Context mContext;</div><div class="line">    <span class="keyword">protected</span> List&lt;T&gt; mDatas;</div><div class="line">    <span class="keyword">protected</span> LayoutInflater mInflater;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> layoutId;<span class="comment">//layout布局文件的id</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">CommonAdapter</span><span class="params">(Context context, List&lt;T&gt; datas,<span class="keyword">int</span> layoutId)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        <span class="keyword">this</span>.mDatas = datas;</div><div class="line">        <span class="keyword">this</span>.mInflater = LayoutInflater.from(context);</div><div class="line">        <span class="keyword">this</span>.layoutId = layoutId;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mDatas.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">T <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mDatas.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span>&#123;</div><div class="line">        <span class="comment">////通用ViewHolder////////////////////</span></div><div class="line">        ViewHolder holder = ViewHolder.get(mContext,convertView,parent,position,layoutId);</div><div class="line"></div><div class="line">        convert(holder,getItem(position));</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">return</span> holder.<span class="title">getConvertView</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//T 为当前item的第一条数据</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">void</span> <span class="title">convert</span><span class="params">(ViewHolder holder,T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Activity中使用万能适配器的方式如下：<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mListView = (<span class="type">ListView</span>) findViewById(<span class="type">R</span>.id.lv_main);</div><div class="line"><span class="comment">//万能适配器最终版</span></div><div class="line">mListView.setAdapter(<span class="function"><span class="keyword">new</span> <span class="title">CommonAdapter</span>&lt;<span class="title">Bean</span>&gt;(<span class="type">UniversalAdapterShowActivity</span>.this,mDatas,<span class="type">R</span>.layout.universaladapter_item)&#123;</span></div><div class="line">    @<span class="title">Override</span></div><div class="line">    <span class="title">public</span> <span class="title">void</span> <span class="title">convert</span>(<span class="type">ViewHolder</span> holder, <span class="type">Bean</span> bean) &#123;</div><div class="line">        <span class="title">holder</span>.<span class="title">setTextViewText</span>(<span class="type">R</span>.id.id_title,bean.getTitle())</div><div class="line">                .<span class="title">setTextViewText</span>(<span class="type">R</span>.id.id_desc,bean.getDesc())</div><div class="line">                .<span class="title">setTextViewText</span>(<span class="type">R</span>.id.id_phone,bean.getPhone())</div><div class="line">                .<span class="title">setTextViewText</span>(<span class="type">R</span>.id.id_time,bean.getTime());</div><div class="line"></div><div class="line">        <span class="comment">//为控件绑定事件的方式如下：</span></div><div class="line">        <span class="comment">//holder.getView(R.id.id_phone).setOnClickListener();</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>1、item中的checkbox控件、button控件抢占焦点，使得item无法被点击。</p>
<pre><code>第一种解决方法：在checkbox控件中增加android:focusable = &quot;false&quot;属性即可；
第二种解决方法：在item的布局中增加android:descendantFocusability = &quot;blockDescendant&quot;属性即可；
</code></pre><p>原因：经过查看源代码<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (child != <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (inList &amp;&amp; !child.hasFocusable()) &#123;<span class="comment">//子控件不获取焦点时，item才可点击</span></div><div class="line">           <span class="keyword">final</span> AbsListView.PerformClick performClick = mPerformClick;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、item中的checkbox控件被选中后，后续item中也有checkbox会选中，取消同理；</p>
<pre><code>解决方法：在Bean中设置状态的flag来记录当前bean是否选中，在重写convert()方法时动态修改这个bean中flag的状态；
</code></pre><p>原因：</p>
<pre><code>这是因为checkbox控件被复用导致的。
</code></pre><p>3、代码封装与复用的思想</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android学习12————Android UI模板设计]]></title>
      <url>https://aiolos123.github.io/2016/10/27/12-AndroidUI%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>学习如何动态创建组件、设计动态模板，以及模板化开发<br>视频来源：<a href="http://www.imooc.com/learn/247" target="_blank" rel="external">http://www.imooc.com/learn/247</a><br><a id="more"></a></p>
<h2 id="创建模板的步骤"><a href="#创建模板的步骤" class="headerlink" title="创建模板的步骤"></a>创建模板的步骤</h2><p>1、定义atts.xml文件，声明需要的自定义属性<br>2、创建自定义View,将控件组合起来，实现需求<br>3、在布局xml中使用自定义View</p>
<h2 id="自定义控件属性"><a href="#自定义控件属性" class="headerlink" title="自定义控件属性"></a>自定义控件属性</h2><p>新建atts.xml文件：(res –&gt;values –&gt; atts.xml –&gt; Finish)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--使用declare-styleable申明自定义属性--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"Topbar"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--使用attr标签声明自定义属性的名称--&gt;</span></div><div class="line">        <span class="comment">&lt;!--定义标题文字内容属性，format指定在xml布局文件中引用资源的类型--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--定义标题文字大小属性，format指定在xml布局文件中引用资源的类型--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--定义标题文字颜色属性，format指定在xml布局文件中引用资源的类型--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextColor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"leftText"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"leftTextColor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--reference表示引用资源中的文件--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"leftBackground"</span> <span class="attr">format</span>=<span class="string">"color|reference"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"rightText"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"rightTextColor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"rightBackground"</span> <span class="attr">format</span>=<span class="string">"color|reference"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="创建自定义View"><a href="#创建自定义View" class="headerlink" title="创建自定义View"></a>创建自定义View</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UITemplateLearn_Topbar</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//声明自定义View所需要的控件</span></div><div class="line">    <span class="keyword">private</span> Button leftBtn,rightBtn;</div><div class="line">    <span class="keyword">private</span> TextView tv_title;</div><div class="line"></div><div class="line">    <span class="comment">//声明这些控件所用到的属性，即atts.xml中定义的属性</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> leftTextColor;</div><div class="line">    <span class="keyword">private</span> Drawable leftBackground;</div><div class="line">    <span class="keyword">private</span> String leftText;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rightTextColor;</div><div class="line">    <span class="keyword">private</span> Drawable rightBackground;</div><div class="line">    <span class="keyword">private</span> String rightText;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> titleTextSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> titleTextColor;</div><div class="line"></div><div class="line">    <span class="comment">//申明LayoutParams布局属性</span></div><div class="line">    <span class="keyword">private</span> LayoutParams leftParams,rightParams,titleParams;</div><div class="line"></div><div class="line">    <span class="comment">//声明接口</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TopbarClickListener</span></span>&#123;</div><div class="line">        <span class="comment">//左button点击事件</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leftClick</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">//右button点击事件</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightClick</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//声明接口对象</span></div><div class="line">    <span class="keyword">private</span> TopbarClickListener listener;</div><div class="line"></div><div class="line">    <span class="comment">//接口回调</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnTopbarListener</span><span class="params">(TopbarClickListener listener)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.listener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//实现带自定义属性attrs参数的构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UITemplateLearn_Topbar</span><span class="params">(<span class="keyword">final</span> Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        <span class="comment">//一、关联控件与属性，基本思路：获取atts.xml中自定义的属性，将其值赋于控件</span></div><div class="line">        <span class="comment">//具体实现如下：</span></div><div class="line">        <span class="comment">//1、通过TypedArray来存储atts.xml中自定义的属性及其值的键值对映射</span></div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.Topbar);</div><div class="line">        <span class="comment">//从TypedArray中获取属性的属性值</span></div><div class="line">        leftTextColor = typedArray.getColor(R.styleable.Topbar_leftTextColor,<span class="number">0</span>);</div><div class="line">        leftBackground = typedArray.getDrawable(R.styleable.Topbar_leftBackground);</div><div class="line">        leftText= typedArray.getString(R.styleable.Topbar_leftText);</div><div class="line"></div><div class="line">        rightTextColor = typedArray.getColor(R.styleable.Topbar_rightTextColor,<span class="number">0</span>);</div><div class="line">        rightBackground = typedArray.getDrawable(R.styleable.Topbar_rightBackground);</div><div class="line">        rightText = typedArray.getString(R.styleable.Topbar_rightText);</div><div class="line"></div><div class="line">        title = typedArray.getString(R.styleable.Topbar_tit);</div><div class="line">        titleTextSize = typedArray.getDimension(R.styleable.Topbar_titTextSize,<span class="number">0</span>);</div><div class="line">        titleTextColor = typedArray.getColor(R.styleable.Topbar_titTextColor,<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">//回收TypedArray对象</span></div><div class="line">        typedArray.recycle();</div><div class="line"></div><div class="line">        <span class="comment">//2、关联控件与属性值————实例化控件，将属性值赋于控件</span></div><div class="line">        leftBtn = <span class="keyword">new</span> Button(context);</div><div class="line">        rightBtn = <span class="keyword">new</span> Button(context);</div><div class="line">        tv_title = <span class="keyword">new</span> TextView(context);</div><div class="line"></div><div class="line">        <span class="comment">//////////将属性值赋于控件////////////////////</span></div><div class="line">        leftBtn.setTextColor(leftTextColor);</div><div class="line">        leftBtn.setBackground(leftBackground);</div><div class="line">        leftBtn.setText(leftText);</div><div class="line"></div><div class="line">        rightBtn.setTextColor(rightTextColor);</div><div class="line">        rightBtn.setBackground(rightBackground);</div><div class="line">        rightBtn.setText(rightText);</div><div class="line"></div><div class="line">        tv_title.setTextSize(titleTextSize);</div><div class="line">        tv_title.setTextColor(titleTextColor);</div><div class="line">        tv_title.setText(title);</div><div class="line">        tv_title.setGravity(Gravity.CENTER);<span class="comment">//文字居中</span></div><div class="line"></div><div class="line">        <span class="comment">//为ViewGroup设置背景色</span></div><div class="line">        setBackgroundColor(<span class="number">0xFFF59563</span>);</div><div class="line"></div><div class="line">        <span class="comment">//二、将控件以LayoutParams方式添加到ViewGroup中</span></div><div class="line">        <span class="comment">//要将控件放到layout中，就需要用到LayoutParams；在代码中布局控件的方式类似于xml文件</span></div><div class="line">        <span class="comment">//所有布局属性都在LayoutParams中进行设置</span></div><div class="line">        leftParams = <span class="keyword">new</span> LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);<span class="comment">//宽高</span></div><div class="line">        leftParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT,TRUE);<span class="comment">//居左对齐</span></div><div class="line">        addView(leftBtn,leftParams);</div><div class="line"></div><div class="line">        rightParams = <span class="keyword">new</span> LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);<span class="comment">//宽高</span></div><div class="line">        rightParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT,TRUE);<span class="comment">//居右对齐</span></div><div class="line">        addView(rightBtn,rightParams);</div><div class="line"></div><div class="line">        titleParams = <span class="keyword">new</span> LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">        titleParams.addRule(RelativeLayout.CENTER_IN_PARENT);<span class="comment">//居中对齐</span></div><div class="line">        addView(tv_title,titleParams);</div><div class="line"></div><div class="line">        <span class="comment">//三、为自定义View中的控件添加响应事件</span></div><div class="line">        leftBtn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                listener.leftClick();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        rightBtn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                listener.rightClick();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//为自定义View增加更多功能</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftBtnIsVisable</span><span class="params">(<span class="keyword">boolean</span> flag)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(flag)&#123;</div><div class="line">            leftBtn.setVisibility(View.VISIBLE);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            leftBtn.setVisibility(View.GONE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用自定义View"><a href="#使用自定义View" class="headerlink" title="使用自定义View"></a>使用自定义View</h2><p>1、使用自定义View创建xml布局文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:custom</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--使用自定义的View--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">com.xg.bas.UITemplateLearn_Topbar</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/topbar"</span></div><div class="line">        <span class="attr">custom:leftBackground</span>=<span class="string">"#FFF000"</span></div><div class="line">        <span class="attr">custom:leftText</span>=<span class="string">"Back"</span></div><div class="line">        <span class="attr">custom:leftTextColor</span>=<span class="string">"#FFFFFF"</span></div><div class="line">        <span class="attr">custom:rightBackground</span>=<span class="string">"#FFF000"</span></div><div class="line">        <span class="attr">custom:rightText</span>=<span class="string">"More"</span></div><div class="line">        <span class="attr">custom:rightTextColor</span>=<span class="string">"#FFFFFF"</span></div><div class="line">        <span class="attr">custom:title</span>=<span class="string">"自定义标题"</span></div><div class="line">        <span class="attr">custom:titTextColor</span>=<span class="string">"#123412"</span></div><div class="line">        <span class="attr">custom:titTextSize</span>=<span class="string">"10sp"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在Activity中使用自定义View<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">UITtemplateShowActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="comment">//使用自定义View</span></div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.uitemplate</span>);</div><div class="line">        UITemplateLearn_Topbar topbar = (UITemplateLearn_Topbar) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.topbar</span>);</div><div class="line"></div><div class="line">        <span class="comment">//绑定事件</span></div><div class="line">        <span class="selector-tag">topbar</span><span class="selector-class">.setOnTopbarListener</span>(new UITemplateLearn_Topbar.TopbarClickListener() &#123;</div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void leftClick() &#123;</div><div class="line">                Toast<span class="selector-class">.makeText</span>(UITtemplateShowActivity.this,<span class="string">"left btn is clicked"</span>,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void rightClick() &#123;</div><div class="line">                Toast<span class="selector-class">.makeText</span>(UITtemplateShowActivity.this,<span class="string">"right btn is clicked"</span>,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//使用更多功能</span></div><div class="line">        <span class="selector-tag">topbar</span><span class="selector-class">.setLeftBtnIsVisable</span>(false);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、自定义控件属性的文件格式都是类似上述的atts.xml的，只要修改name和format属性即可直接使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android学习11————Android属性动画赏析]]></title>
      <url>https://aiolos123.github.io/2016/10/18/11-Android%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%B5%8F%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>从3.0开始，Android就提供了一种更为强大的属性动画框架。本次课程，将向你介绍如何使用属性动画做出更好的动画<br>视频来源：<a href="http://www.imooc.com/learn/263" target="_blank" rel="external">http://www.imooc.com/learn/263</a><br><a id="more"></a></p>
<h2 id="传统动画Animation"><a href="#传统动画Animation" class="headerlink" title="传统动画Animation"></a>传统动画Animation</h2><p>传统动画Animation的局限性<br>1、只是不断的调用onDraw方法来重绘界面，改变显示的位置来实现动画效果；却不会改变属性，事件响应的位置也不会同时改变；<br>2、只有四种动画效果：位移、旋转、缩放、透明度</p>
<h2 id="属性动画Animator第一重境界ObjectAnimator"><a href="#属性动画Animator第一重境界ObjectAnimator" class="headerlink" title="属性动画Animator第一重境界ObjectAnimator"></a>属性动画Animator第一重境界ObjectAnimator</h2><p><strong>属性动画Animator调用属性的get和set方法，真实的改变属性来实现动画效果</strong><br>只要属性提供了get和set方法即可使用ObjectAnimator操作该属性，ObjectAnimator常操作某个控件的如下属性：<br>    alpha 透明度<br>    rotation z轴旋转<br>    rotationX x轴旋转<br>    rotationY y轴旋转<br>    translationX x水平偏移<br>    translationY y水平偏移<br>    ScaleX x轴缩放<br>    ScaleY y轴缩放<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现动画效果</span></div><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">move</span>(<span class="params">View view</span>)</span>&#123;</div><div class="line">        ImageView imageView = (ImageView) findViewById(R.id.imageView);</div><div class="line">        <span class="comment">//ObjectAnimator可以控制的动画属性：只要属性提供了get和set方法即可使用ObjectAnimator操作该属性，常用的属性有：</span></div><div class="line">        <span class="comment">//translationX: 偏移位置(单位:像素)  scaleX: 缩放程度(0.5F代表缩放50%)</span></div><div class="line">        <span class="comment">//rotation: 旋转角度(单位:角度)  alpha: 透明度(0.5F代码50%不透明)</span></div><div class="line"></div><div class="line">        <span class="comment">//同时操作多个属性的第一种方式</span></div><div class="line"><span class="comment">//        ObjectAnimator.ofFloat(imageView,"translationX",0F,200F).setDuration(1000).start();</span></div><div class="line"><span class="comment">//        ObjectAnimator.ofFloat(imageView,"translationY",0F,200F).setDuration(1000).start();</span></div><div class="line"><span class="comment">//        ObjectAnimator.ofFloat(imageView,"rotation",0F,360F).setDuration(1000).start();</span></div><div class="line"></div><div class="line">        <span class="comment">//同时操作多个属性的第二种方式</span></div><div class="line"><span class="comment">//        PropertyValuesHolder pvl1 = PropertyValuesHolder.ofFloat("rotation",0F,360F);</span></div><div class="line"><span class="comment">//        PropertyValuesHolder pvl2= PropertyValuesHolder.ofFloat("translationX",0F,200F);</span></div><div class="line"><span class="comment">//        PropertyValuesHolder pvl3 = PropertyValuesHolder.ofFloat("translationY",0F,200F);</span></div><div class="line"><span class="comment">//        ObjectAnimator.ofPropertyValuesHolder(imageView,pvl1,pvl2,pvl3).setDuration(1000).start();</span></div><div class="line"></div><div class="line">        <span class="comment">//同时操作多个属性的第三种方式</span></div><div class="line">        ObjectAnimator objA1 = ObjectAnimator.ofFloat(imageView,<span class="string">"translationX"</span>,<span class="number">0</span>F,<span class="number">200</span>F);</div><div class="line">        ObjectAnimator objA2 = ObjectAnimator.ofFloat(imageView,<span class="string">"translationY"</span>,<span class="number">0</span>F,<span class="number">200</span>F);</div><div class="line">        ObjectAnimator objA3 = ObjectAnimator.ofFloat(imageView,<span class="string">"rotation"</span>,<span class="number">0</span>F,<span class="number">360</span>F);</div><div class="line">        AnimatorSet <span class="keyword">set</span> = <span class="keyword">new</span> AnimatorSet();</div><div class="line">        <span class="keyword">set</span>.playTogether(objA1,objA2,objA3);</div><div class="line">        <span class="comment">//顺序执行动画的第一种方式</span></div><div class="line">        <span class="comment">//set.playSequentially(objA1,objA2,objA3);</span></div><div class="line">        <span class="comment">//顺序执行动画的第二种方式</span></div><div class="line">        <span class="comment">//set.play(objA1).with(objA3);</span></div><div class="line">        <span class="comment">//set.play(objA2).after(objA1);</span></div><div class="line">        <span class="keyword">set</span>.setDuration(<span class="number">1000</span>);</div><div class="line">        <span class="keyword">set</span>.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//为动画添加监听事件</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doClick</span>(<span class="params">View view</span>)</span>&#123;</div><div class="line">        ObjectAnimator animator = ObjectAnimator.ofFloat(view,<span class="string">"alpha"</span>,<span class="number">0</span>F,<span class="number">1</span>F);</div><div class="line">        animator.setDuration(<span class="number">1000</span>);</div><div class="line"></div><div class="line">        <span class="comment">//为动画添加监听事件的第一种方式</span></div><div class="line"><span class="comment">//        animator.addListener(new Animator.AnimatorListener() &#123;</span></div><div class="line"><span class="comment">//            @Override</span></div><div class="line"><span class="comment">//            public void onAnimationStart(Animator animation) &#123;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//            //多数情况需要实现监听动画结束的方法</span></div><div class="line"><span class="comment">//            @Override</span></div><div class="line"><span class="comment">//            public void onAnimationEnd(Animator animation) &#123;</span></div><div class="line"><span class="comment">//                Toast.makeText(AnimatorTest.this,"animation end",Toast.LENGTH_SHORT).show();</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//            @Override</span></div><div class="line"><span class="comment">//            public void onAnimationCancel(Animator animation) &#123;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//            @Override</span></div><div class="line"><span class="comment">//            public void onAnimationRepeat(Animator animation) &#123;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//        &#125;);</span></div><div class="line">        <span class="comment">//为动画添加监听事件的第二种方式————只对某一个事件进行监听</span></div><div class="line">        animator.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="comment">//只需添加需要重写的方法</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span>(<span class="params">Animator animation</span>) </span>&#123;</div><div class="line">                super.onAnimationEnd(animation);</div><div class="line">                Toast.makeText(AnimatorTest.<span class="keyword">this</span>,<span class="string">"animation end"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        animator.start();<span class="comment">//执行动画</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="属性动画Animator第二重境界ValueAnimator"><a href="#属性动画Animator第二重境界ValueAnimator" class="headerlink" title="属性动画Animator第二重境界ValueAnimator"></a>属性动画Animator第二重境界ValueAnimator</h2><p><strong>ValueAnimator不作用于任何属性，也不提供任何动画，它只是一个数值发生器，它可以产生任何想要的数值。在属性动画Animator中，每一步的动画效果的具体实现都是通过ValueAnimator来计算得到的。</strong></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ValueAnimator的用法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doClick</span>(<span class="params">View view</span>)</span>&#123;</div><div class="line">    <span class="comment">//示例:产生从0到100的int型数值变化</span></div><div class="line">    btn = (Button)view;</div><div class="line">    ValueAnimator animator = ValueAnimator.ofInt(<span class="number">0</span>,<span class="number">100</span>);</div><div class="line">    animator.setDuration(<span class="number">5000</span>);<span class="comment">//动画在5000毫秒内完成</span></div><div class="line">    <span class="comment">//通过动画监听事件来监听ValueAnimator每一步产生的值，通过这个值实现相应的动画效果</span></div><div class="line">    animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        @<span class="function">Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span>(<span class="params">ValueAnimator animation</span>) &#123;</div><div class="line">            <span class="comment">//获取ValueAnimator每一步产生的值</span></div><div class="line">            Integer <span class="keyword">value</span> = (Integer)animation.getAnimatedValue();</div><div class="line">            <span class="comment">//通过这个值实现相应的动画效果</span></div><div class="line">            btn.setText(<span class="string">""</span>+<span class="keyword">value</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    animator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例————实现卫星菜单"><a href="#示例————实现卫星菜单" class="headerlink" title="示例————实现卫星菜单"></a>示例————实现卫星菜单</h2><p>1、定义卫星菜单的satellite_menu.xml布局文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/b"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgv_b"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/c"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgv_c"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/d"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgv_d"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/e"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgv_e"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/f"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgv_f"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/g"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgv_g"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/h"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgv_h"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/a"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgv_a"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在activity中实现卫星菜单的展示与回收<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Example_SatelliteMenuActivity extends Activity implements View.OnClickListener&#123;</div><div class="line"></div><div class="line">    <span class="comment">//存放imageView的id的数组</span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] res = &#123;R.id.imgv_a,R.id.imgv_b,R.id.imgv_c,R.id.imgv_d,R.id.imgv_e,R.id.imgv_f,R.id.imgv_g,R.id.imgv_h&#125;;</div><div class="line">    <span class="comment">//存放imageView的列表</span></div><div class="line">    <span class="keyword">private</span> List&lt;ImageView&gt; imgViewList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="comment">//判断卫星菜单是否已经显示的flag</span></div><div class="line">    <span class="built_in">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.satellite_menu);</div><div class="line">        <span class="comment">//显示卫星菜单</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</div><div class="line">            ImageView imgV = (ImageView)findViewById(res[i]);</div><div class="line">            <span class="comment">//设置imageView点击事件</span></div><div class="line">            imgV.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">            <span class="comment">//将实例化的imageView存放到list中</span></div><div class="line">            imgViewList.<span class="built_in">add</span>(imgV);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//实现imageView点击事件</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onClick(View v) &#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.imgv_a: &#123;</div><div class="line">                <span class="keyword">if</span>(flag)&#123;</div><div class="line">                    <span class="comment">//展开卫星菜单</span></div><div class="line">                    startAnim();</div><div class="line">                    flag = <span class="keyword">false</span>;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//关闭卫星菜单</span></div><div class="line">                    closeAnim();</div><div class="line">                    flag = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//其他按钮</span></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                Toast.makeText(Example_SatelliteMenuActivity.<span class="keyword">this</span>,<span class="string">"click"</span> + v.getId(),Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//关闭卫星菜单</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> closeAnim() &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i =  <span class="number">1</span>; i &lt; res.length; i++) &#123;</div><div class="line">            <span class="comment">//纵向回收菜单</span></div><div class="line"><span class="comment">//            ObjectAnimator animator = ObjectAnimator.ofFloat(imgViewList.get(i),"translationY",i*100,0F);</span></div><div class="line"><span class="comment">//            animator.setDuration(500);</span></div><div class="line"><span class="comment">//            animator.start();</span></div><div class="line">            <span class="comment">//扇形回收菜单</span></div><div class="line">            <span class="comment">//第一个为0度，最后一个为90度，其余均分90度</span></div><div class="line">            ObjectAnimator animator1 = <span class="keyword">null</span>;</div><div class="line">            ObjectAnimator animator2 = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;<span class="comment">//第一个为0度</span></div><div class="line">                animator1 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationY"</span>,<span class="number">0</span>F,<span class="number">0</span>F);</div><div class="line">                animator2 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationX"</span>,(<span class="built_in">float</span>) (Math.<span class="built_in">cos</span>(<span class="number">0</span>) * <span class="number">500</span>),<span class="number">0</span>F);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == res.length<span class="number">-1</span>)&#123;<span class="comment">//最后一个为90度</span></div><div class="line">                animator1 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationY"</span>,(<span class="built_in">float</span>) (Math.<span class="built_in">sin</span>(<span class="number">0</span>) * <span class="number">500</span>),<span class="number">0</span>F);</div><div class="line">                animator2 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationX"</span>,<span class="number">0</span>F,<span class="number">0</span>F);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//其余均分90度</span></div><div class="line">                animator1 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationY"</span>,(<span class="built_in">float</span>) (Math.<span class="built_in">sin</span>(Math.toRadians((i - <span class="number">1</span>) * <span class="number">90</span> / (res.length - <span class="number">1</span> - <span class="number">2</span>))) * <span class="number">500</span>),<span class="number">0</span>F);</div><div class="line">                animator2 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationX"</span>,(<span class="built_in">float</span>) (Math.<span class="built_in">cos</span>(Math.toRadians((i - <span class="number">1</span>) * <span class="number">90</span> / (res.length - <span class="number">1</span> - <span class="number">2</span>))) * <span class="number">500</span>),<span class="number">0</span>F);</div><div class="line">            &#125;</div><div class="line">            AnimatorSet <span class="built_in">set</span> = <span class="keyword">new</span> AnimatorSet();</div><div class="line">            <span class="built_in">set</span>.playTogether(animator1,animator2);</div><div class="line">            <span class="built_in">set</span>.setDuration(<span class="number">500</span>);</div><div class="line">            <span class="comment">//插值器，定义一个动画变化的速度</span></div><div class="line">            <span class="built_in">set</span>.setInterpolator(<span class="keyword">new</span> BounceInterpolator());</div><div class="line">            <span class="built_in">set</span>.setStartDelay(i*<span class="number">300</span>);<span class="comment">//延迟每一个图片</span></div><div class="line">            <span class="built_in">set</span>.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//展开卫星菜单</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> startAnim() &#123;</div><div class="line">        <span class="comment">//x与y轴坐标同时变化</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; res.length; i++) &#123;</div><div class="line">            <span class="comment">//纵向展开菜单</span></div><div class="line"><span class="comment">//            ObjectAnimator animator = ObjectAnimator.ofFloat(imgViewList.get(i),"translationY",0F,i*100);</span></div><div class="line"><span class="comment">//            animator.setDuration(500);</span></div><div class="line"><span class="comment">//            //插值器，定义一个动画变化的速度</span></div><div class="line"><span class="comment">//            animator.setInterpolator(new BounceInterpolator());</span></div><div class="line"><span class="comment">//            animator.setStartDelay(i*300);//延迟出现每一个图片</span></div><div class="line"><span class="comment">//            animator.start();</span></div><div class="line"></div><div class="line">            <span class="comment">//扇形展开菜单</span></div><div class="line">            <span class="comment">//第一个为0度，最后一个为90度，其余均分90度</span></div><div class="line">            ObjectAnimator animator1 = <span class="keyword">null</span>;</div><div class="line">            ObjectAnimator animator2 = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;<span class="comment">//第一个为0度</span></div><div class="line">                animator1 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationY"</span>,<span class="number">0</span>F,<span class="number">0</span>F);</div><div class="line">                animator2 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationX"</span>,<span class="number">0</span>F,(<span class="built_in">float</span>) (Math.<span class="built_in">cos</span>(<span class="number">0</span>) * <span class="number">500</span>));</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == res.length<span class="number">-1</span>)&#123;<span class="comment">//最后一个为90度</span></div><div class="line">                animator1 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationY"</span>,<span class="number">0</span>F,(<span class="built_in">float</span>) (Math.<span class="built_in">sin</span>(<span class="number">0</span>) * <span class="number">500</span>));</div><div class="line">                animator2 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationX"</span>,<span class="number">0</span>F,<span class="number">0</span>F);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//其余均分90度</span></div><div class="line">                animator1 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationY"</span>,<span class="number">0</span>F,(<span class="built_in">float</span>) (Math.<span class="built_in">sin</span>(Math.toRadians((i - <span class="number">1</span>) * <span class="number">90</span> / (res.length - <span class="number">1</span> - <span class="number">2</span>))) * <span class="number">500</span>));</div><div class="line">                animator2 = ObjectAnimator.ofFloat(imgViewList.<span class="built_in">get</span>(i),<span class="string">"translationX"</span>,<span class="number">0</span>F,(<span class="built_in">float</span>) (Math.<span class="built_in">cos</span>(Math.toRadians((i - <span class="number">1</span>) * <span class="number">90</span> / (res.length - <span class="number">1</span> - <span class="number">2</span>))) * <span class="number">500</span>));</div><div class="line">            &#125;</div><div class="line">            AnimatorSet <span class="built_in">set</span> = <span class="keyword">new</span> AnimatorSet();</div><div class="line">            <span class="built_in">set</span>.playTogether(animator1,animator2);</div><div class="line">            <span class="built_in">set</span>.setDuration(<span class="number">500</span>);</div><div class="line">            <span class="comment">//插值器，定义一个动画变化的速度</span></div><div class="line">            <span class="built_in">set</span>.setInterpolator(<span class="keyword">new</span> BounceInterpolator());</div><div class="line">            <span class="built_in">set</span>.setStartDelay(i*<span class="number">300</span>);<span class="comment">//延迟出现每一个图片</span></div><div class="line">            <span class="built_in">set</span>.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><p>1、ObjectAnimator可以操作各种属性，只要这个属性拥有get和set方法；<br>2、ObjectAnimator可以操作的常用属性：<br>    alpha 透明度<br>    rotation z轴旋转<br>    rotationX x轴旋转<br>    rotationY y轴旋转<br>    translationX x水平偏移距离<br>    translationY y水平偏移距离<br>    ScaleX x轴缩放<br>    ScaleY y轴缩放<br>    X  移动到X轴某点<br>    Y  移动到Y轴某点</p>
<h3 id="常用的类和接口"><a href="#常用的类和接口" class="headerlink" title="常用的类和接口"></a>常用的类和接口</h3><p>ValueAnimator –数值发生器，可以实现很多很灵活的动画效果；<br>ObjectAnimator –继承自ValueAnimator，可以很好滴使用属性对话框架；<br>AnimatorUpdateListener – 用于动画监听器<br>AnimatorListenerAdapter– 用于动画监听器<br>PropertyValuesHolder –用于控制动画集合的显示效果<br>Animatorset –用于控制动画集合的显示效果<br>TypeEvaluators －－－值计算器，用于控制值变化的规律<br>Interprolators －－－插值计算器，用于控制值变化的规律</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android学习十————Android Studio使用技巧]]></title>
      <url>https://aiolos123.github.io/2016/10/12/10-AndroidStudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>本文介绍Android Studio的使用技巧<br>视频来源：<a href="http://www.imooc.com/learn/650" target="_blank" rel="external">http://www.imooc.com/learn/650</a><br>          <a href="http://www.imooc.com/learn/206" target="_blank" rel="external">http://www.imooc.com/learn/206</a><br>AS中文官网：<br>          <a href="http://www.android-studio.org/" target="_blank" rel="external">http://www.android-studio.org/</a><br>Android Studio教程从入门到精通<br>          <a href="http://www.open-open.com/lib/view/open1433387390635.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1433387390635.html</a><br><a id="more"></a></p>
<h2 id="Android-Studio简介"><a href="#Android-Studio简介" class="headerlink" title="Android Studio简介"></a>Android Studio简介</h2><p>android studio是单工程的开发模式<br>android studio中的application相当于eclipse里的workspace概念<br>android studio中的module相当于eclipse里的project概念</p>
<h2 id="Android-Studio配置"><a href="#Android-Studio配置" class="headerlink" title="Android Studio配置"></a>Android Studio配置</h2><p>1、中文乱码—–——在窗口中，找到IDE Settings-&gt;Appearance，在右侧勾选上“Override default fonts by”，然后在第一个下拉框中选择字体为“simsun”，然后apply，重启IDE就好了<br>2、设置快捷键—–在settings窗口中，找到IDE Settings-&gt;keymap,选择default<br>3、导入jar包—–选择File-&gt;Projcet Structure，在弹出的窗口中左侧找到Libraries并选中，然后点击“+”，并选择Java就能导入Jar包了。或者直接拷贝jar文件到项目的libs文件夹下，然后运行：Sync Project with Gradle Files。然后clean project重新编译。<br>4、删除项目—–AS对工程删除做了保护机制，默认你在项目右键发现没有删除选项。你会发现你的module上面会有一个小手机，这是保护机制。删除的第一步就是去掉保护机制，也就是让手机不见，具体做法就是鼠标放在工程上右键-&gt;open module setting，或者F4进入如图界面，选中你要删除的module，然后点击减号，这样就取消了保护机制，然后回到项目工程右键就可发现删除选项。注意：删除会将源文件删除。</p>
<h2 id="Android-Studio目录结构"><a href="#Android-Studio目录结构" class="headerlink" title="Android Studio目录结构"></a>Android Studio目录结构</h2><p>新建工程项目后AS的Project目录结构如下所示：</p>
<pre><code>.idea：//AS生成的工程配置文件，类似Eclipse的project.properties。
app：//AS创建工程中的一个Module。
gradle：//构建工具系统的jar和wrapper等，jar告诉了AS如何与系统安装的gradle构建联系。
External Libraries：//不是一个文件夹，只是依赖lib文件，如SDK等。
</code></pre><p>新建工程项目后AS的Module目录结构如下所示：</p>
<pre><code>build：//构建目录，相当于Eclipse中默认Java工程的bin目录，鼠标放在上面右键Show in Exploer即可打开文件夹，
    编译生成的apk也在这个目录的outs子目录，不过在AS的工程里是默认不显示out目录的，就算有编译结果也
    不显示，右键打开通过文件夹直接可以看。
libs：//依赖包，包含jar包和jni等包。
src：//源码，相当于eclipse的工程。
main：//主文件夹 
    java：//Java代码，包含工程和新建是默认产生的Test工程源码。 
    res：//资源文件，类似Eclipse。
        layout：//App布局及界面元素配置，雷同Eclipse。
        menu：//App菜单配置，雷同Eclipse。 
        values：//雷同Eclipse。
            dimens.xml：//定义css的配置文件。 
            strings.xml：//定义字符串的配置文件。 
            styles.xml：//定义style的配置文件。
            ......：//arrays等其他文件。
        ......：//assets等目录
    AndroidManifest.xml：//App基本信息（Android管理文件） 
    ic_launcher-web.png：//App图标 
build.gradle：//Module的Gradle构建脚本
</code></pre><h2 id="Android-Studio快捷键"><a href="#Android-Studio快捷键" class="headerlink" title="Android Studio快捷键"></a>Android Studio快捷键</h2><h3 id="查看log"><a href="#查看log" class="headerlink" title="查看log"></a>查看log</h3><p>生成Log tag静态常量—–&gt;logt+回车<br>打印debug log—–&gt;logd+回车<br>打印error log—–&gt;loge+回车<br>打印带函数参数值的log—–&gt;logm+回车</p>
<h3 id="代码提示"><a href="#代码提示" class="headerlink" title="代码提示"></a>代码提示</h3><p>代码提示—–&gt;ctrl+alt+空格</p>
<h3 id="代码移动"><a href="#代码移动" class="headerlink" title="代码移动"></a>代码移动</h3><p>选中整行、整段代码—–&gt;一次或多次ctrl+w<br>代码向上/下移动—–&gt;ctrl+shift+上/下箭头<br>在类中的方法间移动—–&gt;alt+上/下箭头<br>删除一个整行—–&gt;ctrl+y<br>复制当前行到下一行—–&gt;ctrl+d</p>
<h3 id="代码查看"><a href="#代码查看" class="headerlink" title="代码查看"></a>代码查看</h3><p>打开一个存在的类—–&gt;ctrl+n<br>打开一个存在的布局xml、java、res/内、assets内的文件—–&gt;ctrl+shift+n<br>查看一个变量的声明—–&gt;ctrl+b或ctrl+左键点击<br>查看一个类的父类—–&gt;ctrl+u<br>查看一个方法的调用—–&gt;ctrl+alt+h<br>在类中查看一个方法的实现—–&gt;ctrl+shift+i<br>显示类的继承结构图—–&gt;ctrl+h<br>代码返回(相当于浏览器的后退键)—–&gt;ctrl+alt+箭头左键<br>在打开的多个窗口间切换—–&gt;alt+箭头左键/右键<br>折叠代码—–&gt;ctrl+减号<br>展开代码—–&gt;ctrl+加号<br>隐藏、显示左侧工程面板—–&gt;alt+数字1<br>查找类中的方法或变量—–&gt;ctrl+shift+alt+n<br>显示当前文件的结构、查找类中的方法—–&gt;ctrl+F12<br>代码注释、解除注释—–&gt;ctrl+/<br>重写父类的方法—–&gt;ctrl+O<br>跳到大括号的开头结尾—–&gt;ctrl+[或]<br>选中一段代码，为其快速添加if、for、try/catch等语句—–&gt;ctrl+alt+T</p>
<h2 id="自动生成代码片段快捷键"><a href="#自动生成代码片段快捷键" class="headerlink" title="自动生成代码片段快捷键"></a>自动生成代码片段快捷键</h2><p>ctrl+J</p>
<h2 id="代码查找替换与格式化"><a href="#代码查找替换与格式化" class="headerlink" title="代码查找替换与格式化"></a>代码查找替换与格式化</h2><p>替换文本—–&gt;ctrl+R<br>查找文本—–&gt;ctrl+F<br>格式化代码—–&gt;ctrl+alt+L<br>打开最近的文件—–&gt;ctrl+E</p>
<h2 id="Android-Studio调试功能"><a href="#Android-Studio调试功能" class="headerlink" title="Android Studio调试功能"></a>Android Studio调试功能</h2><p>设置断点—–&gt;单击代码行左侧<br>单步调试—–&gt;f8<br>进入一个方法的内部—–&gt;f7<br>跳到下一个断点—–&gt;shift+f8<br>调试阶段动态输出变量的值—–&gt;右键断点，取消选中Suspend,选中Log evaluated expression,输入输出语句即可<br>调试阶段动态修改变量的值—–&gt;在Variables区域右键变量，选中setValue<br>调试阶段观察特定变量的值—–&gt;在Variables区域右键变量，选中add to watches</p>
<p>更多Android Studio调试功能的图文内容请参考<br><a href="http://www.open-open.com/lib/view/open1433387390635.html#articleHeader5" target="_blank" rel="external">http://www.open-open.com/lib/view/open1433387390635.html#articleHeader5</a></p>
<h2 id="集成NDK"><a href="#集成NDK" class="headerlink" title="集成NDK"></a>集成NDK</h2><p>请参考 <a href="http://www.imooc.com/video/11695" target="_blank" rel="external">http://www.imooc.com/video/11695</a></p>
<h2 id="Android-Studio构建系统基础"><a href="#Android-Studio构建系统基础" class="headerlink" title="Android Studio构建系统基础"></a>Android Studio构建系统基础</h2><p>请参考 <a href="http://www.open-open.com/lib/view/open1433387390635.html#articleHeader6" target="_blank" rel="external">http://www.open-open.com/lib/view/open1433387390635.html#articleHeader6</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android学习九————AsyncTask异步任务二之异步加载]]></title>
      <url>https://aiolos123.github.io/2016/10/11/9-AsyncTask%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>上一节课程学习了AsyncTask异步任务一之AsyncTask如何使用<br>本节课程学习AsyncTask异步任务二之异步加载<br>视频来源：<a href="http://www.imooc.com/learn/406" target="_blank" rel="external">http://www.imooc.com/learn/406</a><br><a id="more"></a></p>
<h2 id="什么是异步加载"><a href="#什么是异步加载" class="headerlink" title="什么是异步加载"></a>什么是异步加载</h2><p>用异步的方式加载数据，提高用户体验<br>为什么要使用异步加载</p>
<pre><code>- Android单线程模型
- 耗时操作阻塞UI线程
- 耗时操作在非UI线程中进行
</code></pre><p>实现异步加载的方式</p>
<pre><code>- 多线程/线程池
- AsyncTask(封装了线程池)
</code></pre><h2 id="图片异步加载"><a href="#图片异步加载" class="headerlink" title="图片异步加载"></a>图片异步加载</h2><p>使用缓存</p>
<pre><code>- 将已下载的图片缓存起来
- 避免滚动list导致的重复下载图片
- 提高用户体验、节省流量、加快页面滚动流畅速度
- Lru算法：Least Recently Used 最近最少使用算法
- Android提供了LruCache类来实现这个缓存算法
</code></pre><h2 id="滚动时的高效优化"><a href="#滚动时的高效优化" class="headerlink" title="滚动时的高效优化"></a>滚动时的高效优化</h2><p>如何提高效率</p>
<pre><code>- ListView滑动停止后才加载可见项
- ListView滑动时，取消所有加载项
</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过异步加载，避免阻塞UI线程<br>通过LruCache，将已下载图片放到内存中<br>通过判断ListView滑动状态，决定何时加载图片<br>不仅仅是ListView，任何控件都可以使用异步加载</p>
<h2 id="在Activity中根据URL加载网络数据，显示item及其图片"><a href="#在Activity中根据URL加载网络数据，显示item及其图片" class="headerlink" title="在Activity中根据URL加载网络数据，显示item及其图片"></a>在Activity中根据URL加载网络数据，显示item及其图片</h2><p><strong>加载网络数据通常使用JSON格式的数据</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ShowActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">ListView</span> mlistView;</div><div class="line">    <span class="comment">//JSON格式的数据来源</span></div><div class="line">    <span class="keyword">private</span> static <span class="type">String</span> <span class="type">URL</span>=<span class="string">"http://www.imooc.com/api/teacher?type=4&amp;num=30"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.newslist);</div><div class="line"></div><div class="line">        </div><div class="line">        mlistView = (<span class="type">ListView</span>) findViewById(<span class="type">R</span>.id.lv_main);</div><div class="line">        <span class="comment">//启动异步任务，并传递URL参数到doInBackground()方法</span></div><div class="line">        <span class="keyword">new</span> <span class="type">NewsAsyncTask</span>().execute(<span class="type">URL</span>,<span class="string">"data"</span>);<span class="comment">//jsonrray的key</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取新闻的异步任务内部类</div><div class="line">     * 实现网络的异步访问</div><div class="line">     * 返回NewsBean的集合对象List&lt;NewsBean&gt;</div><div class="line">     *</div><div class="line">     * AsyncTask的参数说明：</div><div class="line">     *      String  为传入的URL字符串类型</div><div class="line">     *      Void  中间过程的参数类型无需记录</div><div class="line">     *      List&lt;NewsBean&gt; 返回封装JSON格式数据的Bean的集合</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsAsyncTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask&lt;String</span>,<span class="title">Void</span>,<span class="title">List&lt;NewsBean&gt;&gt;</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//执行异步任务</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> <span class="type">List</span>&lt;<span class="type">NewsBean</span>&gt; doInBackground(<span class="type">String</span>... params) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">JSONHandler</span>&lt;<span class="type">NewsBean</span>&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                public <span class="type">Void</span> setBeanAttrs(<span class="type">List</span>&lt;<span class="type">NewsBean</span>&gt; list, <span class="type">JSONObject</span> jsonObject) &#123;</div><div class="line">                    <span class="comment">//创建bean</span></div><div class="line">                    <span class="type">NewsBean</span> bean = <span class="keyword">new</span> <span class="type">NewsBean</span>();</div><div class="line">                    <span class="comment">//设置bean的属性</span></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        bean.setNewsImgUrl(jsonObject.getString(<span class="string">"picSmall"</span>));</div><div class="line">                        bean.setNewsTitle(jsonObject.getString(<span class="string">"name"</span>));</div><div class="line">                        bean.setNewsContent(jsonObject.getString(<span class="string">"description"</span>));</div><div class="line">                    &#125; <span class="keyword">catch</span> (<span class="type">JSONException</span> e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">//将这个bean对象加入到集合中</span></div><div class="line">                    list.add(bean);</div><div class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;.getJSONObjBeanListFromURL(params[<span class="number">0</span>],params[<span class="number">1</span>]);<span class="comment">//URL,"data"</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> void onPostExecute(<span class="type">List</span>&lt;<span class="type">NewsBean</span>&gt; newsBeen) &#123;</div><div class="line">            <span class="keyword">super</span>.onPostExecute(newsBeen);</div><div class="line"></div><div class="line">            <span class="comment">//在主线程中更新ListView</span></div><div class="line">            <span class="comment">//实现异步加载图片</span></div><div class="line">            mlistView.setAdapter(<span class="keyword">new</span> <span class="type">ListViewShowImagesBestPlan</span>(<span class="type">ShowActivity</span>.<span class="keyword">this</span>,newsBeen, <span class="type">R</span>.layout.newsitem,mlistView));</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="从网络上获取url对应的JSON格式数据的工具类"><a href="#从网络上获取url对应的JSON格式数据的工具类" class="headerlink" title="从网络上获取url对应的JSON格式数据的工具类"></a>从网络上获取url对应的JSON格式数据的工具类</h2><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据url从网络上获取对应的JSON格式数据，</span></div><div class="line"><span class="comment">//转化为封装的Bean中再添加到List&lt;NewsBean&gt;集合中返回</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONHandler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">       本例将要使用的JSON的数据格式如下：</div><div class="line">        json = &#123;</div><div class="line">            status:1,</div><div class="line">            data:[</div><div class="line">                &#123;</div><div class="line">                    id:1,</div><div class="line">                    name:'something',</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    id:2,</div><div class="line">                    name:'something2',</div><div class="line">                &#125;,</div><div class="line">                ......</div><div class="line">             ]</div><div class="line">         &#125;</div><div class="line"></div><div class="line">     */</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * 加载网络数据通常使用的是JSON格式</div><div class="line">     *</div><div class="line">     * 通过url从网络上获取JSON格式的数据，</div><div class="line">     * 转化为我们封装的T类型的bean</div><div class="line">     * 并添加到T的list集合中返回</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> url 网络json字符串的url地址</div><div class="line">     * <span class="doctag">@param</span> jsonArr  json字符串中的数组名，其中包含很多json对象</div><div class="line">     * <span class="doctag">@return</span> 返回类型为T的bean的list集合</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">List</span>&lt;T&gt; getJSONObjBeanListFromURL(String url,String jsonArr)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">List</span>&lt;T&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="comment">//从网络中获取JSON格式字符串数据</span></div><div class="line">        String jsonString = getStringFromURL(url);</div><div class="line"></div><div class="line">        <span class="comment">//解析JSON数据到list中//////////////////////////</span></div><div class="line"></div><div class="line">        JSONObject jsonObject;<span class="comment">//JSON对象</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//将json格式的字符串转换为json对象</span></div><div class="line">            jsonObject = <span class="keyword">new</span> JSONObject(jsonString);</div><div class="line">            <span class="comment">//从JSON对象中获取JSON数据中的json数组</span></div><div class="line">            JSONArray jsonArray = jsonObject.getJSONArray(jsonArr);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; jsonArray.length(); i++) &#123;</div><div class="line">                <span class="comment">//取出json数组中的每一个json对象</span></div><div class="line">                jsonObject = jsonArray.getJSONObject(i);</div><div class="line">                <span class="comment">//将JSON对象封装为Bean，并添加到list集合中</span></div><div class="line">                setBeanAttrs(<span class="keyword">list</span>,jsonObject);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">list</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过url读取网页上的字符串数据</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> url 网络上的json格式的字符串地址</div><div class="line">     * <span class="doctag">@return</span> 返回网络地址中的字符串</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String getStringFromURL(String url)&#123;</div><div class="line">        InputStreamReader isr;</div><div class="line">        String result = <span class="string">""</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String line = <span class="string">""</span>;<span class="comment">//读取出来的每一行的数据</span></div><div class="line">            <span class="comment">//new URL(url).openStream()的功能与url.openConnection().getInputStream()相同</span></div><div class="line">            <span class="comment">//可根据URL直接联网获取网络数据！返回值类型为InputStream</span></div><div class="line">            isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> URL(url).openStream(),<span class="string">"utf-8"</span>);<span class="comment">//将字节流is转化为指定字符集的字符流isr</span></div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);<span class="comment">//将字符流以Buffer形式读取出来</span></div><div class="line">            <span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">                result += line;<span class="comment">//将读取出来的结果拼接到返回结果上</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将JSON对象封装到bean中,并将所有bean对象加入到集合list中返回</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> list</div><div class="line">     * <span class="doctag">@param</span> jsonObject</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Void setBeanAttrs(<span class="keyword">List</span>&lt;T&gt; <span class="keyword">list</span>,JSONObject jsonObject);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="URL异步加载、缓存图片、滚动优化的工具类"><a href="#URL异步加载、缓存图片、滚动优化的工具类" class="headerlink" title="URL异步加载、缓存图片、滚动优化的工具类"></a>URL异步加载、缓存图片、滚动优化的工具类</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoaderFromURLByAsyncTask</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView mImageView;</div><div class="line">    <span class="keyword">private</span> String mUrl;</div><div class="line">    <span class="comment">//创建LruCache</span></div><div class="line">    <span class="keyword">private</span> LruCache&lt;String,Bitmap&gt; mLruCache;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView mListView;</div><div class="line">    <span class="keyword">private</span> Set&lt;ImageAsyncTask&gt; mAsyncTask;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageLoaderFromURLByAsyncTask</span><span class="params">(ListView listView)</span></span>&#123;</div><div class="line"></div><div class="line">        mListView = listView;</div><div class="line">        mAsyncTask = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        <span class="comment">//该方法用于初始化LruCache</span></div><div class="line">        initLruCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用AsyncTask的方式从网络的url异步加载图片,并设置给传递进来的ImageView对象</div><div class="line">     * <span class="doctag">@param</span> imageView 显示图片的ImageView</div><div class="line">     * <span class="doctag">@param</span> url 图片的url地址</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">getImageFromURLByAsyncTask</span><span class="params">(ImageView imageView,String url)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">////////////////V1.0/////////////////////////////</span></div><div class="line">        <span class="comment">//new ImageAsyncTask(imageView,url).execute(url);</span></div><div class="line"></div><div class="line">        <span class="comment">///////////////V2.0//////////////////////////////</span></div><div class="line">        <span class="comment">//从缓存中取出对应的图片</span></div><div class="line">        Bitmap bitmap = getBitmapFromLurCache(url);</div><div class="line">        <span class="keyword">if</span>(bitmap == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//缓存中不存在该图片，则使用异步进行下载</span></div><div class="line">            <span class="comment">//new ImageAsyncTask(url).execute(url);</span></div><div class="line"></div><div class="line">            <span class="comment">////////V3.0///滚动时才触发下载///////////////////</span></div><div class="line">            imageView.setImageResource(R.mipmap.ic_launcher);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//缓存中存在该图片,则直接为imageView设置图片</span></div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义AsyncTask类</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageAsyncTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>,<span class="title">Void</span>,<span class="title">Bitmap</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//private ImageView mImageView;</span></div><div class="line">        <span class="keyword">private</span> String mUrl;</div><div class="line"></div><div class="line">        <span class="comment">//构造方法，传递ImageView</span></div><div class="line">        <span class="comment">//public ImageAsyncTask(ImageView imageView,String url)&#123;</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ImageAsyncTask</span><span class="params">(String url)</span></span>&#123;</div><div class="line">            <span class="comment">//this.mImageView = imageView;</span></div><div class="line">            <span class="keyword">this</span>.mUrl = url;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> <span class="function">Bitmap <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">            <span class="comment">////////////////V1.0/////////////////////////////</span></div><div class="line">            <span class="comment">//return getBitmapFromURl(url);</span></div><div class="line"></div><div class="line">            <span class="comment">///////////////V2.0 增加缓存机制//////////////////////////////</span></div><div class="line">            String url = params[<span class="number">0</span>];</div><div class="line">            <span class="comment">//从网络获取图片</span></div><div class="line">            Bitmap bitmap = getBitmapFromURl(url);</div><div class="line">            <span class="keyword">if</span>(bitmap != <span class="keyword">null</span>)&#123;<span class="comment">//图片下载成功</span></div><div class="line">                <span class="comment">//将下载的图片保存到cache缓存中</span></div><div class="line">                addBitmapToLruCache(url,bitmap);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> bitmap;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onPostExecute(bitmap);</div><div class="line">            <span class="comment">//更新主线程UI</span></div><div class="line">            <span class="comment">////////////////V1.0///////////////////////////////////</span></div><div class="line">            <span class="comment">//mImageView.setImageBitmap(bitmap);</span></div><div class="line"></div><div class="line">            <span class="comment">///////////////V2.0 使用Tag解决图片显示错位的bug////////////</span></div><div class="line"><span class="comment">//            if(mImageView.getTag().equals(mUrl))&#123;</span></div><div class="line"><span class="comment">//                //只有当item的tag等于其正确的url时，才设置为正确的图片</span></div><div class="line"><span class="comment">//                mImageView.setImageBitmap(bitmap);</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line">            <span class="comment">////////////V3.0/////////////</span></div><div class="line">            ImageView imageView = (ImageView) mListView.findViewWithTag(mUrl);</div><div class="line">            <span class="keyword">if</span>(imageView!=<span class="keyword">null</span> &amp;&amp; bitmap!=<span class="keyword">null</span>)&#123;</div><div class="line">                imageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">            mAsyncTask.remove(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据图片的URL地址从网络上获取图片的Bitmap对象</div><div class="line">     * <span class="doctag">@param</span> picUrl 图片的网络地址</div><div class="line">     * <span class="doctag">@return</span> 图片的Bitmap对象</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> <span class="function">Bitmap <span class="title">getBitmapFromURl</span><span class="params">(String picUrl)</span></span>&#123;</div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        HttpURLConnection connection = <span class="keyword">null</span>;</div><div class="line">        InputStream inputStream = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//解析url字符串，得到URL对象</span></div><div class="line">            URL url = <span class="keyword">new</span> URL(picUrl);</div><div class="line">            <span class="comment">//获取HttpURLConnection对象</span></div><div class="line">            connection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="comment">//获得经BufferedInputStream封装的InputStream对象</span></div><div class="line">            inputStream = <span class="keyword">new</span> BufferedInputStream(connection.getInputStream());</div><div class="line">            <span class="comment">//读取InputStream，获得图片的Bitmap对象</span></div><div class="line">            bitmap = BitmapFactory.decodeStream(inputStream);</div><div class="line">            <span class="comment">//关闭连接，释放资源</span></div><div class="line">            connection.disconnect();</div><div class="line">            <span class="keyword">return</span> bitmap;</div><div class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                inputStream.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    *</div><div class="line">    * 该方法用于初始化LruCache</div><div class="line">    *</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initLruCache</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//获取最大可用内存</span></div><div class="line">        <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) Runtime.getRuntime().maxMemory();</div><div class="line">        <span class="comment">//设置可用的cache内存大小</span></div><div class="line">        <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">4</span>;</div><div class="line">        <span class="comment">//初始化LruCache，指定缓存大小</span></div><div class="line">        mLruCache = <span class="keyword">new</span> LruCache&lt;String,Bitmap&gt;(cacheSize)&#123;</div><div class="line"></div><div class="line">            <span class="comment">//该方法用于获取每个将要保存的对象的大小</span></div><div class="line">            <span class="comment">//在每次存入缓存时调用该方法</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> value.<span class="title">getByteCount</span><span class="params">()</span></span>;<span class="comment">//保存bitmap的实际大小</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//保存数据到lruCache缓存中</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">addBitmapToLruCache</span><span class="params">(String url, Bitmap value)</span></span>&#123;</div><div class="line">        <span class="comment">//判断当前缓存中是否存在该图片</span></div><div class="line">        <span class="keyword">if</span>(getBitmapFromLurCache(url) == <span class="keyword">null</span>)&#123;</div><div class="line">            mLruCache.put(url,value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//从lruCache缓存中获取数据</span></div><div class="line">    <span class="keyword">private</span> <span class="function">Bitmap <span class="title">getBitmapFromLurCache</span><span class="params">(String url)</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mLruCache.<span class="title">get</span><span class="params">(url)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//加载从指定开始和结束位置的所有图片</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">loadImagesFromStartToEnd</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</div><div class="line">            String url = ListViewShowImagesBestPlan.URLS[i];</div><div class="line"></div><div class="line">            <span class="comment">//从缓存中取出对应的图片</span></div><div class="line">            Bitmap bitmap = getBitmapFromLurCache(url);</div><div class="line">            <span class="keyword">if</span>(bitmap == <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="comment">//缓存中不存在该图片，则使用异步进行下载</span></div><div class="line">                ImageAsyncTask task = <span class="keyword">new</span> ImageAsyncTask(url);</div><div class="line">                task.execute(url);</div><div class="line">                mAsyncTask.add(task);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//缓存中存在该图片,则直接为imageView设置图片</span></div><div class="line">                ImageView imageView = (ImageView) mListView.findViewWithTag(url);</div><div class="line">                imageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//取消异步下载任务</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">cancelAllAsyncTask</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(mAsyncTask != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(ImageAsyncTask task : mAsyncTask)&#123;</div><div class="line">                task.cancel(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="listView-展示图片的最佳实践代码"><a href="#listView-展示图片的最佳实践代码" class="headerlink" title="listView 展示图片的最佳实践代码"></a>listView 展示图片的最佳实践代码</h2><p>采用万能适配器、异步加载、滚动优化来完成listView显示内容的最佳实践<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewShowImagesBestPlan</span> <span class="keyword">extends</span> <span class="title">CommonAdapter</span>&lt;<span class="title">NewsBean</span>&gt; <span class="keyword">implements</span> <span class="title">AbsListView</span>.<span class="title">OnScrollListener</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageLoaderFromURLByAsyncTask mImageLoaderFromURLByAsyncTask;</div><div class="line">    <span class="comment">//private ImageLoaderFromURLByThread mImageLoaderFromURLByThread;</span></div><div class="line">    <span class="comment">//当前屏幕中的第一个可见项和最后一个可见项</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mStart,mEnd;</div><div class="line">    <span class="comment">//保存listView中所有item的图片的url地址的数组</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] URLS;</div><div class="line">    <span class="comment">//判断是否是第一次启动ListView</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mFirst;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewShowImagesBestPlan</span><span class="params">(Context context, List&lt;NewsBean&gt; data, <span class="keyword">int</span> layoutId, ListView listView)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, data, layoutId);</div><div class="line">        <span class="comment">//初始化mImageLoaderFromURL,保证只有一个lruCache缓存，从而起到缓存所有图片的效果</span></div><div class="line">        mImageLoaderFromURLByAsyncTask = <span class="keyword">new</span> ImageLoaderFromURLByAsyncTask(listView);</div><div class="line">        <span class="comment">//mImageLoaderFromURLByThread =  new ImageLoaderFromURLByThread(listView);</span></div><div class="line"></div><div class="line">        URLS = <span class="keyword">new</span> String[data.size()];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size(); i++) &#123;</div><div class="line">            URLS[i] = data.get(i).getNewsImgUrl();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//注册滚动事件</span></div><div class="line">        listView.setOnScrollListener(<span class="keyword">this</span>);</div><div class="line">        mFirst = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//万能适配器</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemAttrsValue</span><span class="params">(CommonViewHolder holder, NewsBean bean)</span> </span>&#123;</div><div class="line"></div><div class="line">        holder.setTextViewText(R.id.tv_title,bean.getNewsTitle());</div><div class="line">        holder.setTextViewText(R.id.tv_content,bean.getNewsContent());</div><div class="line">        <span class="comment">//显示默认图片</span></div><div class="line">        holder.setImageViewImageResource(R.id.img,R.mipmap.ic_launcher);</div><div class="line"></div><div class="line">        <span class="comment">//使用Tag解决图片显示错位的bug——————因convertView的复用存在缓存图片导致,正确的item先显示缓存图片，再显示正确的图片</span></div><div class="line">        String url = bean.getNewsImgUrl();</div><div class="line">        holder.getView(R.id.img).setTag(url);<span class="comment">//将url作为各Item的身份验证,绑定各Item与其正确的url</span></div><div class="line"></div><div class="line">        <span class="comment">//使用Thread异步加载图片——————未使用缓存技术、滚动优化</span></div><div class="line">        <span class="comment">//mImageLoaderFromURLByThread.getImageFromURLByThread((ImageView)holder.getView(R.id.img),url);</span></div><div class="line"></div><div class="line">        <span class="comment">//使用AsyncTask异步加载图片</span></div><div class="line">        <span class="comment">//使用缓存技术解决只要上下滚动item，图片就得重复下载的bug————因convertView的复用</span></div><div class="line">        <span class="comment">//使用LruCache缓存算法将已下载的图片缓存起来，避免重复下载图片</span></div><div class="line">        mImageLoaderFromURLByAsyncTask.getImageFromURLByAsyncTask((ImageView)holder.getView(R.id.img),url);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//高效滚动优化————滚动停止时再加载可见项，而不是随时加载</span></div><div class="line">    <span class="comment">// 1、ListView滑动停止后才加载可见项</span></div><div class="line">    <span class="comment">// 2、ListView滑动时，取消所有加载项————在滑动过程中不加载任何Item</span></div><div class="line"></div><div class="line">    <span class="comment">//在滑动的状态切换时调用</span></div><div class="line">    <span class="comment">//虚拟机测试时，onScrollStateChanged()触发的条件是用鼠标点击屏幕拖动，不是滚轮滚动</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"BestPlan"</span>,<span class="string">"onScrollStateChanged"</span> + scrollState);</div><div class="line">        <span class="keyword">if</span>(scrollState == SCROLL_STATE_IDLE)&#123;</div><div class="line">            <span class="comment">//滑动处于停止状态，加载可见项</span></div><div class="line">            mImageLoaderFromURLByAsyncTask.loadImagesFromStartToEnd(mStart,mEnd);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//停止所有下载任务</span></div><div class="line">            mImageLoaderFromURLByAsyncTask.cancelAllAsyncTask();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//在滑动过程中都会调用</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123;</div><div class="line">        <span class="comment">//在滑动过程中停止下载，不加载任何Item</span></div><div class="line"></div><div class="line">        <span class="comment">//当前屏幕中的第一个可见项和最后一个可见项</span></div><div class="line">        mStart = firstVisibleItem;</div><div class="line">        mEnd = firstVisibleItem +visibleItemCount;</div><div class="line"></div><div class="line">        <span class="comment">//解决首次进入ListView未加载图片的bug ———— 因onScrollStateChanged在初始进入ListView时不会调用</span></div><div class="line">        <span class="keyword">if</span>(mFirst &amp;&amp; visibleItemCount&gt;<span class="number">0</span>)&#123; <span class="comment">//判断是否是第一次启动</span></div><div class="line">            mImageLoaderFromURLByAsyncTask.loadImagesFromStartToEnd(mStart,mEnd);</div><div class="line">            mFirst = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android学习八————AsyncTask异步任务一之如何使用AsyncTask]]></title>
      <url>https://aiolos123.github.io/2016/10/11/8-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8AsyncTask/</url>
      <content type="html"><![CDATA[<p>本节课程学习AsyncTask异步任务一之AsyncTask如何使用<br>视频来源：<a href="http://www.imooc.com/learn/377" target="_blank" rel="external">http://www.imooc.com/learn/377</a><br>文字来源：<a href="http://www.cnblogs.com/caobotao/p/5020857.html" target="_blank" rel="external">http://www.cnblogs.com/caobotao/p/5020857.html</a></p>
<p>下一节课程学习AsyncTask异步任务二之异步加载<br><a id="more"></a></p>
<h2 id="AsyncTask基本构成"><a href="#AsyncTask基本构成" class="headerlink" title="AsyncTask基本构成"></a>AsyncTask基本构成</h2><p>AsyncTask是基于线程池实现的,当一个线程没有结束时,后面的线程是不能执行的.</p>
<p>AsyncTask即异步任务,是Android给我们提供的一个处理异步任务的类.通过此类,可以实现UI线程和后台线程进行通讯,后台线程执行异步任务,并把结果返回给UI线程.</p>
<p>1、为什么需要AsyncTask</p>
<pre><code>- Android是单线程模型、多线程的操作系统
- Android中只有UI线程即主线程才能进行对UI的更新操作，而其他线程是不能直接操作UI的，这样的好处是保证了UI的稳定性和准确性，避免多个线程同时对UI进行操作而造成UI的混乱.
- 耗时操作放在非主线程中执行
- 如果耗时操作放到主线程去执行,就可能会造成后面任务的阻塞.Android会检查这种阻塞，如果阻塞时间过长，就会抛出ANR无法响应的异常
</code></pre><p>2、AsyncTask的用途</p>
<pre><code>- 在子线程中更新UI
- 封装、简化异步操作
</code></pre><p>提到异步任务,我们能想到用线程,线程池去实现.确实,Android给我们提供了主线程与其他线程通讯的机制.但同时,Android也给我们提供了一个封装好的组件–AsyncTask.利用AsyncTask,我们可以很方便的实现异步任务处理.AsyncTask可以在子线程中更新UI,也封装简化了异步操作.使用线程,线程池处理异步任务涉及到了线程的同步,管理等问题.而且当线程结束的时候还需要使用Handler去通知主线程来更新UI.而AsyncTask封装了这一切,使得我们可以很方便的在子线程中更新UI.</p>
<p>3、构建AsyncTask子类的参数<br>    AsyncTask<params,progress,result>是一个抽象类，通常用于被继承，继承AsyncTask需要指定如下三个泛型参数：<br>    Params：启动任务时输入参数的类型<br>    Progress：后台任务执行中返回进度值的类型<br>    Result: 后台执行任务完成后返回结果的类型<br>4、构建AsyncTask子类的回调方法<br>    doInBackground():  必须重写，异步执行后台线程将要完成的任务，所有耗时操作都在这个方法中进行<br>    onPreExecute(): 执行后台耗时操作前被调用，通常用于完成一些初始化操作<br>    onPostExecute(): 当doInBackground()完成后，系统会自动调用onPostExecute()方法，并将doInBackground()返回返回的值传给该方法，通过此方法进行UI的更新.<br>    onProgressUpdate(): 在oInBackground()方法中调用pulishProgress()方法更新任务的执行进度后，就会触发该方法，通过此方法我们可以知晓任务的完成进度.<br>5、AsyncTask中方法的调用顺序：<br>    onPreExecute –&gt; doInBackground ( 如在其内调用pulishProgress()–&gt; onProgressUpdate ) –&gt; onPostExecute</params,progress,result></p>
<h2 id="AsyncTask的使用示例"><a href="#AsyncTask的使用示例" class="headerlink" title="AsyncTask的使用示例"></a>AsyncTask的使用示例</h2><p>下面通过代码演示一个典型的异步处理的实例–加载网络图片.网络操作作为一个不稳定的耗时操作,从4.0开始就被严禁放入主线程中.所以在显示一张网络图片时,我们需要在异步处理中下载图片,并在UI线程中设置图片.<br>1.ImageAsyncTask.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ImageAsyncTask</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">ImageView</span> img;</div><div class="line">    <span class="keyword">private</span> <span class="type">ProgressBar</span> bar;</div><div class="line">    <span class="keyword">private</span> static <span class="type">String</span> <span class="type">URL</span>=<span class="string">"http://img.my.csdn.net/uploads/201504/12/1428806103_9476.png"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.image);</div><div class="line"></div><div class="line">        img = (<span class="type">ImageView</span>) findViewById(<span class="type">R</span>.id.img);</div><div class="line">        bar = (<span class="type">ProgressBar</span>) findViewById(<span class="type">R</span>.id.bar);</div><div class="line"></div><div class="line">        <span class="comment">//1、通过调用execute方法开始处理异步任务(相当于线程中的start方法),并设置传入的参数</span></div><div class="line">        <span class="keyword">new</span> <span class="type">MyAsyncTask</span>().execute(<span class="type">URL</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//2、创建异步任务内部类MyAsyncTask</span></div><div class="line">    <span class="comment">//泛型参数为:URL类型，进度值类型，返回值类型</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask&lt;String</span>,<span class="title">Void</span>,<span class="title">Bitmap&gt;</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//3、与UI线程通信,onPreExecute用于异步处理前的初始化操作</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> void onPreExecute() &#123;</div><div class="line">            <span class="keyword">super</span>.onPreExecute();</div><div class="line">            <span class="comment">//显示progressBar</span></div><div class="line">            bar.setVisibility(<span class="type">View</span>.<span class="type">VISIBLE</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//4、在doInBackground方法中进行异步任务的处理.进行耗时操作</span></div><div class="line">        <span class="comment">//String... params为可变长的参数</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> <span class="type">Bitmap</span> doInBackground(<span class="type">String</span>... params) &#123;</div><div class="line">            <span class="comment">//1、获取传递进来的URL参数</span></div><div class="line">            <span class="type">String</span> url = params[<span class="number">0</span>];</div><div class="line">            <span class="comment">//初始化返回值对象</span></div><div class="line">            <span class="type">Bitmap</span> bitmap = <span class="literal">null</span>;</div><div class="line">            <span class="comment">//定义网络连接对象</span></div><div class="line">            <span class="type">URLConnection</span> connection;</div><div class="line">            <span class="comment">//用于获取数据的输入流</span></div><div class="line">            <span class="type">InputStream</span> inputStream;</div><div class="line"></div><div class="line">            <span class="comment">//2、try中的代码为访问网络的耗时操作，要在异步线程中处理</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//将url地址中的图片解析成bitmap对象</span></div><div class="line">                connection = <span class="keyword">new</span> <span class="type">URL</span>(url).openConnection();</div><div class="line">                <span class="comment">//获取输入流</span></div><div class="line">                inputStream = connection.getInputStream();</div><div class="line">                <span class="comment">//包装输入流</span></div><div class="line">                <span class="type">BufferedInputStream</span> bufferedInputStream = <span class="keyword">new</span> <span class="type">BufferedInputStream</span>(inputStream);</div><div class="line">                <span class="type">Thread</span>.sleep(<span class="number">3000</span>);</div><div class="line">                <span class="comment">//3、通过decodeStream将输入流解析成bitmap对象</span></div><div class="line">                bitmap = <span class="type">BitmapFactory</span>.decodeStream(bufferedInputStream);</div><div class="line">                <span class="comment">//关闭输入流</span></div><div class="line">                inputStream.close();</div><div class="line">                bufferedInputStream.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//4、将Bitmap对象作为返回值传递给onPostExecute()</span></div><div class="line">            <span class="keyword">return</span> bitmap;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//5、与UI线程通信,onPostExecute用于UI的更新.此方法的参数为doInBackground方法返回的值.</span></div><div class="line">        <span class="comment">//onPostExecute()运行在主线程,从而可以操作UI,显示图片</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> void onPostExecute(<span class="type">Bitmap</span> bitmap) &#123;</div><div class="line">            <span class="keyword">super</span>.onPostExecute(bitmap);</div><div class="line">            <span class="comment">//隐藏progressBar</span></div><div class="line">            bar.setVisibility(<span class="type">View</span>.<span class="type">GONE</span>);</div><div class="line">            <span class="comment">//在该方法中操作UI，更新imageView的图像</span></div><div class="line">            img.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、image.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/img"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/bar"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、MainActivity.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//点击按钮跳转到ImageAsyncTask界面进行图片加载</span></div><div class="line">    public void loadingImage(<span class="type">View</span> v)&#123;</div><div class="line">            startActivity(<span class="keyword">new</span> <span class="type">Intent</span>(<span class="keyword">this</span>,<span class="type">ImageAsyncTask</span>.<span class="keyword">class</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="AsyncTask模拟进度条"><a href="#AsyncTask模拟进度条" class="headerlink" title="AsyncTask模拟进度条"></a>AsyncTask模拟进度条</h2><p>1、MyProgressBar.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyProgressBar</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">ProgressBar</span> progressBar;</div><div class="line">    <span class="keyword">private</span> <span class="type">MyAsyncTask</span> mTask;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.progressbar);</div><div class="line"></div><div class="line">        progressBar = (<span class="type">ProgressBar</span>)findViewById(<span class="type">R</span>.id.hbar);</div><div class="line">        <span class="comment">//启动异步任务</span></div><div class="line">        mTask = <span class="keyword">new</span> <span class="type">MyAsyncTask</span>();</div><div class="line">        mTask.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">      点击'加载进度条'按钮后程序看起来运行正常.但是如果接着点击BACK键,</div><div class="line">      紧接着再次点击'加载进度条'按钮,会发现进度条的进度一直是零,过了一会才开始更新.这是为什么呢?</div><div class="line">       因为AsyncTask是基于线程池进行实现的,当一个线程没有结束时,后面的线程是不能执行的.</div><div class="line">       所以必须等到第一个task的for循环结束后,才能执行第二个task.</div><div class="line">       我们知道,当点击BACK键时会调用Activity的onPause()方法.</div><div class="line">       为了解决这个问题,我们需要在Activity的onPause()方法中将正在执行的task标记为cancel状态,</div><div class="line">       在doInBackground方法中进行异步处理时判断是否是cancel状态来决定是否取消之前的task.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onPause() &#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        <span class="comment">//异步任务正在执行，则cancel</span></div><div class="line">        <span class="keyword">if</span>(mTask!=<span class="literal">null</span> &amp;&amp; mTask.getStatus() == <span class="type">AsyncTask</span>.<span class="type">Status</span>.<span class="type">RUNNING</span>)&#123;</div><div class="line">            <span class="comment">//cancel()方法只是将对应的AsyncTask标记为cancel状态,并不是真正的取消线程的执行</span></div><div class="line">            <span class="comment">//而且也没有办法直接取消一个线程的执行</span></div><div class="line">            mTask.cancel(<span class="literal">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//异步任务内部类MyAsyncTask</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask&lt;Void</span>,<span class="title">Integer</span>,<span class="title">Void&gt;</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//模拟进度更新</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> <span class="type">Void</span> doInBackground(<span class="type">Void</span>... params) &#123;</div><div class="line">            <span class="comment">//使用for循环来模拟进度条的进度.</span></div><div class="line">            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</div><div class="line">                <span class="comment">//如果task是cancel状态,则终止for循环,以进行下个task的执行.</span></div><div class="line">                <span class="keyword">if</span>(isCancelled())&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//通过publishProgress方法传递进度值以进行进度条的更新.</span></div><div class="line">                <span class="comment">//调用publishProgress方法将自动触发onProgressUpdate方法来进行进度条的更新.</span></div><div class="line">                publishProgress(i);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">//通过线程休眠模拟耗时操作</span></div><div class="line">                    <span class="type">Thread</span>.sleep(<span class="number">300</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//接收进度值</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">protected</span> void onProgressUpdate(<span class="type">Integer</span>... values) &#123;</div><div class="line">            <span class="keyword">super</span>.onProgressUpdate(values);</div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="keyword">if</span>(isCancelled())&#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//获取publishProgress方法传过来的值进行进度条的更新.并设置progressBar的进度值</span></div><div class="line">            progressBar.setProgress(values[<span class="number">0</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、progressbar.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">        <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/hbar"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、MainActivity.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//点击按钮跳转到MyProgressBar界面进行进度条加载</span></div><div class="line">    public void updateProgressValue(<span class="type">View</span> v)&#123;</div><div class="line">        startActivity(<span class="keyword">new</span> <span class="type">Intent</span>(<span class="keyword">this</span>,<span class="type">MyProgressBar</span>.<span class="keyword">class</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用AsyncTask的注意事项"><a href="#使用AsyncTask的注意事项" class="headerlink" title="使用AsyncTask的注意事项"></a>使用AsyncTask的注意事项</h2><p>① 必须在UI线程中创建AsyncTask的实例.<br>② 只能在UI线程中调用AsyncTask的execute方法.<br>③ AsyncTask被重写的四个方法是系统自动调用的,不应手动调用.<br>④ 每个AsyncTask只能被执行一次(即execute方法只能被执行一次),多次执行将会引发异常.<br>⑤ AsyncTask的四个方法,只有doInBackground方法是运行在其他线程中,其他三个方法都运行在UI线程中,也就说其他三个方法都可以进行UI的更新操作.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android学习七————BaseAdapter的使用与优化]]></title>
      <url>https://aiolos123.github.io/2016/10/10/7-BaseAdapter%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>从本节课程开始，将按照android工程师路径(<a href="http://www.imooc.com/course/programdetail/pid/33)学习后续内容" target="_blank" rel="external">http://www.imooc.com/course/programdetail/pid/33)学习后续内容</a></p>
<p>本课程深入的讲解BaseAdapter的使用与优化<br>学习来源：<a href="http://www.imooc.com/learn/365" target="_blank" rel="external">http://www.imooc.com/learn/365</a><br><a id="more"></a></p>
<h2 id="ListView的优化方向"><a href="#ListView的优化方向" class="headerlink" title="ListView的优化方向"></a>ListView的优化方向</h2><p>1.复用已经生成的convertView； ————本节内容<br>2.添加viewHolder类； ——————本节内容<br>    编写ListView的思路：<br>       目的：要展示数据集List<t>:<br>       步骤：为该数据集编写一个ListView，<br>             为每个ListView编写一个继承自BaseAdapter的自定义Adapter，<br>             并在这个自定义Adapter类内中编写viewHolder类，用于对应ListView Item中的控件，以提高控件的查询效率；<br>3.缓存数据（图片缓存）；———— 见《Android异步加载》一节<br>4.分页加载  ————见《Android的ListView分页功能》<a href="http://www.imooc.com/learn/136" target="_blank" rel="external">http://www.imooc.com/learn/136</a><br>                和《Android的ListView下拉刷新》<a href="http://www.imooc.com/learn/135" target="_blank" rel="external">http://www.imooc.com/learn/135</a><br>5.万能适配器————见《 Android-打造万能适配器》<a href="http://www.imooc.com/learn/372" target="_blank" rel="external">http://www.imooc.com/learn/372</a><br>    viewHolder类的缺点：一个ListView类对应一个自定义Adapter类，对应一个ViewHolder类；如果项目中出现多个ListView，则需要多个自定义Adapter类和ViewHolder类；</t></p>
<pre><code>由于多个自定义Adapter类和ViewHolder类的实现、逻辑都是类似的，因此可以将其抽取为公共的、通用的Adapter类和ViewHolder类
</code></pre><h2 id="ListView缓存机制"><a href="#ListView缓存机制" class="headerlink" title="ListView缓存机制"></a>ListView缓存机制</h2><p>什么是数据适配器：<br>    应用适配器模式,解耦数据源与显示<br><img src="http://ocej2soxx.bkt.clouddn.com/baseAdapter.jpg" alt="dataSource、adapter、listView三者的关系"></p>
<p>ListView显示与缓存机制：</p>
<pre><code>ListView中的每一个Item显示都需要Adapter调用一次getView的方法，这个方法会传入一个convertView的参数，返回的View就是这个Item显示的View。如果当Item的数量足够大，再为每一个Item都创建一个View对象，必将占用很多内存，创建View对象（mInflater.inflate(R.layout.lv_item, null);从xml中生成View，这是属于IO操作）也是耗时操作，所以必将影响性能。Android提供了一个叫做Recycler(反复循环器)的构件，就是当ListView的Item从上方滚出屏幕视角之外，对应Item的View会被缓存到Recycler中，相应的会从下方生成一个Item，而此时调用的getView中的convertView参数就是滚出屏幕的Item的View，所以说如果能重用这个convertView，就会大大改善性能。
</code></pre><p>(引用自<a href="http://www.cnblogs.com/itstudent/p/3729117.html" target="_blank" rel="external">http://www.cnblogs.com/itstudent/p/3729117.html</a>)</p>
<pre><code>需要时从Recycler缓冲池取出显示item，显示完被回收到Recycler缓冲池
</code></pre><h2 id="BaseAdapter的使用"><a href="#BaseAdapter的使用" class="headerlink" title="BaseAdapter的使用"></a>BaseAdapter的使用</h2><p>BaseAdapter的常用方法：</p>
<pre><code>public int getCount()   适配器中数据集中数据的总个数
public Object getItem(int position) 获取数据集中与指定索引对应的数据项
public long getItemId(int position) 获取指定行对应的ID
public View getView(int position, View convertView, ViewGroup parent) 获取每一个Item的view
</code></pre><h3 id="BaseAdapter的使用代码示例-使用BaseAdapter的框架"><a href="#BaseAdapter的使用代码示例-使用BaseAdapter的框架" class="headerlink" title="BaseAdapter的使用代码示例(使用BaseAdapter的框架)"></a>BaseAdapter的使用代码示例(使用BaseAdapter的框架)</h3><p>1、创建item布局xml文件，指定item的显示布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"64dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"64dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/img"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"4dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Title"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_title"</span></div><div class="line">            <span class="attr">android:maxLines</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"15sp"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Content"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"10sp"</span></div><div class="line">            <span class="attr">android:maxLines</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_content"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、创建主布局xml文件，在其中声明listView控件，用于在程序中动态包含item<br>3、创建ItemBean类，为item布局的实体类，封装item布局中的控件属性。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 在该Bean中封装显示item布局的所有属性，分别对应item对象要显示的imgid、title、content。</div><div class="line"> * 每个Bean对象就对应ListView中的一行数据，即一个Item对象，这种方式在ListView中被广泛应用</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="symbol">public</span> class <span class="keyword">ItemBean </span>&#123;</div><div class="line"></div><div class="line">    //在该<span class="keyword">Bean中封装三个属性，分别item对象要显示的imgid、title、content</span></div><div class="line">    private int <span class="keyword">itemImgId;</span></div><div class="line">    private <span class="keyword">String </span><span class="keyword">itemTitle;</span></div><div class="line">    private <span class="keyword">String </span><span class="keyword">itemContent;</span></div><div class="line"></div><div class="line">    //初始化<span class="keyword">item对象要显示的img、title、content三个属性的构造方法</span></div><div class="line">    public <span class="keyword">ItemBean(int </span><span class="keyword">itemImgId, </span><span class="keyword">String </span><span class="keyword">itemTitle, </span><span class="keyword">String </span><span class="keyword">itemContent) </span>&#123;</div><div class="line">        this.<span class="keyword">itemImgId </span>= <span class="keyword">itemImgId;</span></div><div class="line">        this.<span class="keyword">itemTitle </span>= <span class="keyword">itemTitle;</span></div><div class="line">        this.<span class="keyword">itemContent </span>= <span class="keyword">itemContent;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //getter和setter方法</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、创建继承自BaseAdapter的子类，并实现BaseAdapter的4个方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;ItemBean&gt; myList;</div><div class="line">    <span class="keyword">private</span> LayoutInflater mInflater;</div><div class="line"></div><div class="line">    <span class="comment">//在构造方法中初始化数据myList,将其关联到传入的数据集参数list上</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(Context context,List&lt;ItemBean&gt; list)</span> </span>&#123;</div><div class="line">        mInflater = LayoutInflater.from(context);</div><div class="line">        myList = list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回数据集中数据的总个数</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> myList.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取数据集中与指定索引对应的数据项</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> myList.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回数据集中指定索引对应的数据项ID</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 以下内容引用自：http://www.cnblogs.com/itstudent/p/3729117.html</div><div class="line">     *</div><div class="line">     * 如果一个屏幕最多显示7个Item，当Item1滑出屏幕，此时Item1 的View被添加进Recycler中，</div><div class="line">     * 相应的在下部要产生一个Item8，这时调用getView方法，convertView参数就是Item1的View。</div><div class="line">     *</div><div class="line">     *</div><div class="line">     * 在getView方法中的操作常规是这样的：</div><div class="line">     *      先从xml中创建view对象（通过inflate操作，我们采用了重用convertView方法优化），</div><div class="line">     *      然后在这个view用findViewById，找到每一个子View，如：一个TextView等。</div><div class="line">     *      这里的findViewById操作是一个树查找过程，也是一个耗时的操作，所以这里也需要优化</div><div class="line">     * 使用ViewHolder优化后的getView方法中的操作是这样的：</div><div class="line">     *      使用ViewHolder类的对象，把每一个子View如一个TextView都放在Holder中，当第一次创建convertView对象时，</div><div class="line">     *      把这些子view通过findViewById找出来。然后用convertView的setTag将viewHolder设置到Tag中，</div><div class="line">     *      以便系统第二次绘制ListView时从Tag中取出viewHolder。当第二次重用convertView时，</div><div class="line">     *      只需从convertView中getTag取出来就可以。</div><div class="line">     *</div><div class="line">     *</div><div class="line">     * </div><div class="line">     *  Item固定高度的情况：</div><div class="line">     *  一、程序启动，第一屏的全部10个Item调用getView方法来显示，这时的convertView都是null，</div><div class="line">     *  因为没有任何Item被滑出屏幕缓存到Recycler中。</div><div class="line"></div><div class="line">     *  二、继续向上滑动屏幕，当Item1，Item2，Item3.....陆续滑出屏幕之后，</div><div class="line">     *  这些Item的View缓存到Recycler中准备重用。</div><div class="line"></div><div class="line">     *  三、把屏幕往回滚，重新滚到前面</div><div class="line">     *  屏幕从显示Item 17-Item26滚到显示Item13-Item22。</div><div class="line">     *  分析这个过程，当向上滚动一个Item时，Item26消失，Item16出现，</div><div class="line">     *  所以Item16又将从Recycler中获取Item26的View并重用，观察Log，的确如此(Item26和Item16都使用的是5290184c的View)，其他依次类推。</div><div class="line">     *</div><div class="line">     *</div><div class="line">     *  仔细分析，有这样一个规律：无论怎么重用convertView，</div><div class="line">     *  1、一个position的Item永远使用一个view。（比如此例中Item13 永远显示的是 5272fb00的View）</div><div class="line">     *  2、总有一个消失的item和一个显示的item使用同一个View。（如Item26和Item16都使用的是5290184c的View）</div><div class="line">     *  3、最终屏幕上就只是这10个View反复循环重用了（因为屏幕最多显示10个Item）</div><div class="line">     *  4、调用getView()的convertView参数总是刚退出屏幕的item的View，同时该view被缓存到Recycler中</div><div class="line">     *  5、被缓存到Recycler中的view将会重用到将要显示到屏幕的item上</div><div class="line"></div><div class="line"></div><div class="line">     *  Item高度不固定的情况</div><div class="line">     *  一、因为没有固定的Item高度，无法计算一个屏幕中能够显示的最大高度，系统会会先创建一个View，</div><div class="line">     *  第一轮是用这个View来试探能放多少个item，试探出结果可以放3个Item，</div><div class="line">     *  所以第二轮的0-2才是真正创建的View，屏幕上显示了3个Item。</div><div class="line">     *  当往下滚时，Item0没有完全出去，下面又来了个Item3，所以这时的Item又创建了一个View，</div><div class="line">     *  屏幕上此时显示4个Item。之后4个Item就是最多显示的数量，再往上滚动，</div><div class="line">     *  convertView就开始重用了，Item4和Item0的View是同一个对象。</div><div class="line"></div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> position   将要显示的view的索引</div><div class="line">     * <span class="doctag">@param</span> convertView   将要回收的view</div><div class="line">     * <span class="doctag">@param</span> parent</div><div class="line">     * <span class="doctag">@return</span> 返回数据集中每一项的显示内容，即每一个item的显示view</div><div class="line">     */</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        <span class="comment">//getView的具体实现分为逗比式、普通式、文艺式，建议使用如下的文艺式</span></div><div class="line">        <span class="comment">//不仅利用了ListView的缓存，更通过ViewHolder内部类来实现显示数据的视图的缓存，</span></div><div class="line">        <span class="comment">//避免多次通过findViewById寻找控件导致的资源浪费</span></div><div class="line"></div><div class="line">        ViewHolder viewHolder = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(convertView==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//convertView为空表示其未被实例化，缓存池Recycler中也无该convertView缓存,需要创建convertView</span></div><div class="line">            <span class="comment">//创建convertView，避免大量创建view引起资源浪费</span></div><div class="line">            <span class="comment">//在getView()方法中，使用LayoutInflater对象将一个xml布局文件转换成view布局对象</span></div><div class="line">            convertView =  mInflater.inflate(R.layout.item,<span class="keyword">null</span>);</div><div class="line">            viewHolder = <span class="keyword">new</span> ViewHolder();</div><div class="line"></div><div class="line">            <span class="comment">//2、将convertView的三个控件保存到viewHolder对象中，并通过setTag()将ViewHolder对象与convertView绑定</span></div><div class="line">            viewHolder.img = (ImageView)convertView.findViewById(R.id.img);</div><div class="line">            viewHolder.title = (TextView)convertView.findViewById(R.id.title);</div><div class="line">            viewHolder.content = (TextView)convertView.findViewById(R.id.content);</div><div class="line">            <span class="comment">//通过setTag()将ViewHolder对象与convertView绑定</span></div><div class="line">            <span class="comment">//将viewHolder设置到convertView的Tag中，</span></div><div class="line">            <span class="comment">//以便系统第二次绘制ListView时直接从Recycler根据Tag中取出viewHolder</span></div><div class="line">            convertView.setTag(viewHolder);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//3、当convertView不为空时，表示convertView已保存到Recycler中，可以重用convertView</span></div><div class="line">            <span class="comment">//在重用的convertView中根据Tag中取出viewHolder</span></div><div class="line">            viewHolder = (ViewHolder)convertView.getTag();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//从数据源中取出数据赋值给3个控件对象</span></div><div class="line">        <span class="comment">//4、通过ViewHolder对象的成员变量为item的各子view设置显示内容</span></div><div class="line">        <span class="comment">//从而避免使用findViewById来寻找控件</span></div><div class="line">        ItemBean bean = myList.get(position);</div><div class="line">        viewHolder.img.setImageResource(bean.getItemImgId());</div><div class="line">        viewHolder.title.setText(bean.getItemTitle());</div><div class="line">        viewHolder.content.setText(bean.getItemContent());</div><div class="line">        <span class="keyword">return</span> convertView;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//1、创建ViewHolder内部类，声明的成员变量对应item布局文件中的控件；</span></div><div class="line">    <span class="comment">//这样做为了避免重复调用findViewById操作</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</div><div class="line">        <span class="comment">//声明成员变量，对应item布局文件中的三个控件</span></div><div class="line">        <span class="keyword">public</span> ImageView img;</div><div class="line">        <span class="keyword">public</span> TextView title;</div><div class="line">        <span class="keyword">public</span> TextView content;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在主Activity中，创建数据源并绑定在界面上显示出来<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * ListView的原理：ListView中的每一个Item显示都需要Adapter调用一次getView方法，</div><div class="line"> * 这个方法会传入一个convertView的参数，返回的View就是这个Item显示的View。</div><div class="line"> * 如果当Item的数量足够大，再为每一个Item都创建一个View对象，必将占用很多内存，</div><div class="line"> * 创建View对象（mInflater.inflate(R.layout.lv_item, null);从xml中生成View，这是属于IO操作）</div><div class="line"> * 也是耗时操作，所以必将影响性能。Android提供了一个叫做Recycler(反复循环器)的构件，</div><div class="line"> * 就是当ListView的Item从上方滚出屏幕视角之外，对应Item的View会被缓存到Recycler中，</div><div class="line"> * 相应的会从下方生成一个Item，而此时调用的getView中的convertView参数就是滚出屏幕的Item的View，</div><div class="line"> * 所以说如果能重用这个convertView，就会大大改善性能。</div><div class="line"> *</div><div class="line"> */ </div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">//创建listView</span></div><div class="line">        ListView listView = (ListView)findViewById(R.id.lv);</div><div class="line">        </div><div class="line">        <span class="comment">//创建数据源</span></div><div class="line">        List&lt;ItemBean&gt; itemBeanList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">//生成20条模拟数据</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">            <span class="comment">//创建20个ItemBean对象并添加到itemBeanList中</span></div><div class="line">            itemBeanList.<span class="built_in">add</span>(<span class="keyword">new</span> ItemBean(R.mipmap.ic_launcher, <span class="string">"我是标题"</span>+i,<span class="string">"我是内容"</span>+i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//通过Adapter绑定数据源与ListView，生成显示界面</span></div><div class="line">        listView.setAdapter(<span class="keyword">new</span> MyAdapter(<span class="keyword">this</span>,itemBeanList));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结：ViewHolder优化BaseAdapter的思路"><a href="#总结：ViewHolder优化BaseAdapter的思路" class="headerlink" title="总结：ViewHolder优化BaseAdapter的思路"></a>总结：ViewHolder优化BaseAdapter的思路</h3><p>1、创建Bean对象，用于封装item的数据<br>2、在构造方法中初始化用于映射的数据List<br>3、创建ViewHolder内部类，创建布局映射关系，代表item对象<br>3、判断convertView，为空则创建并设置tag；否则通过tag来取出ViewHolder<br>4、给ViewHolder中的控件设置数据</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android入门六]]></title>
      <url>https://aiolos123.github.io/2016/09/18/learn-android-step-by-step-six/</url>
      <content type="html"><![CDATA[<p>本课程深入的讲解了Android中的四大组件、Service以及手势识别<br>学习来源：<a href="http://www.imooc.com/learn/179" target="_blank" rel="external">http://www.imooc.com/learn/179</a><br><a id="more"></a></p>
<h1 id="四大组件篇"><a href="#四大组件篇" class="headerlink" title="四大组件篇"></a>四大组件篇</h1><h2 id="四大组件之ContentProvider"><a href="#四大组件之ContentProvider" class="headerlink" title="四大组件之ContentProvider"></a>四大组件之ContentProvider</h2><p>Content Provider用于保存数据，以供其他程序通过Uri访问并进行增删改查等操作，类似于服务器的一个数据库。</p>
<h3 id="何为Uri"><a href="#何为Uri" class="headerlink" title="何为Uri"></a>何为Uri</h3><pre><code>- Uri是指通用资源标志符，
- 在android中的写法为：content://com.imooc.provider/music/#
- 即表示将要操作的数据
</code></pre><p><img src="http://ocej2soxx.bkt.clouddn.com/uri.jpg" alt="Uri的写法"></p>
<p>使用UriMatcher类来解析Uri<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UriMatcher.NO_MATCH表示不匹配任何路径的返回码</span></div><div class="line">UriMatcher matcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);</div><div class="line"></div><div class="line"><span class="comment">//matcher.addURI(B段,C段,返回code值)</span></div><div class="line">matcher.addURI(<span class="string">"com.pk.provider"</span>,<span class="string">"music"</span>,<span class="number">1</span>);</div><div class="line"><span class="comment">//往UriMatcher类的对象里添加一个拼接起来的Uri</span></div><div class="line"><span class="comment">//UriMatcher为一个Uri的容器，容器里面包含我们即将要操作的Uri</span></div><div class="line"><span class="comment">//如果通过match()方法匹配成功就返回code值</span></div><div class="line"></div><div class="line">matcher.<span class="keyword">match</span>(uri);</div><div class="line"><span class="comment">//首先与通过addURI()方法添加进来的Uri匹配</span></div><div class="line"><span class="comment">//匹配成功就返回设置的code值，反之返回UriMatcher.NO_MATCH常量(-1)</span></div></pre></td></tr></table></figure></p>
<h3 id="使用ContentResolver操作ContentProvider中的数据"><a href="#使用ContentResolver操作ContentProvider中的数据" class="headerlink" title="使用ContentResolver操作ContentProvider中的数据"></a>使用ContentResolver操作ContentProvider中的数据</h3><p>1、当外部应用需要对ContentProvider中的数据进行增、删、改、查操作时，可以使用ContentResolver类来完成；<br>2、使用Activity提供的getContentResolver()方法获取ContentResolver对象；<br>3、ContentResolver类提供了与ContentProvider类签名完全一致的四个方法：<br>    insert()  //用于往ContentProvider添加数据<br>    delete()  //用于从ContentProvider删除数据<br>    update()  //用于更新ContentProvider中的数据<br>    query()   //用于从ContentProvider中获取数据</p>
<p>4、使用系统自带的ContentProvider操作联系人的代码示例<br>注：<br>1、<strong>查询联系人需要在Manifest.xml中授权android.permission.READ_CONTACTS</strong><br>2、<strong>增加联系人需要在Manifest.xml中授权android.permission.WRITE_CONTACTS</strong><br>3、系统提供的ContentProvider有：<br>    查询联系人<br>    增加联系人<br>    短信的读取<br>    通话记录的读取<br>    多媒体的读取   图片、视频、音频<br>    等等</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.provider.<span class="type">ContactsContract</span>.<span class="type">CommonDataKinds</span>.<span class="type">Email</span>;</div><div class="line"><span class="keyword">import</span> android.provider.<span class="type">ContactsContract</span>.<span class="type">CommonDataKinds</span>.<span class="type">Phone</span>;</div><div class="line"><span class="keyword">import</span> android.provider.<span class="type">ContactsContract</span>.<span class="type">Contacts</span>;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//使用系统自带的ContentProvider</span></div><div class="line">        <span class="comment">//使用Activity提供的getContentResolver()方法获取ContentResolver对象</span></div><div class="line">        <span class="type">ContentResolver</span> cr = getContentResolver();</div><div class="line">        <span class="comment">//1、查询联系人的id和姓名</span></div><div class="line">        <span class="type">Cursor</span> c = cr.query(<span class="type">Contacts</span>.<span class="type">CONTENT_URI</span>, <span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="type">Contacts</span>._ID,<span class="type">Contacts</span>.<span class="type">DISPLAY_NAME</span>&#125;, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">        <span class="keyword">if</span>(c!=<span class="literal">null</span>)&#123;</div><div class="line">            <span class="keyword">while</span> (c.moveToNext()) &#123;</div><div class="line">                int id = c.getInt(c.getColumnIndex(<span class="string">"_id"</span>));</div><div class="line">                <span class="type">Log</span>.i(<span class="string">"Contacts"</span>,<span class="string">"_id:"</span>+id);</div><div class="line">                <span class="type">Log</span>.i(<span class="string">"Contacts"</span>,<span class="string">"name:"</span>+c.getString(c.getColumnIndex(<span class="string">"display_name"</span>)));</div><div class="line">                </div><div class="line">                <span class="comment">//2、根据联系人的ID查询联系人的电话号码</span></div><div class="line">                <span class="type">Cursor</span> cursor = cr.query(<span class="type">Phone</span>.<span class="type">CONTENT_URI</span>, <span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="type">Phone</span>.<span class="type">NUMBER</span>,<span class="type">Phone</span>.<span class="type">TYPE</span>&#125;, <span class="type">Phone</span>.<span class="type">CONTACT_ID</span>+<span class="string">"="</span>+id, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">                <span class="keyword">if</span>(cursor!=<span class="literal">null</span>)&#123;</div><div class="line">                    <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">                        int <span class="class"><span class="keyword">type</span> </span>= cursor.getInt(cursor.getColumnIndex(<span class="type">Phone</span>.<span class="type">TYPE</span>));</div><div class="line">                        <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span> <span class="title">==</span> <span class="title">Phone</span>.<span class="title">TYPE_HOME</span>)</span>&#123;</div><div class="line">                            <span class="type">Log</span>.i(<span class="string">"Contacts"</span>,<span class="string">"家庭电话"</span>+cursor.getString(cursor.getColumnIndex(<span class="type">Phone</span>.<span class="type">NUMBER</span>)));</div><div class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span> <span class="title">==</span> <span class="title">Phone</span>.<span class="title">TYPE_MOBILE</span>)</span>&#123;</div><div class="line">                            <span class="type">Log</span>.i(<span class="string">"Contacts"</span>,<span class="string">"移动电话"</span>+cursor.getString(cursor.getColumnIndex(<span class="type">Phone</span>.<span class="type">NUMBER</span>)));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    cursor.close();</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="comment">//3、根据联系人的ID去查询出联系人的邮箱地址</span></div><div class="line">                <span class="type">Cursor</span> c2 = cr.query(<span class="type">Email</span>.<span class="type">CONTENT_URI</span>, <span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="type">Email</span>.<span class="type">DATA</span>,<span class="type">Email</span>.<span class="type">TYPE</span>&#125;, <span class="type">Email</span>.<span class="type">CONTACT_ID</span>+<span class="string">"="</span>+id, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">                <span class="keyword">if</span>(c2!=<span class="literal">null</span>)&#123;</div><div class="line">                    <span class="keyword">while</span> (c2.moveToNext()) &#123;</div><div class="line">                        int <span class="class"><span class="keyword">type</span> </span>= c2.getInt(c2.getColumnIndex(<span class="type">Email</span>.<span class="type">TYPE</span>));</div><div class="line">                        <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span><span class="title">==Email</span>.<span class="title">TYPE_WORK</span>)</span>&#123;</div><div class="line">                            <span class="type">Log</span>.i(<span class="string">"Contacts"</span>,<span class="string">"工作邮箱："</span>+c2.getString(c2.getColumnIndex(<span class="type">Email</span>.<span class="type">DATA</span>)));</div><div class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span> <span class="title">==Email</span>.<span class="title">TYPE_HOME</span>)</span>&#123;</div><div class="line">                            <span class="type">Log</span>.i(<span class="string">"Contacts"</span>,<span class="string">"家庭邮箱："</span>+c2.getString(c2.getColumnIndex(<span class="type">Email</span>.<span class="type">DATA</span>)));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    c2.close();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            c.close();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//4、向联系人中插入一条记录</span></div><div class="line">        <span class="type">ContentValues</span> <span class="keyword">val</span> = <span class="keyword">new</span> <span class="type">ContentValues</span>();</div><div class="line">        <span class="type">Uri</span> uri = cr.insert(<span class="type">RawContacts</span>.<span class="type">CONTENT_URI</span>, <span class="keyword">val</span>);</div><div class="line">        <span class="type">Long</span> raw_contact_id = <span class="type">ContentUris</span>.parseId(uri);</div><div class="line">        <span class="keyword">val</span>.clear();</div><div class="line">        <span class="comment">//插入人名</span></div><div class="line">        <span class="keyword">val</span>.put(<span class="type">StructuredName</span>.<span class="type">RAW_CONTACT_ID</span>, raw_contact_id);</div><div class="line">        <span class="keyword">val</span>.put(<span class="type">StructuredName</span>.<span class="type">DISPLAY_NAME</span>,<span class="string">"张三"</span>);<span class="comment">//显示名称</span></div><div class="line">        <span class="keyword">val</span>.put(<span class="type">StructuredName</span>.<span class="type">MIMETYPE</span>,<span class="type">StructuredName</span>.<span class="type">CONTENT_ITEM_TYPE</span>);</div><div class="line">        uri=cr.insert(<span class="type">Data</span>.<span class="type">CONTENT_URI</span>, <span class="keyword">val</span>);</div><div class="line">        <span class="comment">//插入电话信息</span></div><div class="line">        <span class="keyword">val</span>.clear();</div><div class="line">        <span class="keyword">val</span>.put(<span class="type">Phone</span>.<span class="type">RAW_CONTACT_ID</span>, raw_contact_id);</div><div class="line">        <span class="keyword">val</span>.put(<span class="type">Phone</span>.<span class="type">NUMBER</span>, <span class="string">"1234567"</span>);</div><div class="line">        <span class="keyword">val</span>.put(<span class="type">Phone</span>.<span class="type">MIMETYPE</span>, <span class="type">Phone</span>.<span class="type">CONTENT_ITEM_TYPE</span>);</div><div class="line">        uri = cr.insert(<span class="type">Data</span>.<span class="type">CONTENT_URI</span>, <span class="keyword">val</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何实现自定义ContentProvider-实际意义不大"><a href="#如何实现自定义ContentProvider-实际意义不大" class="headerlink" title="如何实现自定义ContentProvider(实际意义不大)"></a>如何实现自定义ContentProvider(实际意义不大)</h3><p>1、自定义ContentProvider需继承抽象类ContentProvider，实现其一系列针对数据的增、删、改、查等方法；<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MyContentProvider</span> <span class="selector-tag">extends</span> <span class="selector-tag">ContentProvider</span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//如只实现了增和删的方法，那么使用该provider的程序只有增和删的功能</span></div><div class="line">    <span class="comment">//在Content Provider创建后被调用</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onCreate() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//根据uri查询出selection指定的条件所匹配的全部记录</span></div><div class="line">    <span class="comment">//并且可以指定查询哪些列 以什么方式排序</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public Cursor query(Uri uri, String[] projection, String selection,</div><div class="line">            String[] selectionArgs, String sortOrder) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//返回当前uri的MIME类型，如果该URI对应的数据可能包括多条记录</span></div><div class="line">    <span class="comment">//那么MIME类型字符串就是以vnd.android.dir/开头</span></div><div class="line">    <span class="comment">//如果该uri对应的数据只有一条，该MIME类型字符串以vnd.android.cursor.item/开头</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public String getType(Uri uri) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//根据Uri插入Values对应的数据时调用</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public Uri insert(Uri uri, ContentValues values) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//根据Uri删除selection指定的条件所匹配的全部记录时调用</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public int delete(Uri uri, String selection, String[] selectionArgs) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//根据uri修改selection指定的条件所匹配的全部记录</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public int update(Uri uri, ContentValues values, String selection,</div><div class="line">            String[] selectionArgs) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在Manifest.xml中完成对ContentProvider的注册<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;provider</div><div class="line">    android:name = <span class="string">"com.pk.MusicProvider"</span></div><div class="line">    android:authorities = <span class="string">"com.provider.music"</span></div><div class="line">        &gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span></div><div class="line"><span class="comment">//注：注册的authorities属性值是全局唯一的</span></div></pre></td></tr></table></figure></p>
<h2 id="四大组件之BroadcastReceiver"><a href="#四大组件之BroadcastReceiver" class="headerlink" title="四大组件之BroadcastReceiver"></a>四大组件之BroadcastReceiver</h2><p>Broadcast(广播)————是一种广泛运用在应用程序之间或其内部传输信息的机制，类似于广播电台；<br>roadcastReceiver(广播接收者)————是对发送出来的广播进行过滤接受并响应的一类组件，它就是用来接收来自系统和应用中的广播，类似于广播收音机；</p>
<p>广播的用途：<br>    1、当开机完成后系统会产生一条广播，实现应用的开机自动启动<br>    2、当网络状态改变时系统会产生一条广播<br>    3、当电量改变时系统会产生一条广播</p>
<h3 id="广播的使用方法"><a href="#广播的使用方法" class="headerlink" title="广播的使用方法"></a>广播的使用方法</h3><p>1、发送</p>
<pre><code>- 把信息装入一个Intent对象(如Action、Category)
- 通过调用相应的方法将Intent对象以广播方式发送出去
    + sendBroadcast()
    + sendOrderBroadcast()
    + sendStickyBroadcast()
</code></pre><p>2、接收<br>    当Intent发送以后，所有已经注册的BroadcastReceiver会检查注册时的IntentFilter是否与发送的Intent相匹配，若匹配则会调用BroadcastReceiver的onReceive()方法。所以当我们实现BroadcastReceiver抽象类的子类时，都需要实现onReceive()方法。</p>
<p>注意：<br>1、BroadcastReciever需要注册，有2种方式：<br>    静态注册<br>    动态注册————在activity注销时一定要先销毁接收器<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> BroadcastReceiver br;</div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    unregisterReceiver(br);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、BroadcastReciever需要匹配<br>3、BroadcastReciever生命周期只有5秒左右。<br>4、在BroadcastReciever中不要做比较耗时的操作，如果要做，应该通过发送Intent给Service,由Service完成<br>5、不能使用子线程（因为宿主进程BroadcastReciever被杀死）。<br>6、广播的种类</p>
<table>
<thead>
<tr>
<th style="text-align:center">对比内容</th>
<th style="text-align:center">普通广播(Normal broadcast)</th>
<th style="text-align:center">有序广播(Ordered broadcast)</th>
<th style="text-align:left">异步广播(粘滞性滞留广播)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">概念</td>
<td style="text-align:center">所有监听该广播的广播接收者都可以监听到该广播</td>
<td style="text-align:center">安装接收者的优先级顺序接收广播，优先级别再intent-filter中的priority中声明，-1000到1000之间，值越大优先级越高。可以终止广播意图的继续传播。接收者可以篡改内容</td>
<td style="text-align:left">不能将处理结果传给下一个接收者，无法终止广播，用的较少</td>
</tr>
<tr>
<td style="text-align:center">特点</td>
<td style="text-align:center">同级别接收先后是随机的(无序)</td>
<td style="text-align:center">同级别接收先后是随机的(无序)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">特点</td>
<td style="text-align:center">级别低的后收到广播</td>
<td style="text-align:center">级别低的后收到广播</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">特点</td>
<td style="text-align:center">接收器不能截断广播的继续传播业不能处理广播</td>
<td style="text-align:center">高级别接收器能截断广播的继续传播，也能处理广播</td>
<td style="text-align:left">不能将处理结果传给下一个接收者，无法终止广播(一直都存在)</td>
</tr>
<tr>
<td style="text-align:center">特点</td>
<td style="text-align:center">同级别动态注册高于静态注册</td>
<td style="text-align:center">同级别动态注册高于静态注册</td>
</tr>
</tbody>
</table>
<h3 id="普通广播的发送与接收代码示例"><a href="#普通广播的发送与接收代码示例" class="headerlink" title="普通广播的发送与接收代码示例"></a>普通广播的发送与接收代码示例</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">////</span><span class="number">1</span>、在MainActivity中发送一条普通广播<span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span>/</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">                intent.putExtra(<span class="string">"msg"</span>, <span class="string">"这是一条普通广播"</span>);</div><div class="line">                intent.setAction(<span class="string">"BC_one"</span>);</div><div class="line">                sendBroadcast(intent);</div><div class="line"></div><div class="line"><span class="regexp">////</span><span class="regexp">//2、实现BroadcastReceiver抽象类来接收广播//</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BCOne_Receiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span>&#123;</span></div><div class="line">    </div><div class="line">    @Override<span class="regexp">//重写接收广播的方法</span></div><div class="line">    public void onReceive(Context context, Intent intent) &#123;</div><div class="line">        //接收广播</div><div class="line">        String msg = intent.getStringExtra(<span class="string">"msg"</span>);</div><div class="line">        Toast.makeText(context, msg+<span class="string">"1"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        System.out.println(msg+<span class="string">"1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="regexp">////</span><span class="regexp">/3、在Manifest中注册接收器BCOne_Receiver/</span><span class="regexp">////</span><span class="regexp">////</span>/</div><div class="line">&lt;application&gt;</div><div class="line">    &lt;activity&gt;...&lt;/activity&gt;</div><div class="line">    &lt;!-- 静态注册receiver<span class="function">  --&gt;</span></div><div class="line">    &lt;receiver</div><div class="line">        android:name=<span class="string">"com.example.howtousebroadcastreceiver.BCOne_Receiver"</span>&gt;           </div><div class="line">        &lt;intent-filter&gt;</div><div class="line">            &lt;action android:name=<span class="string">"BC_one"</span>/&gt;</div><div class="line">        &lt;/intent-filter&gt;</div><div class="line">    &lt;/receiver&gt; </div><div class="line">&lt;/application&gt;</div><div class="line"></div><div class="line"><span class="regexp">////</span>或者在MainActivity中动态注册接收器BCOne_Receiver</div><div class="line">    IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">"BC_one"</span>);</div><div class="line">    BCOne_Receiver bc1 = <span class="keyword">new</span> BCOne_Receiver();</div><div class="line">    registerReceiver(bc1, intentFilter);</div></pre></td></tr></table></figure>
<h3 id="有序广播的发送与接收代码示例"><a href="#有序广播的发送与接收代码示例" class="headerlink" title="有序广播的发送与接收代码示例"></a>有序广播的发送与接收代码示例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">////1、在MainActivity中发送一条有序广播/////////////////////////</span></div><div class="line">    <span class="type">Intent</span> intent2 = <span class="keyword">new</span> <span class="type">Intent</span>();</div><div class="line">    intent2.putExtra(<span class="string">"msg"</span>, <span class="string">"这是一条有序广播"</span>);</div><div class="line">    intent2.setAction(<span class="string">"BC_one"</span>);</div><div class="line">    sendOrderedBroadcast(intent2, <span class="literal">null</span>);</div><div class="line"><span class="comment">//////2、高级别接收器接收并处理广播或截断广播//////////</span></div><div class="line">    public <span class="class"><span class="keyword">class</span> <span class="title">BCTwo_Receiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onReceive(<span class="type">Context</span> context, <span class="type">Intent</span> intent) &#123;</div><div class="line">        <span class="comment">//接收广播</span></div><div class="line">        <span class="type">String</span> msg = intent.getStringExtra(<span class="string">"msg"</span>);</div><div class="line">        <span class="type">Toast</span>.makeText(context, msg+<span class="string">"2"</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).show();</div><div class="line">        <span class="type">System</span>.out.println(msg+<span class="string">"2"</span>);</div><div class="line">        <span class="comment">//截断广播，截断后低级别接收器不会再接收到广播</span></div><div class="line">        <span class="comment">//abortBroadcast();</span></div><div class="line">        </div><div class="line">        <span class="comment">//处理广播</span></div><div class="line">        <span class="type">Bundle</span> bundle = <span class="keyword">new</span> <span class="type">Bundle</span>();</div><div class="line">        bundle.putString(<span class="string">"test"</span>, <span class="string">"处理截断广播"</span>);</div><div class="line">        setResultExtras(bundle);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">///3、低级别接收器接收并处理广播/////////////////////////</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BCOne_Receiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onReceive(<span class="type">Context</span> context, <span class="type">Intent</span> intent) &#123;</div><div class="line">        <span class="comment">//接收广播</span></div><div class="line">        <span class="type">String</span> msg = intent.getStringExtra(<span class="string">"msg"</span>);</div><div class="line">        <span class="type">Toast</span>.makeText(context, msg+<span class="string">"1"</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).show();</div><div class="line">        <span class="type">System</span>.out.println(msg+<span class="string">"1"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//接收处理后的广播</span></div><div class="line">        <span class="type">Bundle</span> bundle = getResultExtras(<span class="literal">true</span>);</div><div class="line">        <span class="type">String</span> s = bundle.getString(<span class="string">"test"</span>);</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"处理后的数据"</span>+s);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">////////////4、在Manifest中注册接收器BCOne_Receiver，在MainActivity中动态注册接收器BCTwo_Receiver，形成注册器的级别差；或者都通过静态注册并设置priority属性值形成级别差/////</span></div><div class="line"></div><div class="line">    &lt;application&gt;</div><div class="line">        &lt;activity&gt;...&lt;/activity&gt;</div><div class="line">        &lt;!-- 静态注册receiver  --&gt;</div><div class="line">        &lt;receiver</div><div class="line">            android:name=<span class="string">"com.example.howtousebroadcastreceiver.BCOne_Receiver"</span>&gt;           </div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name=<span class="string">"BC_one"</span>/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/receiver&gt; </div><div class="line">    &lt;/application&gt;</div><div class="line">    </div><div class="line">    <span class="comment">////动态注册BCTwo_Receiver//////////////////////////</span></div><div class="line">        <span class="type">IntentFilter</span> intentFilter = <span class="keyword">new</span> <span class="type">IntentFilter</span>(<span class="string">"BC_one"</span>);</div><div class="line">        <span class="type">BCTwo_Receiver</span> bc2 = <span class="keyword">new</span> <span class="type">BCTwo_Receiver</span>();</div><div class="line">        registerReceiver(bc2, intentFilter);</div></pre></td></tr></table></figure>
<h3 id="异步广播的发送与接收代码示例"><a href="#异步广播的发送与接收代码示例" class="headerlink" title="异步广播的发送与接收代码示例"></a>异步广播的发送与接收代码示例</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">////</span><span class="number">1</span>、在MainActivity中发送一条异步广播<span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span>/</div><div class="line">            <span class="regexp">//先发送异步广播后注册广播接收器</span></div><div class="line">            Intent intent3 = new Intent();</div><div class="line">            intent3.putExtra("msg", "这是一条异步广播");</div><div class="line">            intent3.setAction("BC_Three");</div><div class="line">            sendStickyBroadcast(intent3);</div><div class="line">            </div><div class="line">            //动态注册异步广播BCThree_Receiver</div><div class="line">            IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">"BC_Three"</span>);</div><div class="line">            br = <span class="keyword">new</span> BCThree_Receiver();</div><div class="line">            registerReceiver(br, intentFilter);</div><div class="line"></div><div class="line"><span class="regexp">////</span><span class="number">2</span>、接收器接收并处理广播<span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span>/</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BCThree_Receiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span>&#123;</span></div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public <span class="literal">void</span> onReceive(Context context, Intent intent) &#123;</div><div class="line">        <span class="regexp">// TODO Auto-generated method stub</span></div><div class="line">        //接收广播</div><div class="line">        System.out.println(<span class="string">"接收到一条异步广播"</span>);   </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="regexp">///3、在Manifest中为异步广播授权//</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span>/</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.BROADCAST_STICKY"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="四大组件之Service"><a href="#四大组件之Service" class="headerlink" title="四大组件之Service"></a>四大组件之Service</h2><p>定义：</p>
<pre><code>- 后台运行，不可见，没有界面
- 优先级高于Activity
- 继承关系与Activity类似，都继承自Context
</code></pre><p>作用：</p>
<pre><code>- 播放音乐、记录地理信息位置的改变、监听某种动作...
</code></pre><p>类型：</p>
<pre><code>- 本地服务，一般都用于应用程序内部
    + startService stopService stopSelf stopSelfResult
        * Start方式启动Service的特点：
            - 服务跟启动源没有任何联系
            - 无法得到服务对象
    + bindService  unbindService
        * Bind方式启动Service的特点：
            - 通过Ibinder接口实例，返回一个ServiceConnection对象给启动源
            - 通过ServiceConnection对象的相关方法可以得到Service对象
- 远程服务，一般都用于同一个手机的Android系统内部的应用程序之间
    + 通过实现IBinder接口
</code></pre><p>注意：</p>
<pre><code>- Service运行在主线程，不能用它来做耗时的请求或动作
- 可以在服务中开一个线程，在线程中做耗时动作
</code></pre><p>生命周期：<br><img src="http://ocej2soxx.bkt.clouddn.com/service%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="Servcice生命周期"><br>左侧为startService方式的生命周期，右侧为bindService方式的生命周期</p>
<h3 id="Start方式启动Service代码示例"><a href="#Start方式启动Service代码示例" class="headerlink" title="Start方式启动Service代码示例"></a>Start方式启动Service代码示例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、实现<span class="type">Service</span>抽象类的子类<span class="type">MyService</span>，并重写其中的方法</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="number">2</span>、在<span class="type">Manifest</span>中注册<span class="type">MyService</span>服务</div><div class="line">    &lt;application&gt;</div><div class="line">        &lt;activity&gt;...&lt;/activity&gt;</div><div class="line">        &lt;!-- 注册<span class="type">Service</span> --&gt;</div><div class="line">        &lt;service android:name=<span class="string">"com.example.howtouseservice.MyService"</span>&gt;&lt;/service&gt;</div><div class="line">    &lt;/application&gt;</div><div class="line"><span class="number">3</span>、在<span class="type">MainActivity</span>中启动<span class="type">Service</span></div><div class="line">        <span class="type">Intent</span> in1;</div><div class="line">        <span class="comment">//启动Service</span></div><div class="line">            in1 = <span class="keyword">new</span> <span class="type">Intent</span>(<span class="type">MainActivity</span>.<span class="keyword">this</span>,<span class="type">MyService</span>.<span class="keyword">class</span>);</div><div class="line">            startService(in1);</div><div class="line">        <span class="comment">//停止Service</span></div><div class="line">            stopService(in1);</div></pre></td></tr></table></figure>
<h3 id="Bind方式启动Service代码示例"><a href="#Bind方式启动Service代码示例" class="headerlink" title="Bind方式启动Service代码示例"></a>Bind方式启动Service代码示例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、实现<span class="type">Service</span>抽象类的子类<span class="type">MyBindService</span>，并重写其中的方法</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyBindService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//声明继承自Binder的类，在其中返回想返回的参数即可</span></div><div class="line">    public <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span></span>&#123;</div><div class="line">        <span class="comment">//想返回本服务的对象</span></div><div class="line">        public <span class="type">MyBindService</span> getService()&#123;</div><div class="line">            <span class="keyword">return</span> <span class="type">MyBindService</span>.<span class="keyword">this</span>;<span class="comment">//返回MyBindService对象</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">IBinder</span> onBind(<span class="type">Intent</span> intent) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="type">Log</span>.i(<span class="string">"MyBindService"</span>,<span class="string">"MyBindService---onBind()"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">MyBinder</span>();</div><div class="line">    &#125;</div><div class="line">    public void play()&#123;</div><div class="line">        <span class="type">Log</span>.i(<span class="string">"MyBindService"</span>,<span class="string">"MyBindService---play()"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="number">2</span>、在<span class="type">Manifest</span>中注册<span class="type">MyBindService</span>服务</div><div class="line">&lt;application&gt;</div><div class="line">        &lt;activity&gt;...&lt;/activity&gt;</div><div class="line">        &lt;!-- 注册<span class="type">Service</span> --&gt;</div><div class="line">        &lt;service android:name=<span class="string">"com.example.howtouseservice.MyBindService"</span>&gt;&lt;/service&gt;</div><div class="line">    &lt;/application&gt;</div><div class="line"><span class="number">3</span>、在<span class="type">MainActivity</span>中启动<span class="type">Service</span></div><div class="line">    <span class="type">Intent</span> in2;</div><div class="line">    <span class="type">ServiceConnection</span> coon;</div><div class="line">    <span class="type">MyBindService</span> service;</div><div class="line"></div><div class="line">    public void doClick(<span class="type">View</span> v) &#123;     </div><div class="line">            <span class="comment">//同时使用start和bind方式启动Service</span></div><div class="line">            startService(in2);</div><div class="line">            <span class="comment">//通过bind方式启动Service</span></div><div class="line">            in2 = <span class="keyword">new</span> <span class="type">Intent</span>(<span class="type">MainActivity</span>.<span class="keyword">this</span>,<span class="type">MyBindService</span>.<span class="keyword">class</span>);</div><div class="line">            <span class="comment">//实现ServiceConnection接口的方法</span></div><div class="line">            coon = <span class="keyword">new</span> <span class="type">ServiceConnection</span>()&#123;</div><div class="line">                <span class="comment">//当启动源与Service的成功连接之后将会自动调用该方法</span></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                public void onServiceConnected(<span class="type">ComponentName</span> name,</div><div class="line">                        <span class="type">IBinder</span> binder) &#123;</div><div class="line">                    <span class="comment">//获得服务对象</span></div><div class="line">                    service = ((<span class="type">MyBinder</span>)binder).getService();</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//当启动源与Service的连接意外丢失时会调用该方法</span></div><div class="line">                <span class="comment">//如当Service崩溃了或被强行杀死时会调用该方法</span></div><div class="line">                <span class="comment">//如启动源与Service解除绑定时不会调用该方法</span></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                public void onServiceDisconnected(<span class="type">ComponentName</span> name) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated method stub </span></div><div class="line">                &#125;&#125;;</div><div class="line">            bindService(in2, coon, <span class="type">Service</span>.<span class="type">BIND_AUTO_CREATE</span>);</div><div class="line">            </div><div class="line">            <span class="comment">//操作服务对象</span></div><div class="line">            service.play();</div><div class="line"></div><div class="line">            <span class="comment">//停止服务</span></div><div class="line">            stopService(in2);</div><div class="line">            in2 = <span class="literal">null</span>;</div><div class="line">            <span class="comment">//解除绑定Service</span></div><div class="line">            unbindService(coon);</div><div class="line">            coon = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//销毁Activity之前注销Service</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onDestroy() &#123;</div><div class="line">        <span class="keyword">if</span>(in2!=<span class="literal">null</span>)&#123;</div><div class="line">            stopService(in2);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(coon!=<span class="literal">null</span>)&#123;</div><div class="line">            unbindService(coon);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="Android中常用的系统服务"><a href="#Android中常用的系统服务" class="headerlink" title="Android中常用的系统服务"></a>Android中常用的系统服务</h1><h2 id="常用的系统服务"><a href="#常用的系统服务" class="headerlink" title="常用的系统服务"></a>常用的系统服务</h2><p>后台Service在系统启动时被SystemServer开启，常用的系统服务有：</p>
<pre><code>- MountService  监听是否有SD卡安装及移除
- ClipboardService 剪切板功能
- PackageManagerService 提供软件包的安装移除及查看
- 电量、网络连接状态等等
</code></pre><p>主要使用getSystemService(String NAME)获取系统服务,它是Activity的一个方法，传入NAME参数–&gt;返回Object对象–&gt;转换为服务对象</p>
<p><strong>注意：获取系统服务常需要在Manifest文件中添加相关权限</strong></p>
<p>代码示例<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断网络是否连接</span></div><div class="line"><span class="comment">//要在Manifest文件中添加ACCESS_NETWORK_STATE权限</span></div><div class="line">ConnectivityManager cm = (ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);</div><div class="line">NetworkInfo ni = cm.getActiveNetworkInfo();</div><div class="line">    <span class="keyword">if</span>(ni!=<span class="literal">null</span>)&#123;<span class="comment">//ni非null,网络连接存在</span></div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"网络是否连接?"</span>+ni.isAvailable(), Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"网络未连接"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//开关WIFI</span></div><div class="line"><span class="comment">//要在Manifest文件中添加ACCESS_WIFI_STATE和CHANGE_WIFI_STATE权限</span></div><div class="line">WifiManager wm = (WifiManager)getSystemService(WIFI_SERVICE);</div><div class="line"><span class="keyword">if</span>(wm.isWifiEnabled())&#123;</div><div class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"WIFI处于开启状态"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    wm.setWifiEnabled(<span class="literal">false</span>);<span class="comment">//关闭WIFI</span></div><div class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"WIFI已关闭"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"WIFI处于关闭状态"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    wm.setWifiEnabled(<span class="literal">true</span>);<span class="comment">//开启WIFI</span></div><div class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"WIFI已开启"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="comment">//获取系统音量</span></div><div class="line">AudioManager am = (AudioManager)getSystemService(AUDIO_SERVICE);</div><div class="line">int max = am.getStreamMaxVolume(AudioManager.STREAM_SYSTEM);</div><div class="line">int current = am.getStreamVolume(AudioManager.STREAM_RING);</div><div class="line">Toast.makeText(<span class="keyword">this</span>, <span class="string">"系统最大音量"</span>+max+<span class="string">",系统当前音量"</span>+current, Toast.LENGTH_SHORT).show();</div></pre></td></tr></table></figure></p>
<h1 id="手势识别篇"><a href="#手势识别篇" class="headerlink" title="手势识别篇"></a>手势识别篇</h1><p>实现手势识别的2种方式：</p>
<pre><code>- 使用GestureDetector
- 使用GestureOverlayView
</code></pre><p>名词介绍：<br>    一、MotionEvent：<br>         1、用于封装手势、触摸笔、轨迹球等动作事件<br>         2、内部封装用于记录横轴和纵轴坐标的属性X和Y<br>    二、GestureDetector<br>        1、识别各种手势<br>        2、触摸屏上的手势动作：按下、移动、抬起<br>        3、重载onTouch或者设置setOnTouchListener实现触摸事件<br>        4、GestureDetector提供了两个监听器<br>            a、OnGestureListener接口处理单击类消息<br>                    onDown()————点击<br>                    onSingleTapUp()————抬起<br>                    onShowPress————短按<br>                    onLongPress————长按<br>                    onScroll————滚动<br>                    onFling————滑动<br>            b、OnDoubleTapListener接口处理双击类消息<br>                    onDoubleTap()  双击<br>                    onDoubleTapEvent()  双击按下和抬起各触发一次<br>                    onSingleTapConfirmed()  点击确认，即很快的按下并抬起，但并不连续点击第二下<br>        5、继承SimpleOnGestureListener,重载感兴趣的手势方法即可<br>    三、OnGestureListener接口<br>        1、手势交互的监听接口，其提供多个抽象方法<br>        2、根据GestureDetector的手势识别结果调用相对应的方法</p>
<h2 id="使用GestureDetector进行手势识别"><a href="#使用GestureDetector进行手势识别" class="headerlink" title="使用GestureDetector进行手势识别"></a>使用GestureDetector进行手势识别</h2><p>GestureDetector手势交互过程：<br>    1、手指触屏一刹那，触发MotionEvent事件<br>    2、这个MotionEvent事件被OnTouchListener监听，在其onTouch()中获得MotionEvent事件对象<br>    3、在OnTouchListener监听器中，GestureDetector对象转发MotionEvent事件对象到OnGestureListener接口<br>    4、在OnGestureListener接口(常继承自SimpleOnGestureListener)的实现类中获得该MotionEvent事件对象，重载感兴趣的手势，根据该对象封装的信息做出合适的处理。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">ImageView</span> img;</div><div class="line">    <span class="keyword">private</span> <span class="type">GestureDetector</span> myGestureDetector;</div><div class="line">    </div><div class="line">    <span class="comment">//3、自定义继承自SimpleOnGestureListener的子类,重载感兴趣的手势方法</span></div><div class="line">    <span class="comment">//在OnGestureListener接口中获得该MotionEvent事件对象，</span></div><div class="line">    <span class="comment">//根据该对象封装的信息做出合适的处理。</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">myGestureListener</span> <span class="keyword">extends</span> <span class="title">SimpleOnGestureListener</span></span>&#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        public boolean onFling(<span class="type">MotionEvent</span> e1, <span class="type">MotionEvent</span> e2, float velocityX,</div><div class="line">                float velocityY) &#123;</div><div class="line">            <span class="comment">//MotionEvent e1 为起始位置事件</span></div><div class="line">            <span class="comment">//MotionEvent e2 为终止位置事件</span></div><div class="line">            <span class="keyword">if</span>(e1.getX() - e2.getX()&gt;<span class="number">50</span>)&#123;</div><div class="line">                <span class="comment">//向左滑动</span></div><div class="line">                <span class="type">Toast</span>.makeText(<span class="type">MainActivity</span>.<span class="keyword">this</span>, <span class="string">"从右向左滑动"</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).show();</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e2.getX() - e1.getX()&gt;<span class="number">50</span>)&#123;</div><div class="line">                <span class="type">Toast</span>.makeText(<span class="type">MainActivity</span>.<span class="keyword">this</span>, <span class="string">"从左向右滑动"</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).show();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onFling(e1, e2, velocityX, velocityY);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line"></div><div class="line">        img = (<span class="type">ImageView</span>)findViewById(<span class="type">R</span>.id.img);</div><div class="line">        <span class="comment">//4、初始化GestureDetector对象</span></div><div class="line">        myGestureDetector = <span class="keyword">new</span> <span class="type">GestureDetector</span>(<span class="type">MainActivity</span>.<span class="keyword">this</span>,<span class="keyword">new</span> myGestureListener());</div><div class="line">        <span class="comment">//设置监听器</span></div><div class="line">        img.setOnTouchListener(<span class="keyword">new</span> <span class="type">OnTouchListener</span>() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span><span class="comment">//1、手指触屏一刹那，可以捕获到触摸屏幕发生的MotionEvent事件</span></div><div class="line">            public boolean onTouch(<span class="type">View</span> v, <span class="type">MotionEvent</span> event) &#123;</div><div class="line">                <span class="comment">//2、GestureDetector对象转发MotionEvent事件对象到OnGestureListener接口————常为SimpleOnGestureListener的子类</span></div><div class="line">                myGestureDetector.onTouchEvent(event);</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用GestureOverlayView进行手势识别"><a href="#使用GestureOverlayView进行手势识别" class="headerlink" title="使用GestureOverlayView进行手势识别"></a>使用GestureOverlayView进行手势识别</h2><p>GestureOverlayView控件：<br>    一种用于手势输入的透明覆盖层，可覆盖在其他控件的上方，也可包含其他控件。存在3个监听器接口：<br>       GestureOverlayView.OnGestureListener     手势监听器<br>       GestureOverlayView.OnGesturePerformedListener  手势执行监听器<br>       GestureOverlayView.OnGesturingListener     手势执行中监听器</p>
<p>使用GestureOverlayView控件的步骤：<br>    1、使用Gestures Builder生成手势文件并导出，手势文件位于：/mnt/sdcard/gestures或查看Toast提示<br>    2、将文件粘贴到项目中的res/raw/文件夹下<br>    3、创建GestureOverlayView控件来使用手势识别</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、在xml布局文件中添加GestureOverlayView控件</div><div class="line">&lt;RelativeLayout&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;android.gesture.GestureOverlayView</div><div class="line">        android:id=<span class="string">"@+id/gov"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        &lt;ImageView</div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"match_parent"</span></div><div class="line">            android:src=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;/android.gesture.GestureOverlayView&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div><div class="line">2、在MainActivity中编写代码</div><div class="line"><span class="keyword">public</span> class MainActivity <span class="keyword">extends</span> Activity &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> GestureOverlayView gov;</div><div class="line">    GestureLibrary library;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">//1、找到刚才的预设定的手势文件</span></div><div class="line">        <span class="comment">//2、加载手势文件里的所有手势</span></div><div class="line">        <span class="comment">//3、匹配识别手势</span></div><div class="line">        </div><div class="line">        gov = (GestureOverlayView)findViewById(R.id.gov);</div><div class="line">        </div><div class="line">        <span class="comment">//从raw资源中加载手势文件</span></div><div class="line">        library = GestureLibraries.fromRawResource(<span class="keyword">this</span>,R.raw.gestures);</div><div class="line">        library.load();</div><div class="line"></div><div class="line">        <span class="comment">//为GestureOverlayView控件添加手势执行监听器</span></div><div class="line">        gov.addOnGesturePerformedListener(<span class="keyword">new</span> GestureOverlayView.OnGesturePerformedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onGesturePerformed</span><span class="params">(GestureOverlayView overlay, Gesture gesture)</span> </span>&#123;</div><div class="line">                <span class="comment">//读出手势库中的内容，即识别手势</span></div><div class="line">                ArrayList&lt;Prediction&gt; myGesture = library.recognize(gesture);</div><div class="line">                <span class="comment">//遍历手势</span></div><div class="line">                Prediction prediction = myGesture.get(<span class="number">0</span>);</div><div class="line">                <span class="comment">//判断相似度</span></div><div class="line">                <span class="keyword">if</span> (prediction.score&gt;=<span class="number">5.0</span>)&#123;</div><div class="line">                    <span class="comment">//识别手势</span></div><div class="line">                    <span class="keyword">switch</span> (prediction.name)&#123;</div><div class="line">                        <span class="keyword">case</span> <span class="string">"exit"</span>:</div><div class="line">                            finish();</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> <span class="string">"next"</span>:</div><div class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"next手势"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">case</span> <span class="string">"prev"</span>:</div><div class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"prev手势"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"没有该手势"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>GestureOverlayView控件的一些常见XML属性：<br>    android:eventsInterceptionEnabled   定义当手势已经被识别出来时，是否拦截该手势动作<br>    android:fadeDuration  当用户画完，手势效果淡出的时间<br>    android:fadeEnabled  用户画完之后，手势是否自动淡出<br>    android:gestureColor 手势的颜色<br>    android:gestureStrokeType  手势笔画的类型<br>    android:gestureStrokeWidth  手势笔画的宽度</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android入门五]]></title>
      <url>https://aiolos123.github.io/2016/09/18/learn-android-step-by-step-five/</url>
      <content type="html"><![CDATA[<p>本课程深入的讲解了Android中的三种数据存储方式的深度讲解<br>学习来源：<a href="http://www.imooc.com/learn/179" target="_blank" rel="external">http://www.imooc.com/learn/179</a><br><a id="more"></a></p>
<h2 id="数据篇"><a href="#数据篇" class="headerlink" title="数据篇"></a>数据篇</h2><p>Android的四种数据存储方式：<br>        1、SharedPreferences<br>        2、SQLite<br>        3、File<br>        4、Content Provider<br>其中前三种都只是在单独的一个应用程序之中达到一个数据的共享，无法跨应用程序访问数据。但Content Provider可以实现跨应用程序访问数据；</p>
<h2 id="数据存储之SharedPreferences"><a href="#数据存储之SharedPreferences" class="headerlink" title="数据存储之SharedPreferences"></a>数据存储之SharedPreferences</h2><p>SharedPreferences是一种轻型的数据存储方式，本质是基于XML文件存储key-value键值对数据，通常用来存储一些简单的配置信息。最终保存为xml文件存放到/data/data/app包名/shared_prefs/目录下。</p>
<p><strong>SharedPreferences对象本身只能获取数据而不支持存储和修改数据；存储和修改数据是通过Editor对象来实现的。</strong></p>
<h3 id="实现SharedPreferences存储和获取xml文件中数据的代码示例"><a href="#实现SharedPreferences存储和获取xml文件中数据的代码示例" class="headerlink" title="实现SharedPreferences存储和获取xml文件中数据的代码示例"></a>实现SharedPreferences存储和获取xml文件中数据的代码示例</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line">      </div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//一、实现SharedPreferences存储数据到xml文件的步骤：</span></div><div class="line">        </div><div class="line">        <span class="comment">//1、获得SharedPreferences对象</span></div><div class="line">        <span class="comment">//创建的xml文件名同本类的名称</span></div><div class="line">        <span class="comment">//SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(MainActivity.this);</span></div><div class="line">        <span class="comment">//自定义xml文件名及其权限</span></div><div class="line">        SharedPreferences pref = getSharedPreferences("myPref", MODE_PRIVATE);</div><div class="line">        <span class="comment">//2、获得SharedPreferences.Editor对象</span></div><div class="line">        Editor editor = pref<span class="selector-class">.edit</span>();</div><div class="line">        <span class="comment">//3、通过Editor对象的putXxx方法保存key-value对，其中Xxx表示不同的数据类型，如putString()</span></div><div class="line">        editor<span class="selector-class">.putString</span>(<span class="string">"name"</span>, <span class="string">"张三"</span>);</div><div class="line">        editor<span class="selector-class">.putInt</span>(<span class="string">"age"</span>, <span class="number">30</span>);</div><div class="line">        editor<span class="selector-class">.putLong</span>(<span class="string">"time"</span>, System.currentTimeMillis());</div><div class="line">        editor<span class="selector-class">.putBoolean</span>(<span class="string">"default"</span>, true);</div><div class="line">        <span class="comment">//4、通过Editor对象的commit方法提交保存key-value对到xml文件中</span></div><div class="line">        editor<span class="selector-class">.commit</span>();</div><div class="line">        <span class="comment">//5、删除某个键值对</span></div><div class="line">        <span class="comment">//editor.remove("age");</span></div><div class="line">        <span class="comment">//6、提交来保存数据</span></div><div class="line">        <span class="comment">//editor.commit();</span></div><div class="line">        </div><div class="line">        <span class="comment">//二、实现SharedPreferences获取xml文件中的数据的步骤：</span></div><div class="line">        <span class="comment">//1、通过SharedPreferences对象的getXxx方法获取数据</span></div><div class="line">        System<span class="selector-class">.out</span><span class="selector-class">.println</span>(pref.getLong(<span class="string">"time"</span>, -<span class="number">1</span>L));</div><div class="line">        System<span class="selector-class">.out</span><span class="selector-class">.println</span>(pref.getString(<span class="string">"name"</span>, <span class="string">"未知"</span>)); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在布局xml文件中绑定按钮点击事件的监听器的示例"><a href="#在布局xml文件中绑定按钮点击事件的监听器的示例" class="headerlink" title="在布局xml文件中绑定按钮点击事件的监听器的示例"></a>在布局xml文件中绑定按钮点击事件的监听器的示例</h3><p>1、在布局文件中设置android:onClick属性,其属性值即可将要实现的方法名<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">Button</span></div><div class="line">    android:id=<span class="string">"@+id/login"</span></div><div class="line">    android:<span class="keyword">onClick</span>=<span class="string">"doClick"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中实现监听器方法<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//实现布局xml文件中绑定的监听器方法doClick，参数固定为(View v)</span></div><div class="line">    public void doClick(<span class="type">View</span> v)&#123;</div><div class="line">        switch (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="type">R</span>.id.login:&#123;</div><div class="line">                <span class="comment">//处理id为login的按钮的点击事件</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="数据存储之SQLite"><a href="#数据存储之SQLite" class="headerlink" title="数据存储之SQLite"></a>数据存储之SQLite</h2><h3 id="SQLite数据库简介"><a href="#SQLite数据库简介" class="headerlink" title="SQLite数据库简介"></a>SQLite数据库简介</h3><p>支持大多数的SQL语句，并可以在所有主要的操作系统上运行；<br>支持高达2TB大小的数据库<br>每个数据库以单个文件的形式存在，该文件以B-Tree的数据结构形式存储在磁盘<br>最终保存的文件存放在/data/data/app包名/database/目录下。</p>
<p>SQLite的特点：<br>    1、轻量级 一个动态库、单文件<br>    2、独立性 没有依赖、无需安装<br>    3、隔离性 全部在一个文件夹中<br>    4、跨平台 支持众多操作系统<br>    5、多语言接口 支持众多编程语言<br>    6、安全性 事务<br>           SQLite关于事务处理的安全性问题：</p>
<pre><code>- 通过数据库上的独占性和共享锁来实现独立事务处理
- 多个进程可以在同一时间从同一数据库读取数据，但只有一个进程可以写入数据。
</code></pre><p>SQLite的数据类型：<br>    SQL支持NULL、INTEGER、REAL、TEXT、BLOB五种数据类型；<br>    依次代表：空值、整型值、浮点值、字符串值、二进制对象；<br>    SQLite的数据类型是动态数据类型(弱引用)</p>
<pre><code>- 当某个值插入到数据库时，SQLite将会检查它的类型，如果该类型与关联的列不匹配，SQLite则会尝试将该值转换成该列的类型，如果不能转换，则该值将作为本身的类型存储。
</code></pre><p>SQLite使用须知：</p>
<pre><code>- 由于资源占用少、性能良好和零管理成本，嵌入式数据库有了它的用武之地。如android、IOS；
- 没有可用于SQLite的网络服务器、只能通过网络共享，可能存在文件锁定或性能问题。
- 只提供数据库级的锁定。
- 没有用户账户概念，而且根据文件系统确定所有数据库的权限。
</code></pre><h3 id="使用SQLiteDatabase类操作SQLite"><a href="#使用SQLiteDatabase类操作SQLite" class="headerlink" title="使用SQLiteDatabase类操作SQLite"></a>使用SQLiteDatabase类操作SQLite</h3><p>1、SQLiteDatabase类<br>是提供了一些管理SQLite数据库的类，提供创建、删除、执行SQL命令，并执行其他常见的数据库管理任务的方法，如：</p>
<pre><code>    + db.execSQL(sql) //执行任何SQL语句
    + db.insert(table,nullColumnHack,values)
    + db.delete(table,whereClause,whereArgs)
    + db.update(table,values,whereClause,whereArgs)
    + db.query(table,columns,selection,selctionArgs,groupBy,having,orderBy)
    + db.rawQuery(sql,selectionArgs)
- 每个程序的数据库名字是唯一的
</code></pre><p>2、Cursor游标类<br>是Android查询数据后得到的一个管理数据集合的类。提供了遍历查询结果的方法，如移动指针方法move()、获取列值方法getString()等，常用方法有：<br>    getCount()  //总记录条数<br>    isFirst()   //判断是否是第一条记录<br>    isLast()<br>    moveToFirst()  //移动到第一条记录<br>    moveToLast()   //<br>    move(int offset) //移动到指定记录<br>    moveToNext()    //移动到下一条记录<br>    moveToPrevious()<br>    getColumnIndexOrThrow(String columnName)  //根据列名获得列索引<br>    getInt(int columnIndex)  //获得指定列索引的int类型值<br>    getString((int columnIndex)</p>
<p><strong>正常情况下，如果查询得到的数据量比较小时不会有内存问题，而且虚拟机能够保证Cursor最终会被释放掉；然而如果Cursor的数据量特别大，特别是如果里面 有Blob信息时，应该保证Cursor占用的内存被及时的释放掉，而不是等待GC来处理。并且Android明显是倾向于编程者手动的将Cursor关闭，因为在源代码中我们发现，如果等到垃圾回收器来回收时，也就是如果不手动关闭，系统会报错，会给用户以错误提示。</strong></p>
<p>3、ContentValues类<br>这个类是用来存储一组可以被ContentResolver处理的值</p>
<pre><code>- ContentValues values = new ContentValues(); //类似hashMap key value
- value.put(&quot;name&quot;,&quot;张三&quot;);
- 调用db.insert()等方法来执行对应的sql操作
</code></pre><p>SQLiteDatabase类、Cursor类、ContentValues类代码示例如下：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> MainActivity extends Activity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//每个程序都有自己的数据库，默认情况下是各自互相不干扰的</span></div><div class="line">        <span class="comment">//1、创建一个数据库并且打开</span></div><div class="line">        SQLiteDatabase db = openOrCreateDatabase(<span class="string">"user.db"</span>, MODE_PRIVATE, null);</div><div class="line">        <span class="comment">//2、执行sql语句</span></div><div class="line">        db.execSQL(<span class="string">"create table if not exists usertb ("</span></div><div class="line">                + <span class="string">"                 _id integer primary key autoincrement,"</span></div><div class="line">                + <span class="string">"                 name text not null,"</span></div><div class="line">                + <span class="string">"                 age integer not null,"</span></div><div class="line">                + <span class="string">"                 sex text not null)"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//建议通过如下的方式来执行SQLite数据库的增删改查操作</span></div><div class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">        values.<span class="built_in">put</span>(<span class="string">"name"</span>, <span class="string">"赵六"</span>);</div><div class="line">        values.<span class="built_in">put</span>(<span class="string">"age"</span>, <span class="number">21</span>);</div><div class="line">        values.<span class="built_in">put</span>(<span class="string">"sex"</span>, <span class="string">"男"</span>);</div><div class="line">        db.insert(<span class="string">"usertb"</span>, null, values);</div><div class="line">        values.<span class="built_in">clear</span>();<span class="comment">//清空后可再次存值</span></div><div class="line">        values.<span class="built_in">put</span>(<span class="string">"age"</span>, <span class="number">30</span>);</div><div class="line">        <span class="comment">//将id=3的人的年龄改为30</span></div><div class="line">        db.update(<span class="string">"usertb"</span>, values, <span class="string">"_id=?"</span>, <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"3"</span>&#125;);</div><div class="line">        values.<span class="built_in">clear</span>();<span class="comment">//清空后可再次存值</span></div><div class="line">        <span class="comment">//删除所有名字中带有三的人</span></div><div class="line">        db.<span class="keyword">delete</span>(<span class="string">"usertb"</span>, <span class="string">"name like ?"</span>, <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"%三%"</span>&#125;);</div><div class="line">        <span class="comment">//查询所有id&gt;0的人，并按照age排序</span></div><div class="line">        Cursor <span class="built_in">cursor</span> = db.query(<span class="string">"usertb"</span>, null, <span class="string">"_id&gt;?"</span>, <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"0"</span>&#125;, null, null, <span class="string">"age"</span>);</div><div class="line">        <span class="built_in">if</span>(<span class="built_in">cursor</span>!=null)&#123;</div><div class="line">            <span class="built_in">while</span>(<span class="built_in">cursor</span>.moveToNext())&#123;</div><div class="line">                <span class="comment">//获取列名的数组</span></div><div class="line">                <span class="keyword">String</span>[] cns = <span class="built_in">cursor</span>.getColumnNames();</div><div class="line">                <span class="built_in">for</span> (<span class="keyword">String</span> columnName:cns) &#123;</div><div class="line">                    Log.i(<span class="string">"db"</span>,columnName+<span class="string">":"</span>+<span class="built_in">cursor</span>.getString(<span class="built_in">cursor</span>.getColumnIndex(columnName)));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//查询完后释放Cursor</span></div><div class="line">            <span class="built_in">cursor</span>.<span class="built_in">close</span>();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//尽量避免使用execSQL()方法执行插入、更新、删除操作，建议使用上面的方法</span></div><div class="line">        <span class="comment">//db.execSQL("insert into usertb(name,sex,age) values('张三','女',18)");</span></div><div class="line">        <span class="comment">//db.execSQL("insert into usertb(name,sex,age) values('李四','男',19)");</span></div><div class="line">        <span class="comment">//db.execSQL("insert into usertb(name,sex,age) values('王五','女',18)");</span></div><div class="line">        <span class="comment">//3、查询</span></div><div class="line">        <span class="comment">//Cursor cursor= db.rawQuery("select * from usertb", null);</span></div><div class="line"><span class="comment">//        if(cursor!=null)&#123;</span></div><div class="line"><span class="comment">//          while(cursor.moveToNext())&#123;</span></div><div class="line"><span class="comment">//              Log.i("db","_id:"+cursor.getInt(cursor.getColumnIndex("_id")));</span></div><div class="line"><span class="comment">//              Log.i("db","name:"+cursor.getString(cursor.getColumnIndex("name")));</span></div><div class="line"><span class="comment">//              Log.i("db","age:"+cursor.getInt(cursor.getColumnIndex("age")));</span></div><div class="line"><span class="comment">//              Log.i("db","sex:"+cursor.getString(cursor.getColumnIndex("sex")));</span></div><div class="line"><span class="comment">//          &#125;</span></div><div class="line"><span class="comment">//          //查询完后释放Cursor</span></div><div class="line"><span class="comment">//          cursor.close();</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        </div><div class="line">       <span class="comment">//4、关闭数据库连接</span></div><div class="line">        db.<span class="built_in">close</span>();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用SQLiteOpenHelper类操作SQLite"><a href="#使用SQLiteOpenHelper类操作SQLite" class="headerlink" title="使用SQLiteOpenHelper类操作SQLite"></a>使用SQLiteOpenHelper类操作SQLite</h3><p>SQLiteOpenHelper帮助类，用于管理数据库的创建和版本更新<br>    一般是建立一个类继承它，并重写onCreate()和onUpgrade()方法<br>    其他常用方法：</p>
<pre><code>- onCreate(SQLiteDatabase db)   // 创建数据库时调用
- onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion) //版本更新时调用
- getReadableDatabase()  //以只读方式获取一个操作数据库的SQLiteDatabase实例
- getWritableDatabase()  //以读写方式获取一个操作数据库的SQLiteDatabase实例
</code></pre><p>使用SQLiteOpenHelper类操作SQLite的代码示例<br>1、创建SQLiteOpenHelper的子类，并重写onCreate和onUpgrade方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//声明构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DbOpenHelper</span><span class="params">(Context context, String name, CursorFactory factory,</span></span></div><div class="line">            <span class="keyword">int</span> version) &#123;</div><div class="line">        <span class="keyword">super</span>(context, name, factory, version);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//首次创建数据库的时候自动调用,一般可以把建库、建表的操作写到该方法中</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        <span class="comment">//创建数据库表</span></div><div class="line">        db.execSQL(<span class="string">"create table if not exists stutb ("</span></div><div class="line">                + <span class="string">"                 _id integer primary key autoincrement,"</span></div><div class="line">                + <span class="string">"                 name text not null,"</span></div><div class="line">                + <span class="string">"                 age integer not null,"</span></div><div class="line">                + <span class="string">"                 sex text not null)"</span>);</div><div class="line">        <span class="comment">//插入测试数据</span></div><div class="line">        db.execSQL(<span class="string">"insert into stutb(name,sex,age) values('王马','女',20)"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//当数据库的版本发生变化时，会自动执行该方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中使用SQLiteOpenHelper的子类<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//SQLiteOpenHelper的用法</span></div><div class="line"><span class="comment">//1、实例化SQLiteOpenHelper的子类</span></div><div class="line">DbOpenHelper helper = <span class="keyword">new</span> DbOpenHelper(MainActivity.this, <span class="string">"stu.db"</span>, <span class="built_in">null</span>, <span class="number">1</span>);</div><div class="line"><span class="comment">//2、获取一个可写的数据库实例</span></div><div class="line">SQLiteDatabase db = helper.getWritableDatabase();</div><div class="line"><span class="comment">//3、对数据库进行操作————同SQLiteDatabase类操作SQLite</span></div><div class="line">Cursor c = db.rawQuery(<span class="string">"select * from stutb"</span>, <span class="built_in">null</span>);</div><div class="line"><span class="keyword">if</span>(c!=<span class="built_in">null</span>)&#123;</div><div class="line">    <span class="keyword">String</span>[] <span class="built_in">cols</span> = c.getColumnNames();</div><div class="line">    <span class="keyword">while</span>(c.moveToNext())&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> colName: <span class="built_in">cols</span>) &#123;</div><div class="line">            <span class="built_in">Log</span>.i(<span class="string">"db"</span>,colName+<span class="string">":"</span>+c.getString(c.getColumnIndex(colName)));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    c.<span class="built_in">close</span>();</div><div class="line">&#125;</div><div class="line"><span class="comment">//4、关闭数据库连接</span></div><div class="line">db.<span class="built_in">close</span>();</div></pre></td></tr></table></figure></p>
<h2 id="数据存储之文件存储"><a href="#数据存储之文件存储" class="headerlink" title="数据存储之文件存储"></a>数据存储之文件存储</h2><p>android中文件存储的操作：</p>
<pre><code>- Activity的openFileOutput()方法可以用于把数据输出到文件中
- 创建的文件默认保存在/data/data/&lt;package name&gt;/files目录
- 实现过程与在Java中保存数据到文件中是一样的
- 写入文件需要在Manifest.xml中设置权限：
        &lt;uses-permission android:maxSdkVersion=&quot;19&quot; android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;
</code></pre><p>File类的方法介绍<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//得到当前应用程序的默认数据存储目录</span></div><div class="line"><span class="keyword">File</span> <span class="keyword">dir</span> = this.getFilesDir();</div><div class="line"></div><div class="line"><span class="comment">//得到外部的缓存存储位置，该位置的数据和内置的使用是一样。</span></div><div class="line"><span class="comment">//如果APP卸载了，这里面的数据会自动清除掉</span></div><div class="line"><span class="keyword">File</span> <span class="keyword">dir</span> = this.getExternalFilesDir(<span class="keyword">type</span>);</div><div class="line"></div><div class="line"><span class="comment">//得到当前应用程序的默认的缓存文件的存放位置，</span></div><div class="line"><span class="comment">//把一些不是非常重要的文件存储到此使用</span></div><div class="line"><span class="comment">//如果手机内存不足时，系统自动删除App中的cache目录中的数据</span></div><div class="line"><span class="keyword">File</span> <span class="keyword">dir</span> = this.getCacheDir();</div><div class="line">    </div><div class="line"><span class="comment">//在data/data/&lt;包名&gt;/app_xxx目录下存放文件</span></div><div class="line"><span class="keyword">File</span>  <span class="keyword">dir</span> = this.getDir(<span class="string">"imooc"</span>, MODE_PRIVATE);</div><div class="line">    </div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 文件的权限：</div><div class="line">    * MODE_PRIVATE ———— 为默认操作模式，代表该文件是私有数据，只能被应用本身访问，在该模式下，</div><div class="line">    * 写入的内容会覆盖原文件的内容。</div><div class="line">    * MODE_APPEND ———— 该模式会检查文件是否存在，存在就往文件追加内容，否则就创建新文件</div><div class="line">    * </div><div class="line">    * MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE</div><div class="line">    *   用来控制其他应用是否有权限读写该文件</div><div class="line">    * MODE_WORLD_READABLE</div><div class="line">    *   表示当前文件可以被其他应用读取</div><div class="line">    * MODE_WORLD_WRITEABLE</div><div class="line">    *   表示当前文件可以被其他应用读取和写入</div><div class="line">    * */</div></pre></td></tr></table></figure></p>
<p>文件写入读取代码示例<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> MainActivity extends Activity &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> TextView show;</div><div class="line">    <span class="keyword">private</span> EditText tv;</div><div class="line">    <span class="keyword">private</span> Button btn;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        tv = (EditText)findViewById(R.id.tv);</div><div class="line">        show = (TextView)findViewById(R.id.show);</div><div class="line">        btn = (Button)findViewById(R.id.btn);</div><div class="line">        </div><div class="line"><span class="comment">//      //一、在Android中创建文件</span></div><div class="line">        <span class="comment">//test.txt文件存储在/mnt/media_rw/sdcard/下</span></div><div class="line">        <span class="built_in">File</span> file = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"/mnt/sdcard/test.txt"</span>);</div><div class="line"><span class="comment">//        if (!file.exists()) &#123;</span></div><div class="line"><span class="comment">//          try &#123;</span></div><div class="line"><span class="comment">//              file.createNewFile();</span></div><div class="line"><span class="comment">//          &#125; catch (IOException e) &#123;</span></div><div class="line"><span class="comment">//              e.printStackTrace();</span></div><div class="line"><span class="comment">//          &#125;</span></div><div class="line"><span class="comment">//      &#125;else&#123;</span></div><div class="line"><span class="comment">//          Toast.makeText(MainActivity.this, "文件已存在", Toast.LENGTH_SHORT).show();</span></div><div class="line"><span class="comment">//      &#125;</span></div><div class="line"><span class="comment">//      //删除文件</span></div><div class="line">        <span class="comment">//file.delete();</span></div><div class="line"><span class="comment">//        </span></div><div class="line"></div><div class="line">          <span class="comment">//二、在Android中读写文件</span></div><div class="line">          btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                </div><div class="line">                @Override</div><div class="line">                <span class="keyword">public</span> <span class="keyword">void</span> onClick(View v) &#123;</div><div class="line">                    <span class="comment">//向文件中写入内容并保存</span></div><div class="line">                    writeAndSaveFile(tv.getText().toString());</div><div class="line">                </div><div class="line">                    <span class="comment">//读取文件中的内容</span></div><div class="line">                    show.setText(readFile());</div><div class="line">                &#125;</div><div class="line">            &#125;); </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//向文件中写入内容并保存————使用二进制写入</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> writeAndSaveFile(<span class="keyword">String</span> con) &#123;</div><div class="line">        <span class="comment">//Activity的openFileOutput()方法可以用于把数据输出到文件中</span></div><div class="line">        <span class="built_in">try</span> &#123;</div><div class="line">            <span class="comment">//如果t.txt文件不存在则创建，并向其中写入内容，</span></div><div class="line">            <span class="comment">//该文件默认位于/data/data/&lt;package name&gt;/files目录下</span></div><div class="line">            FileOutputStream fos = openFileOutput(<span class="string">"t.txt"</span>,MODE_PRIVATE);</div><div class="line">            fos.<span class="built_in">write</span>(con.getBytes());</div><div class="line">            fos.<span class="built_in">close</span>();</div><div class="line">        &#125; <span class="built_in">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//读取文件内容————使用二进制读取</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> readFile() &#123;</div><div class="line">        <span class="keyword">String</span> con = null;</div><div class="line">        <span class="built_in">try</span> &#123;</div><div class="line">            FileInputStream fis = openFileInput(<span class="string">"t.txt"</span>);</div><div class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            <span class="comment">//定义一个字节buffer</span></div><div class="line">            <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">            <span class="comment">//每次从fis中读取一个字节buffer，直到把fis读完</span></div><div class="line">            <span class="built_in">while</span>((len = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>))!=<span class="number">-1</span>)&#123;</div><div class="line">                baos.<span class="built_in">write</span>(<span class="built_in">buffer</span>,<span class="number">0</span>,len);</div><div class="line">            &#125;</div><div class="line">            con = baos.toString();</div><div class="line">            fis.<span class="built_in">close</span>();</div><div class="line">            </div><div class="line">        &#125; <span class="built_in">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> con;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注：<br>1、android下的数据安全策略<br>当应用程序在安装时系统就会分配给它一个userid，当该应用要去访问其他资源比如文件时，就需要userid匹配。默认情况下，任何应用创建的文件，sharedprefences、数据库都应该是私有的(位于/data/data/<package name="">/files)，其他程序无法访问。除非在创建时指定了Context.MODE_WORLD_READABLE或Context.MODE_WORLD_WRITEABLE,只要这样其他程序才能正确访问。</package></p>
<p>2、如果开发者不遵守————即未将将数据放入/data/data/&lt;包名&gt;或/mnt/sdcard/Android/data/&lt;包名&gt;。卸载之后数据将不会自动清除掉，产生数据垃圾。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android入门四]]></title>
      <url>https://aiolos123.github.io/2016/09/14/learn-android-step-by-step-four/</url>
      <content type="html"><![CDATA[<p>本文为android入门的第三课，学习了Android开发中常用的调试方式，对话框、提示菜单、动画效果的相关知识。<br>学习来源：<a href="http://www.imooc.com/learn/142" target="_blank" rel="external">http://www.imooc.com/learn/142</a><br><a id="more"></a></p>
<h2 id="使用Debug方式调试程序"><a href="#使用Debug方式调试程序" class="headerlink" title="使用Debug方式调试程序"></a>使用Debug方式调试程序</h2><p>Debug调试作用：可以快速准确定位到错误问题的位置，以及它的调用关系。</p>
<p>Debug调试过程：<br>1、双击行号添加断点<br>2、开始Debug程序，通过Debug As运行程序<br>3、程序运行到断点位置会自动停止到断点代码处<br>    Debug界面：<br>        1、程序调用栈————后进先出<br>        2、变量值窗口————查看变量的当前值<br>        3、程序窗口————鼠标放到变量上可显示该变量的当前值<br>4、开始追踪程序</p>
<pre><code>F6：逐行追踪
F5：进入方法
F7：跳出方法
F8：下一个断点或结束Debug
</code></pre><p>5、退出Debug模式<br>    点击IDE菜单图标Disconnect，可退出Debug模式</p>
<h2 id="使用LogCat方式调试程序"><a href="#使用LogCat方式调试程序" class="headerlink" title="使用LogCat方式调试程序"></a>使用LogCat方式调试程序</h2><p>LogCat是用来获取系统日志信息的工具，可以得到的信息包括：<br>Dalvik虚拟机信息、进程信息、Android运行时信息，以及应用程序信息。</p>
<p>与Debug调试的区别：<br>1、Debug一般用于相对比较复杂的问题；LogCat用于相对容易追踪的问题；<br>2、Debug是重量级调试方式；LogCat是轻便简洁的调试方式。</p>
<p>LogCat窗口介绍：<br>    左侧————日志的过滤器，默认仅有all messages一个过滤器，输出所有日志信息；但可以点击绿色的”+”来添加自定义的过滤器。<br>        Filter Name:  随意命名<br>        by Log Tag:   根据Tag名称过滤，一般都是通过tag过滤<br>        by Log Message:  根据日志信息过滤<br>        by PID:   根据PID过滤<br>        by Application Name:  根据应用程序包名过滤，也使用的较多<br>        by Log Level:  根据日志级别过滤<br>    右侧————是输出的log信息,包括Level(日志级别)、Time(日志输出时间)、PID(进程ID)、TID(线程ID)、Application(日志所属的应用程序包名)、Tag(日志标签)、Text(日志信息内容)<br>        右侧窗口的下拉菜单————筛选显示日志的级别，只显示比其级别高的日志</p>
<p>Log日志级别:<br>    Log.v(tag,msg);  //verbose模式，打印最详细的日志，输出颜色为黑色<br>    Log.d(tag,msg);  //debug级别的日志，颜色为蓝色<br>    Log.i(tag,msg);  //info级别的日志，颜色为绿色<br>    Log.w(tag,msg);  //warn级别的日志，颜色为橙色————需要查看原因了<br>    Log.e(tag,msg);  //error级别的日志，颜色为红色————需要查看原因了</p>
<p>错误信息的级别最高，其次是警告信息，然后是通知信息及Debug信息，最低是详细信息<br>从日志的输出数量来算：error、warn、info、debug、verbose数量从少到多</p>
<pre><code>tag是用来标记Log信息的源头；msg是这条Log的内容
</code></pre><p>LogCat调试过程：<br>    1、显示LogCat窗口<br>    Window菜单–&gt;Show View–&gt;Other –&gt;Android–&gt;LogCat，点击OK<br>    2、如果日志的级别是warn或者error时，就需要查看错误原因了。其他级别的日志可忽略。<br>双击log日志的特定信息，即可定位到程序的对应行上。<br><strong>查看log日志，从上向下看</strong></p>
<p>3、在程序中添加程序日志方法，来对程序进行简单的追踪。<br>    Log.v(“标签”,”log日志信息”)<br>    Log.d(“标签”,”log日志信息”)<br>    Log.i(“标签”,”log日志信息”)<br>    Log.w(“标签”,”log日志信息”)<br>    Log.e(“标签”,”log日志信息”)</p>
<p>4、筛选log日志<br>在LogCat窗口的左侧，可以添加自定义筛选日志的过滤器，然后选中该过滤器，即可查看到相关过滤后的日志信息</p>
<h2 id="使用Toast动态显示信息"><a href="#使用Toast动态显示信息" class="headerlink" title="使用Toast动态显示信息"></a>使用Toast动态显示信息</h2><p>Toast是一种提供给用户简洁提示信息的视图。<br>作用：在不影响用户使用程序的基础上，向用户输出提示信息。<br>    Toast视图以浮于应用程序之上的形式呈现给用户，Toast提示界面不获取焦点，<br>    所以不影响用户的操作。Toast提示就是在不影响用户使用程序的同时，给用户提供<br>    某些提示信息。如删除成功、保存成功的提示框。</p>
<h3 id="Toast的常规用法"><a href="#Toast的常规用法" class="headerlink" title="Toast的常规用法"></a>Toast的常规用法</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.main</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//Android提供了Toast类可以创建和显示Toast信息</span></div><div class="line"></div><div class="line">        <span class="comment">//通过Toast.makeText(context,text,duration)方法返回Toast对象</span></div><div class="line">        Toast toast = Toast<span class="selector-class">.makeText</span>(this, <span class="string">"显示默认Toast"</span>, Toast.LENGTH_SHORT);</div><div class="line">        </div><div class="line">        <span class="comment">//也可调用R.string中的内容为提示信息</span></div><div class="line">        <span class="comment">//Toast.makeText(this, R.string.app_name, Toast.LENGTH_SHORT).show();</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置toast的自定义位置</span></div><div class="line">        <span class="comment">//gravity参数表示位置</span></div><div class="line">        <span class="comment">//xOffset、yOffset为相对于当前位置的偏移量</span></div><div class="line">        toast<span class="selector-class">.setGravity</span>(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//设置提示内容</span></div><div class="line">        toast<span class="selector-class">.setText</span>(<span class="string">"改变提示内容"</span>);</div><div class="line">        <span class="comment">//设置持续时间</span></div><div class="line">        toast<span class="selector-class">.setDuration</span>(<span class="number">1000</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//设置带图片的Toast</span></div><div class="line">            <span class="comment">//a、通过toast.getView()获取toast的布局，并强制转换为LinearLayout类型</span></div><div class="line">        LinearLayout toast_layout = (LinearLayout)toast<span class="selector-class">.getView</span>();</div><div class="line">            <span class="comment">//b、定义ImageView对象添加到toast布局中</span></div><div class="line">        ImageView iv = new ImageView(this);</div><div class="line">        iv<span class="selector-class">.setImageResource</span>(R.drawable.ic_launcher);</div><div class="line">        toast_layout<span class="selector-class">.addView</span>(iv,<span class="number">0</span>);<span class="comment">//图片位于文字上方</span></div><div class="line">        </div><div class="line">        <span class="comment">//显示Toast</span></div><div class="line">        toast<span class="selector-class">.show</span>();</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="完全自定义Toast"><a href="#完全自定义Toast" class="headerlink" title="完全自定义Toast"></a>完全自定义Toast</h3><p>1、自定义Toast布局文件，如命名为tst_layout.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"30dp"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"这是自定义的Toast"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"内容部分，可以随便写"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中，使用自定义Toast<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.main);</div><div class="line">        </div><div class="line">        <span class="comment">//完全自定义的Toast的步骤</span></div><div class="line">        <span class="comment">//1、创建Toast对象</span></div><div class="line">        <span class="type">Toast</span> to = <span class="keyword">new</span> <span class="type">Toast</span>(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//2、获取自定义的toast布局视图</span></div><div class="line">        <span class="type">LayoutInflater</span> infl = <span class="type">LayoutInflater</span>.from(<span class="keyword">this</span>);</div><div class="line">        <span class="type">View</span> tst_view = infl.inflate(<span class="type">R</span>.layout.tst_layout, <span class="literal">null</span>);</div><div class="line">        <span class="comment">//3、设置自定义的toast视图</span></div><div class="line">        to.setView(tst_view);</div><div class="line">        <span class="comment">//4、显示Toast</span></div><div class="line">        to.show();</div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用AlertDialog实现提示框"><a href="#使用AlertDialog实现提示框" class="headerlink" title="使用AlertDialog实现提示框"></a>使用AlertDialog实现提示框</h2><p>Dialog对话框是在当前界面弹出的一个小窗口，用于显示重要提示信息————提示用户输入信息，确认信息，或者显示某种状态，如下载进度，退出提示等等。一般情况下，用户要与对话框进行交互，然后返回到被遮盖的界面以继续运行当前的应用程序。</p>
<p>5种常见的Dialog对话框<br>    1、确认对话框<br>    2、单项按钮对话框<br>    3、多选按钮对话框<br>    4、列表对话框<br>    5、自定义对话框</p>
<p>AlertDialog.Builder的常用方法</p>
<pre><code>要创建一个AlertDialog，就要用到AlertDialog.Builder对象的create()方法

AlertDialog.Builder对象的其他常用方法：
    setTitle   为对话框设置标题
    setIcon    为对话框设置图标
    setMessage  为对话框设置内容
    setView     为对话框设置自定义布局视图
    setItems    为对话框设置要显示的一个list，一般用于显示几个命令时
    setMultiChoiceItems  为对话框设置显示一系列的复选框
    setSingleChoiceItems  为对话框设置单选按钮

    setNeutralButton   为对话框设置普通按钮
    setPositiveButton  为对话框设置确认按钮
    setNegativeButton  为对话框设置取消按钮
</code></pre><h3 id="确认对话框"><a href="#确认对话框" class="headerlink" title="确认对话框"></a>确认对话框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Button showDialog;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        showDialog = (Button)findViewById(R.id.showDialog);</div><div class="line">        </div><div class="line">        showDialog.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">//调用创建并显示确认对话框方法</span></div><div class="line">                showConfirmDialog();</div><div class="line"></div><div class="line">                <span class="comment">//调用创建并显示单选对话框方法</span></div><div class="line">                <span class="comment">//showSingleChoiceDialog();</span></div><div class="line">                <span class="comment">//调用创建并显示多选对话框方法</span></div><div class="line">                <span class="comment">//showMultiChoicesDialog();</span></div><div class="line">                <span class="comment">//调用创建并显示列表对话框方法</span></div><div class="line">                <span class="comment">//showListDialog();</span></div><div class="line">                <span class="comment">//调用创建并显示自定义对话框方法</span></div><div class="line">                showCustomDialog();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//创建并显示确认对话框</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showConfirmDialog</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">//1、创建对话框</span></div><div class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//2、设置对话框的样式和内容</span></div><div class="line">        <span class="comment">//设置标题</span></div><div class="line">        builder.setTitle(<span class="string">"确认对话框"</span>);</div><div class="line">        <span class="comment">//设置图标</span></div><div class="line">        builder.setIcon(R.drawable.ic_launcher);</div><div class="line">        <span class="comment">//设置提示内容</span></div><div class="line">        builder.setMessage(<span class="string">"确认对话框的提示内容"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//4、设置取消按钮</span></div><div class="line">        builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"点击了取消按钮"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//3、设置确认按钮</span></div><div class="line">        builder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"点击了确认按钮"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//5、获取确认对话框</span></div><div class="line">        AlertDialog dialog = builder.create();</div><div class="line">        <span class="comment">//6、显示确认对话框</span></div><div class="line">        dialog.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="单选对话框"><a href="#单选对话框" class="headerlink" title="单选对话框"></a>单选对话框</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、全局变量---声明单选的项目</span></div><div class="line"><span class="keyword">private</span> String[] single_list = &#123;<span class="string">"男"</span>,<span class="string">"女"</span>,<span class="string">"女博士"</span>,<span class="string">"程序员"</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">//创建并显示单选对话框</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">showSingleChoiceDialog</span><span class="params">()</span></span>&#123;</div><div class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//2、设置对话框的样式和内容</span></div><div class="line">    <span class="comment">//设置标题</span></div><div class="line">    builder.setTitle(<span class="string">"单选对话框-请选择性别"</span>);</div><div class="line">    <span class="comment">//设置图标</span></div><div class="line">    builder.setIcon(R.drawable.ic_launcher);</div><div class="line">    </div><div class="line">    <span class="comment">//3、设置单选对话框</span></div><div class="line">    builder.setSingleChoiceItems(single_list, <span class="number">0</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            <span class="comment">//which 选中哪一项</span></div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"已选中"</span>+single_list[which],Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);<span class="comment">//参数的0表示默认选中第一项</span></div><div class="line">    </div><div class="line">    <span class="comment">//4、获取对话框</span></div><div class="line">    AlertDialog dialog = builder.create();</div><div class="line">    </div><div class="line">    <span class="comment">//5、显示对话框</span></div><div class="line">    dialog.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多选按钮对话框"><a href="#多选按钮对话框" class="headerlink" title="多选按钮对话框"></a>多选按钮对话框</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、全局变量---声明多选项目</span></div><div class="line"><span class="keyword">private</span> String[] multi_list = &#123;<span class="string">"足球"</span>,<span class="string">"篮球"</span>,<span class="string">"乒乓球"</span>,<span class="string">"羽毛球"</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">//创建并显示多选对话框</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">showMultiChoicesDialog</span><span class="params">()</span></span>&#123;</div><div class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//2、设置对话框的样式和内容</span></div><div class="line">    <span class="comment">//设置标题</span></div><div class="line">    builder.setTitle(<span class="string">"多选对话框-请选择爱好"</span>);</div><div class="line">    <span class="comment">//设置图标</span></div><div class="line">    builder.setIcon(R.drawable.ic_launcher);</div><div class="line">    </div><div class="line">    <span class="comment">//3、设置多选对话框</span></div><div class="line">    builder.setMultiChoiceItems(multi_list, <span class="keyword">null</span>, <span class="keyword">new</span> OnMultiChoiceClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</div><div class="line">            <span class="comment">//which  数组下标</span></div><div class="line">            <span class="comment">//isChecked  是否选中</span></div><div class="line">            <span class="keyword">if</span>(isChecked)&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"喜欢"</span>+multi_list[which],Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"不喜欢"</span>+multi_list[which],Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);<span class="comment">//参数null表示默认没有选中项</span></div><div class="line">    </div><div class="line">    <span class="comment">//4、设置取消按钮</span></div><div class="line">    builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            dialog.dismiss();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">//5、获取对话框</span></div><div class="line">    AlertDialog dialog = builder.create();</div><div class="line">    </div><div class="line">    <span class="comment">//6、显示对话框</span></div><div class="line">    dialog.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="列表对话框"><a href="#列表对话框" class="headerlink" title="列表对话框"></a>列表对话框</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明列表项</span></div><div class="line"><span class="keyword">private</span> String[] list_items = &#123;<span class="string">"项目经理"</span>,<span class="string">"美工"</span>,<span class="string">"策划"</span>,<span class="string">"程序员"</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">//创建并显示列表对话框</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">showListDialog</span><span class="params">()</span></span>&#123;</div><div class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//2、设置对话框的样式和内容</span></div><div class="line">    <span class="comment">//设置标题</span></div><div class="line">    builder.setTitle(<span class="string">"列表对话框-请选择部门"</span>);</div><div class="line">    <span class="comment">//设置图标</span></div><div class="line">    builder.setIcon(R.drawable.ic_launcher);</div><div class="line">    </div><div class="line">    <span class="comment">//3、设置列表对话框</span></div><div class="line">    builder.setItems(list_items, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"我动了"</span>+list_items[which],Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">//4、设置取消按钮</span></div><div class="line">    builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            dialog.dismiss();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">//5、获取对话框</span></div><div class="line">    AlertDialog dialog = builder.create();</div><div class="line">    </div><div class="line">    <span class="comment">//6、显示对话框</span></div><div class="line">    dialog.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义对话框"><a href="#自定义对话框" class="headerlink" title="自定义对话框"></a>自定义对话框</h3><p>1、创建自定义对话框的布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span> </span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"输入内容"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"提交"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/custom"</span>/&gt;</div><div class="line">       </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line">     <span class="tag">&lt;<span class="name">ImageView</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中使用自定义对话框<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建并显示自定义对话框</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">showCustomDialog</span><span class="params">()</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//1、通过LayoutInflater获取自定义对话框的布局</span></div><div class="line">    LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</div><div class="line">    View view = inflater.inflate(R.layout.custom_dialog, <span class="keyword">null</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//2、设置对话框的样式和内容</span></div><div class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">//设置标题</span></div><div class="line">    builder.setTitle(<span class="string">"自定义对话框"</span>);</div><div class="line">    <span class="comment">//设置图标</span></div><div class="line">    builder.setIcon(R.drawable.ic_launcher);</div><div class="line">    </div><div class="line">    <span class="comment">//3、设置自定义布局视图</span></div><div class="line">    builder.setView(view);</div><div class="line"></div><div class="line">    <span class="comment">//4、设置取消按钮</span></div><div class="line">    builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            <span class="comment">//关闭对话框</span></div><div class="line">            dialog.dismiss(); </div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">//5、获取对话框</span></div><div class="line">    AlertDialog dialog = builder.create();</div><div class="line">    </div><div class="line">    <span class="comment">//6、显示对话框</span></div><div class="line">    dialog.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用Notification实现状态通知栏的通知"><a href="#使用Notification实现状态通知栏的通知" class="headerlink" title="使用Notification实现状态通知栏的通知"></a>使用Notification实现状态通知栏的通知</h2><p>1、Notification通知栏通知：<br>    Notification是显示在手机状态栏的消息(手机状态栏位于手机最顶端)，<br>代表一种全局效果的通知。</p>
<p>2、通知栏的显示内容：<br>    图标<br>    标题<br>    内容<br>    时间<br>    点击后的响应</p>
<p>3、如何实现通知栏通知<br>主要用到两个类：<br>    NotificationManager————管理通知，控制通知的显示与取消，主要有如下俩个方法<br>        显示通知栏  notify(id,notification)<br>        取消通知栏  cancle(id)<br>    Notification————设置通知的显示内容及点击后的响应、设置声音提示、指示灯、以及震动效果</p>
<p>主要步骤：<br>    获取NotificationManager对象用于控制通知的显示与取消<br>    构造Notification对象并设置显示内容，还可以设置声音提示、指示灯、以及震动效果。</p>
<p>4、具体代码示例<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>&#123;</span></div><div class="line">    </div><div class="line">    <span class="comment">//10、声明通知控制类</span></div><div class="line">    <span class="keyword">private</span> NotificationManager manager;</div><div class="line">    <span class="comment">//声明notification的ID,默认为0</span></div><div class="line">    <span class="keyword">int</span> notification_id;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//11、获取通知控制类，NotificationManager是系统常用服务</span></div><div class="line">        manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line">        <span class="comment">//为Button对象绑定事件监听器</span></div><div class="line">        findViewById(R.id.send).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        findViewById(R.id.cancle).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//实现事件监听器</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onClick(View v) &#123;</div><div class="line">        <span class="keyword">switch</span>(v.getId())&#123;</div><div class="line">            <span class="comment">//发送通知按钮被点击</span></div><div class="line">            <span class="keyword">case</span> R.id.<span class="string">send:</span>&#123;</div><div class="line">                sendNotification();</div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;</div><div class="line">            <span class="comment">//取消通知按钮被点击</span></div><div class="line">            <span class="keyword">case</span> R.id.<span class="string">cancle:</span>&#123;</div><div class="line">                <span class="comment">//13、通过NotificationManager取消已发送的通知</span></div><div class="line">                manager.cancel(notification_id);</div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//构造Notification并发送到通知栏</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> sendNotification() &#123;</div><div class="line">        <span class="comment">//1、构造Notification对象</span></div><div class="line">        Builder builder = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//2、设置在手机状态栏的图标</span></div><div class="line">        builder.setSmallIcon(R.drawable.ic_launcher);</div><div class="line">        <span class="comment">//3、设置在手机状态栏的提示</span></div><div class="line">        builder.setTicker(<span class="string">"hello"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//4、设置在通知栏的通知时间</span></div><div class="line">        builder.setWhen(System.currentTimeMillis());</div><div class="line">        <span class="comment">//5、设置在通知栏的通知标题</span></div><div class="line">        builder.setContentTitle(<span class="string">"通知栏通知"</span>);</div><div class="line">        <span class="comment">//6、设置在通知栏的通知内容</span></div><div class="line">        builder.setContentText(<span class="string">"我来自火星"</span>);</div><div class="line">        <span class="comment">//7、设置在通知栏的点击响应intent</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MainActivity.<span class="keyword">class</span>);<span class="comment">//点击通知启动该MainActivity类</span></div><div class="line">        PendingIntent  pintent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, <span class="number">0</span>);</div><div class="line">        builder.setContentIntent(pintent);</div><div class="line">        <span class="comment">//8、设置声音提示、指示灯、震动效果</span></div><div class="line">        <span class="comment">//设置指示灯或震动效果都需要在Manifest.xml中配置相关权限</span></div><div class="line">        <span class="comment">//&lt;uses-permission android:name="android.permission.FLASHLIGHT"/&gt;</span></div><div class="line">        <span class="comment">//&lt;uses-permission android:name="android.permission.VIBRATE"/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">//builder.setDefaults(Notification.DEFAULT_SOUND);</span></div><div class="line">        <span class="comment">//builder.setDefaults(Notification.DEFAULT_LIGHTS);//指示灯</span></div><div class="line">        <span class="comment">//builder.setDefaults(Notification.DEFAULT_VIBRATE);//震动效果</span></div><div class="line">        <span class="comment">//设置声音提示、指示灯、震动效果的以上三局代码也可以使用如下语句实现</span></div><div class="line">        builder.setDefaults(Notification.DEFAULT_ALL);</div><div class="line">        </div><div class="line">        <span class="comment">//通知消息会在被点击后自动消失</span></div><div class="line">        <span class="comment">//builder.setAutoCancel(true); </span></div><div class="line">        </div><div class="line">        <span class="comment">//9、获取Notification对象</span></div><div class="line">        <span class="comment">//安卓4.1及以上使用如下代码获取Notification对象</span></div><div class="line">        Notification notifi = builder.build();</div><div class="line">        <span class="comment">//安卓4.1以下使用如下代码获取Notification对象</span></div><div class="line">        <span class="comment">//Notification notifi = builder.getNotification();</span></div><div class="line">        <span class="comment">//12、通过NotificationManager显示通知</span></div><div class="line">        manager.notify(notification_id,notifi);</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用OptionsMenu实现选项菜单"><a href="#使用OptionsMenu实现选项菜单" class="headerlink" title="使用OptionsMenu实现选项菜单"></a>使用OptionsMenu实现选项菜单</h2><p>安卓中有三种类型的菜单：<br>    OptionsMenu 选项菜单 ————按menu物理按键弹出的菜单<br>    ContextMenu 上下文菜单<br>    SubMenu 子菜单</p>
<p>实现选项菜单的步骤：<br>    1、创建选项菜单————在Activity中重写onCreateOptionsMenu()<br>    2、设置菜单项————在onCreateOptionsMenu()中完成<br>         设置菜单项的2种方法：<br>                通过用menuadd()动态添加菜单项<br>                用xml设置菜单项， 通过MenuInflater.infalte()添加<br>    3、设置菜单项点击事件监听器————重写onOptionsItemSelected() </p>
<h3 id="通过xml配置OptionsMenu选项菜单的示例"><a href="#通过xml配置OptionsMenu选项菜单的示例" class="headerlink" title="通过xml配置OptionsMenu选项菜单的示例"></a>通过xml配置OptionsMenu选项菜单的示例</h3><p>1、在选项菜单布局xml文件中配置菜单项，保存该文件到/res/menu/main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;menu xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    tools:context=<span class="string">"com.example.howtouseoptionsmenu.MainActivity"</span> &gt;</div><div class="line"></div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/action_settings"</span></div><div class="line">        android:orderInCategory=<span class="string">"100"</span></div><div class="line">        android:showAsAction=<span class="string">"never"</span></div><div class="line">        android:title=<span class="string">"@string/action_settings"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/menu1"</span></div><div class="line">        android:orderInCategory=<span class="string">"100"</span></div><div class="line">        android:showAsAction=<span class="string">"never"</span></div><div class="line">        android:title=<span class="string">"菜单一"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/menu2"</span></div><div class="line">        android:orderInCategory=<span class="string">"100"</span></div><div class="line">        android:showAsAction=<span class="string">"never"</span></div><div class="line">        android:title=<span class="string">"菜单二"</span>/&gt;</div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中使用xml布局文件<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//1、重写onCreateOptionsMenu()方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        <span class="comment">//2、通过inflate()配置OptionsMenu的菜单项</span></div><div class="line">        getMenuInflater()<span class="selector-class">.inflate</span>(R.menu.main, menu);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//3、重写OptionsMenu菜单项点击事件监听器</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">        <span class="comment">//参数item为点击的菜单项</span></div><div class="line">        <span class="selector-tag">switch</span> (item.getItemId()) &#123;</div><div class="line">        case R<span class="selector-class">.id</span><span class="selector-class">.menu1</span>:</div><div class="line">            <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"点击了菜单一"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">            break;</div><div class="line"></div><div class="line">        case R<span class="selector-class">.id</span><span class="selector-class">.menu2</span>:</div><div class="line">            <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"点击了菜单二"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        return super.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="动态添加OptionsMenu选项菜单的示例"><a href="#动态添加OptionsMenu选项菜单的示例" class="headerlink" title="动态添加OptionsMenu选项菜单的示例"></a>动态添加OptionsMenu选项菜单的示例</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//1、重写onCreateOptionsMenu()方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        <span class="comment">//2、通过inflate()配置OptionsMenu的菜单项</span></div><div class="line">        <span class="comment">//getMenuInflater().inflate(R.menu.main, menu);</span></div><div class="line">        </div><div class="line">        <span class="comment">//2、通过用menuadd()动态添加菜单项</span></div><div class="line">        <span class="comment">//menu.add(菜单分组ID, 菜单项ID, 菜单项的排序, 菜单项的名称);</span></div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="string">"菜单一"</span>);</div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="string">"菜单二"</span>);</div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">102</span>, <span class="number">1</span>, <span class="string">"菜单三"</span>);</div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">103</span>, <span class="number">1</span>, <span class="string">"菜单四"</span>);</div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">104</span>, <span class="number">1</span>, <span class="string">"菜单五"</span>);</div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">105</span>, <span class="number">1</span>, <span class="string">"菜单六"</span>);</div><div class="line">        MenuItem item = menu.add(<span class="number">1</span>, <span class="number">106</span>, <span class="number">1</span>, <span class="string">"菜单七"</span>);</div><div class="line">        item.setTitle(<span class="string">"菜单last"</span>);<span class="comment">//设置菜单项名称</span></div><div class="line">        item.setIcon(R.drawable.ic_launcher);<span class="comment">//仅在API&lt;11 上有效</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//3、重写菜单项点击事件</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理动态添加的菜单项</span></div><div class="line">        <span class="keyword">case</span> <span class="number">100</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击了动态添加菜单一"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">101</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击了动态添加菜单二"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">102</span>:</div><div class="line">            //实现点击菜单项从MainActivity页面跳转到另一个页面SecondActivity</div><div class="line">            //SecondActivity中定义了跳转后的页面视图及使用到的布局xml文件</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,SecondActivity.class);</div><div class="line">            item.setIntent(intent);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用ContextMenu实现上下文菜单"><a href="#使用ContextMenu实现上下文菜单" class="headerlink" title="使用ContextMenu实现上下文菜单"></a>使用ContextMenu实现上下文菜单</h2><p>ContextMenu————长按时弹出的菜单</p>
<p>ContextMenu的组成：<br>    标题及标题图标<br>    菜单项<br>    菜单项点击响应事件</p>
<p>实现上下文菜单的步骤：<br>    1、给View注册上下文菜单————registerForContextMenu()<br>    2、为上下文菜单添加菜单项————重写onCreateContextMenu()<br>        添加菜单项的2种方式：<br>            通过代码动态添加菜单项<br>            通过加载xml文件中的菜单项<br>    3、设置菜单点击响应事件—————重写onContextItemSelected()</p>
<p>实现上下文菜单的代码示例<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        showListView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置ListView的显示内容</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">showListView</span><span class="params">()</span> </span>&#123;</div><div class="line">        ListView lv = (ListView)findViewById(R.id.lv);</div><div class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;</div><div class="line">            (<span class="keyword">this</span>, android.R.layout.simple_list_item_1,getData());</div><div class="line">        </div><div class="line">        lv.setAdapter(adapter);</div><div class="line">        </div><div class="line">        <span class="comment">//为listview设置上下文菜单，长按某个listview的item弹出上下文菜单</span></div><div class="line">        <span class="comment">//1、为view注册上下文菜单</span></div><div class="line">        <span class="keyword">this</span>.registerForContextMenu(lv);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//2、重写onCreateContextMenu()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreateContextMenu</span><span class="params">(ContextMenu menu, View v,</span></span></div><div class="line">            ContextMenuInfo menuInfo) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreateContextMenu(menu, v, menuInfo);</div><div class="line">        </div><div class="line">        <span class="comment">//2.1、设置上下文菜单menu显示的内容</span></div><div class="line">        menu.setHeaderTitle(<span class="string">"文件操作"</span>);</div><div class="line">        menu.setHeaderIcon(R.drawable.ic_launcher);</div><div class="line">        </div><div class="line">        <span class="comment">//2.2、为上下文菜单添加菜单项</span></div><div class="line">        <span class="comment">//动态添加菜单项</span></div><div class="line">        <span class="comment">//menu.add(分组ID, 菜单项ID, 排列顺序, 菜单项名称)</span></div><div class="line">        menu.add(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">"复制"</span>);</div><div class="line">        menu.add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">"粘贴"</span>);</div><div class="line">        menu.add(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">"剪切"</span>);</div><div class="line">        menu.add(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="string">"重命名"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//静态添加菜单项</span></div><div class="line">        <span class="comment">//首先在/res/menu/main.xml中设置菜单项</span></div><div class="line">        <span class="comment">//然后使用inflater添加xml文件</span></div><div class="line"><span class="comment">//      //MenuInflater inflater = getMenuInflater();</span></div><div class="line"><span class="comment">//      //inflater.inflate(R.menu.main,menu);</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//3、设置菜单项点击响应事件————重写onContextItemSelected()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onContextItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击复制"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击粘贴"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击剪切"</span>, Toast.LENGTH_SHORT).show();       </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"重命名"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onContextItemSelected</span><span class="params">(item)</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//构造ListView显示的数据</span></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; getData()&#123;</div><div class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">            list.add(<span class="string">"文件"</span>+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用SubMenu为选项菜单添加子菜单"><a href="#使用SubMenu为选项菜单添加子菜单" class="headerlink" title="使用SubMenu为选项菜单添加子菜单"></a>使用SubMenu为选项菜单添加子菜单</h2><p>子菜单：<br>    把功能相近的菜单分组显示</p>
<h3 id="动态添加submenu子菜单项"><a href="#动态添加submenu子菜单项" class="headerlink" title="动态添加submenu子菜单项"></a>动态添加submenu子菜单项</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//重写onCreateOptionsMenu()方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line"></div><div class="line">        <span class="comment">//1、添加子菜单</span></div><div class="line">        SubMenu file = menu<span class="selector-class">.addSubMenu</span>(<span class="string">"文件"</span>);</div><div class="line">        SubMenu edit = menu<span class="selector-class">.addSubMenu</span>(<span class="string">"编辑"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//2、为子菜单添加菜单项</span></div><div class="line">        file<span class="selector-class">.setHeaderTitle</span>(<span class="string">"文件操作"</span>);<span class="comment">//子菜单标题</span></div><div class="line">        file<span class="selector-class">.setHeaderIcon</span>(R.drawable.ic_launcher);<span class="comment">//子菜单图标</span></div><div class="line">        file<span class="selector-class">.add</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">"新建"</span>);</div><div class="line">        file<span class="selector-class">.add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">"打开"</span>);</div><div class="line">        file<span class="selector-class">.add</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">"保存"</span>);</div><div class="line">        </div><div class="line">        edit<span class="selector-class">.setHeaderTitle</span>(<span class="string">"编辑操作"</span>);</div><div class="line">        edit<span class="selector-class">.setHeaderIcon</span>(R.drawable.ic_launcher);</div><div class="line">        edit<span class="selector-class">.add</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">"复制"</span>);</div><div class="line">        edit<span class="selector-class">.add</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">"粘贴"</span>);</div><div class="line">        edit<span class="selector-class">.add</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">"剪切"</span>);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//3、重写onOptionsItemSelected()方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">        <span class="comment">//判断分组id</span></div><div class="line">        <span class="selector-tag">if</span>(item.getGroupId() == <span class="number">1</span>)&#123;</div><div class="line">            <span class="selector-tag">switch</span> (item.getItemId()) &#123;</div><div class="line">            case <span class="attribute">1</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击新建"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line"></div><div class="line">            case <span class="attribute">2</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击打开"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            case <span class="attribute">3</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击保存"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="selector-tag">else</span> <span class="selector-tag">if</span>(item.getGroupId() == <span class="number">2</span>)&#123;</div><div class="line">            <span class="selector-tag">switch</span> (item.getItemId()) &#123;</div><div class="line">            case <span class="attribute">1</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击复制"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line"></div><div class="line">            case <span class="attribute">2</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击粘贴"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            case <span class="attribute">3</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击剪切"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return super<span class="selector-class">.onOptionsItemSelected</span>(item);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="静态添加submenu子菜单项"><a href="#静态添加submenu子菜单项" class="headerlink" title="静态添加submenu子菜单项"></a>静态添加submenu子菜单项</h3><p>1、在xml文件中配置子菜单，在/res/menu/main.xml中编辑如下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.example.howtousesubmenu_40.MainActivity"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"文件"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 子菜单 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/new_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"新建"</span>/&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/open_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"打开"</span>/&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/save_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"保存"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"编辑"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 子菜单 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/copy_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"复制"</span>/&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/parse_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"粘贴"</span>/&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/cut_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"剪切"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中静态添加submenu子菜单项<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//重写onCreateOptionsMenu()方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        <span class="comment">//1、静态添加菜单项</span></div><div class="line">        getMenuInflater()<span class="selector-class">.inflate</span>(R.menu.main, menu);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//重写onOptionsItemSelected()</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">        <span class="selector-tag">switch</span> (item.getItemId()) &#123;</div><div class="line">            case R<span class="selector-class">.id</span><span class="selector-class">.copy_file</span>:</div><div class="line">                <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"点击复制"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">                break;</div><div class="line"></div><div class="line">            case R<span class="selector-class">.id</span><span class="selector-class">.parse_file</span>:</div><div class="line">                <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"点击粘贴"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">                break;</div><div class="line">            case R<span class="selector-class">.id</span><span class="selector-class">.cut_file</span>:</div><div class="line">                <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"点击剪切"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        return super.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="注意实现"><a href="#注意实现" class="headerlink" title="注意实现"></a>注意实现</h2><p>1、ContextMenu与OptionsMenu的区别<br>    OptionsMenu对应的是activity，一个Activity只能拥有一个选项菜单；<br>    ContextMenu对应的是View，每个View都可以设置上下文菜单；一般情况下，<br>    ContextMenu常用于ListView或GridView</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android入门三]]></title>
      <url>https://aiolos123.github.io/2016/09/12/learn-android-step-by-step-three/</url>
      <content type="html"><![CDATA[<p>本文为android入门的第二课的第二部分，学习了android高级控件、View视图的相关知识。<br>学习来源：<a href="http://www.imooc.com/learn/107" target="_blank" rel="external">http://www.imooc.com/learn/107</a><br><a id="more"></a></p>
<h2 id="Fragment基础"><a href="#Fragment基础" class="headerlink" title="Fragment基础"></a>Fragment基础</h2><p>android3.0引入Fragment的概念，主要目的是用在大屏幕设备上，如平板电脑，支持更加动态和灵活的UI设计。————类似于iframe</p>
<pre><code>1、Fragment可以作为Activity界面的一部分组成出现；
2、可以在一个Activity中同时出现多个Fragment，并且一个Fragment也可以在多个
Activity中使用；
3、在Activity运行过程中，可以添加、移除或替换Fragment；
4、Fragment可以响应自己的输入事件，并且有自己的生命周期，它们的生命周期会受宿主Activity的生命周期影响；
</code></pre><h3 id="Fragment设计哲学"><a href="#Fragment设计哲学" class="headerlink" title="Fragment设计哲学"></a>Fragment设计哲学</h3><p>Fragment在应用中是一个模块化和可重用的组件，因为Fragment定义了它自己的布局，以及通过使用它自己的生命周期回调方法定义了自己的行为，你可以将Fragment包含到多个Activity中。</p>
<h3 id="加载Fragment的两种方式"><a href="#加载Fragment的两种方式" class="headerlink" title="加载Fragment的两种方式"></a>加载Fragment的两种方式</h3><pre><code>静态加载和动态加载
</code></pre><h3 id="静态加载Fragment的四个步骤"><a href="#静态加载Fragment的四个步骤" class="headerlink" title="静态加载Fragment的四个步骤"></a>静态加载Fragment的四个步骤</h3><p>1、创建一个包含Fragment组件的布局文件<br>命名为main.xml<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        &lt;!<span class="attr">--</span>静态加载<span class="attr">Fragment</span>必须声明<span class="attr">fragment</span>的唯一<span class="attr">ID</span>或<span class="attr">tag--</span>&gt;</div><div class="line">        android:id="@+id/fragment"</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        <span class="comment">&lt;!--指定到自定义的Fragment子类--&gt;</span></div><div class="line">        android:name="com.example.testdemo.MyFragment"</div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、创建一个fragment布局文件<br>同普通的activity布局文件一样，命名为fragment.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span> </div><div class="line">        <span class="attr">...</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_fg"</span> </div><div class="line">        <span class="attr">...</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、创建继承自Fragment或其子类的java类<br>命名为：MyFragment.java<br>全路径为：com.example.testdemo.MyFragment————将在包含了Fragment组件的布局文件main.xml中用到该路径<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.testdemo;</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//自定义Fragment的子类的作用是——通过onCreateView()</span></div><div class="line">    <span class="comment">//实现将fragment布局文件fragment.xml转换成View对象</span></div><div class="line">    <span class="comment">//并完成其组件的初始化工作</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</div><div class="line">            <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//通过inflater.inflate()方法将fragment布局文件——fragment.xml转换成View对象</span></div><div class="line">        <span class="comment">//inflater.inflate(resource,root,attactToRoot)三个参数的含义：</span></div><div class="line">        <span class="comment">//resource: 需要加载的fragment布局文件</span></div><div class="line">        <span class="comment">//root: 加载fragment布局文件的父ViewGroup，以实现将fragment添加到activity中</span></div><div class="line">        <span class="comment">//attactToRoot:false表示不返回父ViewGroup;true表示返回父ViewGroup</span></div><div class="line">        <span class="type">View</span> view = inflater.inflate(<span class="type">R</span>.layout.fragment, container,<span class="literal">false</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//在fragment中使用findViewById()一定要加上view.</span></div><div class="line">        <span class="comment">//因为fragment的布局文件是保存到view对象中的</span></div><div class="line">        <span class="type">TextView</span> text= (<span class="type">TextView</span>)view.findViewById(<span class="type">R</span>.id.tv);</div><div class="line">        text.setText(<span class="string">"静态加载fragment"</span>);</div><div class="line">        <span class="keyword">return</span> view; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在Activity中使用fragment中的组件<br>可以直接在Activity中使用fragment中的组件，如同定义在activity布局文件中一样。</p>
<p>因为：setContentView()方法在加载包含Fragment组件的布局文件main.xml时，<br>会通过层层查找，查找到fragment布局文件fragment.xml中的所有组件。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">TextView</span> tv;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.main);</div><div class="line">        </div><div class="line">        <span class="comment">//在Activity中使用fragment中的组件id为tv的TextView</span></div><div class="line">        tv = (<span class="type">TextView</span>)findViewById(<span class="type">R</span>.id.tv);</div><div class="line">        <span class="comment">//在Activity中使用fragment中的组件id为btn_fg的Button</span></div><div class="line">        <span class="type">Button</span> btn = (<span class="type">Button</span>)findViewById(<span class="type">R</span>.id.btn_fg);</div><div class="line">        btn.setText(<span class="string">"改变"</span>);</div><div class="line">        <span class="comment">//改变fragment中textview中的值</span></div><div class="line">        btn.setOnClickListener(<span class="keyword">new</span> <span class="type">OnClickListener</span>() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            public void onClick(<span class="type">View</span> v) &#123;</div><div class="line">                tv.setText(<span class="string">"TextView被改变了"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：<br>1、onCreateView()方法<br>    Fragment第一次绘制它的用户界面时，系统会调用此方法，为了绘制Fragment的UI，<br>    此方法必须返回一个View；如果不需要显示UI，返回null即可。<br>2、在Activity的layout文件中声明Fragment组件，需要特别注意的是<fragment>标签中的android:name属性需要指定为一个Fragment的子类<br>3、标识Fragment的方法<br>    android:id  属性提供一个唯一ID<br>    android:tag 属性提供一个唯一字符串<br>4、静态加载Fragment必须要在fragment标签中编写唯一标识id或tag，否则程序会报错崩溃。<br>5、自定义的Fragment子类的作用是——通过onCreateView()实现将fragment布局文件转换成View对象，并完成组件的初始化工作。</fragment></p>
<h3 id="动态加载Fragment的四个步骤"><a href="#动态加载Fragment的四个步骤" class="headerlink" title="动态加载Fragment的四个步骤"></a>动态加载Fragment的四个步骤</h3><p>编写代码将Fragment添加到一个Activity layout中</p>
<p>1、编写fragment布局xml文件<br>命名为fragment.xml，内容同静态加载中的fragment.xml<br>2、创建继承自Fragment或其子类的java类<br>命名为DyncFragment.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//动态加载Fragment</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DyncFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</div><div class="line">            <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        <span class="type">View</span> view = inflater.inflate(<span class="type">R</span>.layout.fragment, container,<span class="literal">false</span>);</div><div class="line">        <span class="type">TextView</span> tv = (<span class="type">TextView</span>)view.findViewById(<span class="type">R</span>.id.tv);</div><div class="line">        tv.setText(<span class="string">"动态加载Fragment"</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、编写用于动态加载Fragment的父View容器的布局文件<br>命名为main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 用于动态加载Fragment的父View容器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/dync"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>4、在Activity中动态加载fragment<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.main);</div><div class="line">        </div><div class="line">        <span class="comment">//实例化自定义Fragment子类</span></div><div class="line">        <span class="type">DyncFragment</span> dyncFrag = <span class="keyword">new</span> <span class="type">DyncFragment</span>();</div><div class="line">        <span class="comment">//获取FragmentManager对象</span></div><div class="line">        <span class="type">FragmentManager</span> fmanager = getFragmentManager();</div><div class="line">        <span class="comment">//获取开启事务的对象</span></div><div class="line">        <span class="type">FragmentTransaction</span> trans =  fmanager.beginTransaction();</div><div class="line">        </div><div class="line">        <span class="comment">//使用add()动态加载Fragment，实现添加一个Fragment(指定要添加的fragment对象和插入的View)</span></div><div class="line">        <span class="comment">//与之类似的还有remove()、replace()方法</span></div><div class="line">        </div><div class="line">        <span class="comment">//add()方法需要2个参数：</span></div><div class="line">        <span class="comment">//第一个参数表示要将Fragment对象加载到哪个父布局id中</span></div><div class="line">        <span class="comment">//第二个参数表示将要加载的Fragment对象</span></div><div class="line">        trans.add(<span class="type">R</span>.id.dync, dyncFrag);<span class="comment">//dync的ID为main.xml中的LineaLayout</span></div><div class="line">        <span class="comment">//还可以进行其他操作，如</span></div><div class="line">        <span class="comment">//trans.replace(...);</span></div><div class="line">        <span class="comment">//trans.remove(...);</span></div><div class="line">        <span class="comment">//添加回退功能</span></div><div class="line">        trans.addToBackStack(<span class="literal">null</span>);</div><div class="line">        <span class="comment">//提交事务</span></div><div class="line">        trans.commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注：<strong>处理Fragment事务————类似与数据库的事务</strong></p>
<pre><code>根据用户的交互情况，对Fragment进行添加、移除、替换，以及执行其他动作，提交给Activity的每一套变化被称为一个事务

//获取Fragment事务
FragmentManager fmanager = getFragmentManager();
FragmentTransaction transaciton = fmanager.beginTransaction();

每一个事务都是同时执行一套变化，可以在一个事务中设置你所有想执行的变化，
包括add()、remove()、replace()，然后提交给Activity时必须调用commit()方法。

如果允许用户通过按下back物理按键返回到前一个Fragment状态，调用commit()之前可以加入addToBackStack()方法。
</code></pre><h3 id="Fragment生命周期"><a href="#Fragment生命周期" class="headerlink" title="Fragment生命周期"></a>Fragment生命周期</h3><p>Fragment可以响应自己的输入事件，并且有自己的生命周期，它们的生命周期会受宿主Activity的生命周期影响；</p>
<p>Activity生命周期的每个状态下都会对应一个或多个Fragment的回调函数，如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/Fragment_callback.jpg" alt="Activity生命周期的每个状态下对应的Fragment的回调函数"></p>
<h4 id="Fragment生命周期各方法详解"><a href="#Fragment生命周期各方法详解" class="headerlink" title="Fragment生命周期各方法详解"></a>Fragment生命周期各方法详解</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">FragmentLife</span> <span class="selector-tag">extends</span> <span class="selector-tag">Fragment</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//Fragment生命周期的第一个方法</span></div><div class="line">    <span class="comment">//当Fragment被添加到Activity时会回调该方法，</span></div><div class="line">    <span class="comment">//并且这个方法只调用一次</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onAttach(Activity activity) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onAttach</span>(activity);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"///////启动Fragment开始/////////////////////////////////"</span>);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onAttach()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//在创建Fragment时会回调该方法，并且这个方法只调用一次</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onCreate()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//每次创建Fragment，绘制Fragment的View组件时回调该方法</span></div><div class="line">    <span class="comment">//这个访问的作用是为Fragment绑定一个布局文件，然后转换成View对象返回</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        View view = inflater<span class="selector-class">.inflate</span>(R.layout.fragment, container,false);</div><div class="line">        TextView tv=(TextView)view<span class="selector-class">.findViewById</span>(R.id.tv);</div><div class="line">        tv<span class="selector-class">.setText</span>(<span class="string">"第一个Fragment"</span>);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onCreateView()"</span>);</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="comment">//当Fragment所在的Activity启动完成后回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onActivityCreated(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onActivityCreated</span>(savedInstanceState);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onActivityCreated()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//启动Fragment时回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onStart() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onStart</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onStart()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//恢复Fragment时回调该方法</span></div><div class="line">    <span class="comment">//调用onStart()方法后一定会调用onResume()方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onResume() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onResume</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onResume()"</span>);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"///////启动Fragment结束/////////////////////////////////"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//暂停Fragment时回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onPause() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onPause</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"///////停止Fragment开始/////////////////////////////////"</span>);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onPause()"</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//停止Fragment时回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onStop() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onStop</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onStop()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//销毁Fragment所包含的View组件时回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onDestroyView() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onDestroyView</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onDestroyView()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//销毁Fragment时回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onDestroy() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onDestroy</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onDestroy()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//Fragment从Activity中删除时回调该方法，并且这个方法只调用一次</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onDetach() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onDetach</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onDetach()"</span>);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"///////关闭Fragment结束/////////////////////////////////"</span>);</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Fragment生命周期各方法执行顺序"><a href="#Fragment生命周期各方法执行顺序" class="headerlink" title="Fragment生命周期各方法执行顺序"></a>Fragment生命周期各方法执行顺序</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、启动Fragment</span></div><div class="line">        <span class="function"><span class="title">onAttach</span>()--&gt;</span><span class="function"><span class="title">onCreate</span>()--&gt;</span><span class="function"><span class="title">onCreateView</span>()--&gt;</span>onActivityCreated()</div><div class="line">        --&gt;<span class="function"><span class="title">onStart</span>()--&gt;</span>onResume()</div><div class="line"><span class="comment">//2、屏幕锁屏</span></div><div class="line">        <span class="function"><span class="title">onPause</span>()--&gt;</span>onStop()</div><div class="line"><span class="comment">//3、屏幕解锁</span></div><div class="line">        <span class="function"><span class="title">onStart</span>()--&gt;</span>onResume()</div><div class="line"><span class="comment">//4、从第一个Fragment切换到第二个Fragment</span></div><div class="line">        第一个F<span class="function"><span class="title">ragment</span>停止：onPause()--&gt;</span><span class="function"><span class="title">onStop</span>()--&gt;</span>onDestroyView()</div><div class="line">        --&gt;<span class="function"><span class="title">onDestroy</span>()--&gt;</span>onDetach()</div><div class="line">        第二个F<span class="function"><span class="title">ragment</span>启动：onAttach()--&gt;</span><span class="function"><span class="title">onCreate</span>()--&gt;</span>onCreateView()</div><div class="line">        --&gt;<span class="function"><span class="title">onActivityCreated</span>()--&gt;</span><span class="function"><span class="title">onStart</span>()--&gt;</span>onResume()</div><div class="line"><span class="comment">//5、从启动到销毁Fragment全过程</span></div><div class="line">        <span class="function"><span class="title">onAttach</span>()--&gt;</span><span class="function"><span class="title">onCreate</span>()--&gt;</span><span class="function"><span class="title">onCreateView</span>()--&gt;</span><span class="function"><span class="title">onActivityCreated</span>()--&gt;</span><span class="function"><span class="title">onStart</span>()--&gt;</span>onResume()</div><div class="line">        --&gt;<span class="function"><span class="title">onPause</span>()--&gt;</span><span class="function"><span class="title">onStop</span>()--&gt;</span><span class="function"><span class="title">onDestroyView</span>()--&gt;</span><span class="function"><span class="title">onDestroy</span>()--&gt;</span>onDetach()</div></pre></td></tr></table></figure>
<h3 id="Fragment与Activity通信"><a href="#Fragment与Activity通信" class="headerlink" title="Fragment与Activity通信"></a>Fragment与Activity通信</h3><p>1、在Fragment中，可调用getActivity()方法获取它所在的宿主Activity<br>2、在Activity中，可调用FragmentManager的findFragmentById()或findFragmentByTag()方法获取静态加载的Fragment</p>
<h4 id="Activity向Fragment传递数据——动态加载fragment"><a href="#Activity向Fragment传递数据——动态加载fragment" class="headerlink" title="Activity向Fragment传递数据——动态加载fragment"></a>Activity向Fragment传递数据——动态加载fragment</h4><p>1、在Activity中向Fragment传递数据<br>思路:在Activity中创建Bundle数据包，并调用Fragment的setArguments(Bundle bundle)方法传递数据包到Fragment中。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span>&#123;</div><div class="line">    </div><div class="line">    private EditText et;</div><div class="line">    private Button send;</div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.main4</span>);</div><div class="line">        </div><div class="line">        </div><div class="line">        et = (EditText) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.et</span>);</div><div class="line">        send = (Button) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.send</span>);</div><div class="line">        </div><div class="line">        <span class="selector-tag">send</span><span class="selector-class">.setOnClickListener</span>(new OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                String txt = et<span class="selector-class">.getText</span>()<span class="selector-class">.toString</span>();</div><div class="line">                </div><div class="line">                <span class="comment">//在Activity中向Fragment传递数据的步骤</span></div><div class="line"></div><div class="line">                <span class="comment">//1、实例化自定义Fragment类对象</span></div><div class="line">                AcceptActivityFragment aaf = new AcceptActivityFragment();</div><div class="line">                <span class="comment">//2、初始化Bundle对象，并添加数据</span></div><div class="line">                Bundle bundle = new Bundle();</div><div class="line">                bundle<span class="selector-class">.putString</span>(<span class="string">"name"</span>,txt);</div><div class="line">                <span class="comment">//3、向自定义Fragment类对象传递数据包</span></div><div class="line">                aaf<span class="selector-class">.setArguments</span>(bundle);</div><div class="line">                </div><div class="line">                <span class="comment">//4、动态加载自定义Fragment</span></div><div class="line">                FragmentManager fm = getFragmentManager();</div><div class="line">                FragmentTransaction ft = fm<span class="selector-class">.beginTransaction</span>();</div><div class="line">                ft<span class="selector-class">.add</span>(R.id.layout, aaf, <span class="string">"AcceptActivityFragment"</span>);</div><div class="line">                ft<span class="selector-class">.commit</span>();</div><div class="line">                </div><div class="line">                Toast<span class="selector-class">.makeText</span>(MainActivity4.this,<span class="string">"Activity向Fragment发送数据"</span>+txt,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在Fragment中接收Activity传递过来的数据<br>思路：在Fragment中通过getArguments()方法获取传递过来的Bundle数据包对象，再调用Bundle对象的get(key)方法获取数据内容<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AcceptActivityFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</div><div class="line">            <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="type">View</span> view = inflater.inflate(<span class="type">R</span>.layout.fragment, container,<span class="literal">false</span>);</div><div class="line">        <span class="type">TextView</span> tv=(<span class="type">TextView</span>)view.findViewById(<span class="type">R</span>.id.tv);</div><div class="line">        </div><div class="line">        <span class="comment">//在Fragment中接收Activity传递过来的数据的步骤</span></div><div class="line">        <span class="comment">//1、使用getArguments()方法获取传递过来的数据包</span></div><div class="line">        <span class="type">Bundle</span> bun =  getArguments();</div><div class="line">        <span class="comment">//2、调用Bundle的get(key)方法获取数据内容</span></div><div class="line">        <span class="type">String</span>  txt = bun.get(<span class="string">"name"</span>)+<span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="comment">//上述1、2两步可合并为下面的写法</span></div><div class="line">        <span class="comment">//String  txt = getArguments().get("name")+"";</span></div><div class="line">        </div><div class="line">        tv.setText(txt);</div><div class="line">        <span class="type">Toast</span>.makeText(getActivity(),<span class="string">"Fragment已成功接收到"</span>+txt,<span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).show();</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="Activity向Fragment传递数据——静态加载fragment"><a href="#Activity向Fragment传递数据——静态加载fragment" class="headerlink" title="Activity向Fragment传递数据——静态加载fragment"></a>Activity向Fragment传递数据——静态加载fragment</h4><p>1、静态加载fragment，显示Activity向Fragment传递数据,<br>首先需要在布局文件中声明一个fragment组件，布局文件命名为main4.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">        <span class="attr">...</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/send"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 静态加载Fragment --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/frag"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"MyFragment2"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在Activity中向Fragment传递数据<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.main4);</div><div class="line"></div><div class="line">        <span class="comment">//1、静态加载fragment</span></div><div class="line">        <span class="type">FragmentManager</span> fm = getFragmentManager();</div><div class="line">        <span class="type">Fragment</span> frag = fm.findFragmentById(<span class="type">R</span>.id.frag);</div><div class="line">        </div><div class="line">        <span class="comment">//2、将通过findFragmentById()方法获取到的对象转换为MyFragment2类型</span></div><div class="line">        <span class="type">MyFragment2</span> myFrag = (<span class="type">MyFragment2</span>)frag;</div><div class="line"></div><div class="line">        <span class="comment">//3、通过Fragment子类的set方法，在Activity中向Fragment传递数据</span></div><div class="line">        myFrag.setAaa(<span class="string">"fragment静态传值"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在Fragment中接收Activity传递过来的数据<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class MyFragment2 extends Fragment&#123;</div><div class="line">    </div><div class="line">    private Button btn;</div><div class="line">    <span class="regexp">//</span><span class="number">1</span>、定义用于Activity向Fragment传值的变量及其get、set方法</div><div class="line">    private String aaa;</div><div class="line">    public String getAaa() &#123;</div><div class="line">        return aaa;</div><div class="line">    &#125;</div><div class="line">    public void setAaa(String aaa) &#123;</div><div class="line">        this.aaa = aaa;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        View view = inflater.inflate(R.layout.fragment, container,false);</div><div class="line">        </div><div class="line">        btn = (Button) view.findViewById(R.id.btn_fg);</div><div class="line">        btn.setText(<span class="string">"获取内容"</span>);</div><div class="line">        btn.setOnClickListener(new OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span><span class="regexp">/问题：为什么getAaa()在此处执行时无法获取到值/</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        </div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                <span class="regexp">//</span><span class="number">2</span>、在Fragment中接收Activity传递过来的数据</div><div class="line">                String val = getAaa();</div><div class="line">                Toast.makeText(getActivity(),<span class="string">"value="</span>+val,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        return view;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Fragment向Activity传递数据"><a href="#Fragment向Activity传递数据" class="headerlink" title="Fragment向Activity传递数据"></a>Fragment向Activity传递数据</h4><p>1、在Fragment中向Activity传递数据<br>思路:需要在Fragment中定义一个内部回调接口，这样Fragment可调用该回调方法将数据传递给Activity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String code = <span class="string">"Thank you,Activity!"</span>;</div><div class="line">    <span class="comment">//2、声明MyListener接口的对象</span></div><div class="line">    <span class="keyword">public</span> MyListener listener; </div><div class="line">    </div><div class="line">    <span class="comment">//1、声明一个内部接口MyListener</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyListener</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thank</span><span class="params">(String code)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Fragment生命周期的第一个方法，当Fragment被添加到Activity时会回调该方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        <span class="comment">//3、将宿主Activity对象传递给listener对象</span></div><div class="line">        listener=(MyListener)activity;</div><div class="line">        <span class="keyword">super</span>.onAttach(activity);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        View view = inflater.inflate(R.layout.fragment, container,<span class="keyword">false</span>);</div><div class="line">        </div><div class="line">        Toast.makeText(getActivity(),<span class="string">"向Activity发送数据"</span>+code,Toast.LENGTH_SHORT).show();</div><div class="line"></div><div class="line">        <span class="comment">//4、宿主activity对象(因第3步的赋值操作)直接调用接口方法，将数据传递给Activity</span></div><div class="line">        listener.thank(code);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;   </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在Activity中接收Fragment传递过来的数据<br>思路：让包含该Fragment的Activity实现该回调接口<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、让包含该Fragment的Activity实现该回调接口</span></div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> <span class="selector-tag">implements</span> <span class="selector-tag">MyListener</span>&#123;</div><div class="line">    </div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.main4</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//动态加载Fragment</span></div><div class="line">        MyFragment dyncFrag = new MyFragment();</div><div class="line">        FragmentManager fmanager = getFragmentManager();</div><div class="line">        FragmentTransaction trans =  fmanager<span class="selector-class">.beginTransaction</span>();</div><div class="line"></div><div class="line">        trans<span class="selector-class">.add</span>(R.id.dync, dyncFrag);</div><div class="line">        trans<span class="selector-class">.addToBackStack</span>(null);</div><div class="line">        trans<span class="selector-class">.commit</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//2、重写接口实现方法，获取Fragment传递过来的数据</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void thank(String code) &#123;</div><div class="line">        Toast<span class="selector-class">.makeText</span>(MainActivity.this,<span class="string">"已成功接收到Fragment传递过来的"</span>+code,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用ViewPager实现视图左右滑动的页卡效果"><a href="#使用ViewPager实现视图左右滑动的页卡效果" class="headerlink" title="使用ViewPager实现视图左右滑动的页卡效果"></a>使用ViewPager实现视图左右滑动的页卡效果</h2><p>本质：ViewPager是存放View对象或Fragment对象的容器，常用于导航</p>
<p>一些用法：加载显示的页卡时把布局文件转换为View对象的2种方式<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将layout布局转换为View对象的2种方式</span></div><div class="line"><span class="comment">//第一种方法</span></div><div class="line">LayoutInflater lf = getLayoutInflater().<span class="keyword">from</span>(<span class="keyword">this</span>);</div><div class="line">lf.inflate(resource,root);</div><div class="line"><span class="comment">//第二种方法</span></div><div class="line">View.inflate(context,resource,root);</div></pre></td></tr></table></figure></p>
<p>一些用法：为ViewPager配置适配器<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">一类数据源为<span class="keyword">View</span>集合，另一类数据源为Fragment集合</div><div class="line"><span class="comment">//</span></div><div class="line">PagerAdapter 数据源： <span class="keyword">List</span>&lt;<span class="keyword">View</span>&gt;</div><div class="line"><span class="comment">//</span></div><div class="line">FragmentPagerAdapter 数据源： <span class="keyword">List</span>&lt;Fragment&gt;</div><div class="line"><span class="comment">//</span></div><div class="line">FragmentStatePagerAdapter 数据源： <span class="keyword">List</span>&lt;Fragment&gt;</div></pre></td></tr></table></figure></p>
<h3 id="使用ViewPager的步骤——使用View对象作为ViewPager的数据源"><a href="#使用ViewPager的步骤——使用View对象作为ViewPager的数据源" class="headerlink" title="使用ViewPager的步骤——使用View对象作为ViewPager的数据源"></a>使用ViewPager的步骤——使用View对象作为ViewPager的数据源</h3><p>1、在xml布局文件中声明ViewPager控件，命名为main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--在布局文件中声明ViewPager控件与之前的控件不同，</span></div><div class="line">        它是android.support.v4兼容包下的一个控件--&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/vp"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、声明4个用于左右滑动的视图布局文件<br>命名为view.xml,view2.xml,view3.xml,view4.xml<br>内容类似普通布局文件<br>3、自定义PagerAdapter适配器子类MyPagerAdapter<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.view.PagerAdapter;</div><div class="line"><span class="comment">//自定义PagerAdapter适配器子类MyPagerAdapter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//声明存储数据源的对象</span></div><div class="line">    <span class="keyword">private</span> List&lt;View&gt; viewList;</div><div class="line">    </div><div class="line">    <span class="comment">//定义适配器的构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPagerAdapter</span><span class="params">(List&lt;View&gt; viewList)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.viewList = viewList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回所有页卡的总数量</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> viewList.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//判断当前View视图对象是否由Object产生</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View arg0, Object arg1)</span> </span>&#123;</div><div class="line">        <span class="comment">//官方写法</span></div><div class="line">        <span class="keyword">return</span> arg0==arg1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//增加必须实现的方法——instantiateItem</span></div><div class="line">    <span class="comment">//作用是实例化一个页卡</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">//将view对象添加到ViewGroup中</span></div><div class="line">        <span class="comment">//position为当前view在viewList中的位置</span></div><div class="line">        container.addView(viewList.get(position));</div><div class="line">        <span class="function"><span class="keyword">return</span> viewList.<span class="title">get</span><span class="params">(position)</span></span>;<span class="comment">//返回viewList中当前的view对象</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//增加必须实现的方法——destroyItem</span></div><div class="line">    <span class="comment">//作用是销毁一个页卡</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">        <span class="comment">//从ViewGroup中移除一个view对象</span></div><div class="line">        <span class="comment">//position为当前view在viewList中的位置</span></div><div class="line">        container.removeView(viewList.get(position));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在MainActivity中配置PagerAdapter适配器，实现4个view视图可以左右滑动的效果<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.view.<span class="type">ViewPager</span>;</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//声明List&lt;View&gt;对象，用于存储ViewPager的数据源</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">View</span>&gt; viewList;</div><div class="line">    <span class="keyword">private</span> <span class="type">ViewPager</span> vp;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//1、编写布局文件，声明android.support.v4.view.ViewPager控件</span></div><div class="line">        setContentView(<span class="type">R</span>.layout.main);</div><div class="line">        </div><div class="line">        <span class="comment">//2、初始化viewList和viewPager对象</span></div><div class="line">        viewList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">View</span>&gt;();</div><div class="line">        vp =  (<span class="type">ViewPager</span>) findViewById(<span class="type">R</span>.id.vp);</div><div class="line">        </div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 将View对象作为ViewPager的数据源</div><div class="line">         */</div><div class="line">        </div><div class="line">        <span class="comment">//3、把布局文件转换为View对象——使用第二种方法</span></div><div class="line">        <span class="comment">//View.inflate(上下文,布局文件ID,父组件)</span></div><div class="line">        <span class="type">View</span> v1 = <span class="type">View</span>.inflate(<span class="keyword">this</span>,<span class="type">R</span>.layout.view,<span class="literal">null</span>);</div><div class="line">        <span class="type">View</span> v2 = <span class="type">View</span>.inflate(<span class="keyword">this</span>,<span class="type">R</span>.layout.view2,<span class="literal">null</span>);</div><div class="line">        <span class="type">View</span> v3 = <span class="type">View</span>.inflate(<span class="keyword">this</span>,<span class="type">R</span>.layout.view3,<span class="literal">null</span>);</div><div class="line">        <span class="type">View</span> v4 = <span class="type">View</span>.inflate(<span class="keyword">this</span>,<span class="type">R</span>.layout.view4,<span class="literal">null</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//4、将View对象存储到List集合中，作为ViewPager的数据源</span></div><div class="line">        viewList.add(v1);</div><div class="line">        viewList.add(v2);</div><div class="line">        viewList.add(v3);</div><div class="line">        viewList.add(v4);</div><div class="line">        </div><div class="line">        <span class="comment">//5、自定义PagerAdapter适配器子类MyPagerAdapter</span></div><div class="line">        </div><div class="line">        <span class="comment">//6、实例化PagerAdapter适配器子类MyPagerAdapter对象</span></div><div class="line">        <span class="type">MyPagerAdapter</span> ad = <span class="keyword">new</span> <span class="type">MyPagerAdapter</span>(viewList);</div><div class="line">        </div><div class="line">        <span class="comment">//7、为ViewPager加载适配器</span></div><div class="line">        vp.setAdapter(ad);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用PagerTabStrip和PagerTitleStrip实现页卡标题效果"><a href="#使用PagerTabStrip和PagerTitleStrip实现页卡标题效果" class="headerlink" title="使用PagerTabStrip和PagerTitleStrip实现页卡标题效果"></a>使用PagerTabStrip和PagerTitleStrip实现页卡标题效果</h3><p>仅需稍稍修改上一节中的部分内容，即可实现页卡标题效果，具体修改如下：<br>1、在main.xml布局文件中的ViewPager控件中声明PagerTabStrip和PagerTitleStrip子控件<br>PagerTabStrip和PagerTitleStrip都是ViewPager控件的子控件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout ...&gt;</div><div class="line"></div><div class="line">    &lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span></div><div class="line">        ...同上一节中的的属性设置&gt;</div><div class="line">        </div><div class="line">        &lt;!-- PagerTabStrip是ViewPager的子控件 --&gt;</div><div class="line">        &lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.PagerTabStrip</span></div><div class="line">            android:id=<span class="string">"@+id/tab"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_gravity=<span class="string">"top"</span>&gt;</div><div class="line">        &lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.PagerTabStrip</span>&gt;</div><div class="line">        </div><div class="line">        &lt;!-- PagerTitleStrip是ViewPager的子控件，与 PagerTabStrip不可同时出现,本例是为了说明用法，才放于同一布局文件中--&gt;</div><div class="line">        &lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.PagerTitleStrip</span></div><div class="line">            android:id=<span class="string">"@+id/tab"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_gravity=<span class="string">"bottom"</span>&gt;</div><div class="line">        &lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.PagerTitleStrip</span>&gt;</div><div class="line"></div><div class="line">    &lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span>&gt;</div><div class="line">        </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>2、同上一节<br>3、在自定义PagerAdapter适配器子类MyPagerAdapter新增加如下代码<br>其他代码同上一节<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//声明页卡标题对象</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">String</span>&gt; titleList;</div><div class="line">    </div><div class="line">    <span class="comment">//创建该适配器二个参数的构造方法</span></div><div class="line">    public <span class="type">MyPagerAdapter</span>(<span class="type">List</span>&lt;<span class="type">View</span>&gt; viewList,<span class="type">List</span>&lt;<span class="type">String</span>&gt; titleList)&#123;</div><div class="line">        <span class="keyword">this</span>.viewList = viewList;</div><div class="line">        <span class="keyword">this</span>.titleList = titleList;</div><div class="line">    </div><div class="line">    <span class="comment">//实现页卡标题效果时必须实现的方法——getPageTitle</span></div><div class="line">    <span class="comment">//用于返回ViewPager的页卡标题信息</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">CharSequence</span> getPageTitle(int position) &#123;</div><div class="line">        <span class="comment">//position为当前页卡标题在titleList中的位置</span></div><div class="line">        <span class="keyword">return</span> titleList.get(position);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在MainActivity中新增如下代码<br>其他代码同上一节<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.view.<span class="type">PagerTabStrip</span>;</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//同上一节，代码省略</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">PagerTabStrip</span> tab;</div><div class="line">    <span class="comment">//标题集合</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">String</span>&gt; titleList;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//1、编写布局文件，声明android.support.v4.view.ViewPager控件</span></div><div class="line">        <span class="comment">//同上一节，代码省略</span></div><div class="line">        </div><div class="line">        <span class="comment">//2、初始化viewList和viewPager对象</span></div><div class="line">        <span class="comment">//同上一节，代码省略</span></div><div class="line">        <span class="comment">//初始化PagerTabStrip对象</span></div><div class="line">        tab = (<span class="type">PagerTabStrip</span>)findViewById(<span class="type">R</span>.id.tab);</div><div class="line"></div><div class="line">        <span class="comment">//3、把布局文件转换为View对象</span></div><div class="line">        <span class="comment">//同上一节，代码省略</span></div><div class="line">        </div><div class="line">        <span class="comment">//4、将View对象存储到List集合中，作为ViewPager的数据源</span></div><div class="line">        <span class="comment">//同上一节，代码省略</span></div><div class="line">        </div><div class="line">        <span class="comment">//为PagerTabStrip设置一些显示效果</span></div><div class="line">        tab.setBackgroundColor(<span class="type">Color</span>.<span class="type">YELLOW</span>);</div><div class="line">        tab.setTextColor(<span class="type">Color</span>.<span class="type">RED</span>);</div><div class="line">        tab.setDrawFullUnderline(<span class="literal">false</span>);<span class="comment">//去掉长分隔线</span></div><div class="line">        tab.setTabIndicatorColor(<span class="type">Color</span>.<span class="type">GREEN</span>);<span class="comment">//更改短分隔线的颜色</span></div><div class="line">        <span class="comment">//为ViewPager页卡设置标题</span></div><div class="line">        titleList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;();</div><div class="line">        titleList.add(<span class="string">"首页"</span>);</div><div class="line">        titleList.add(<span class="string">"要闻"</span>);</div><div class="line">        titleList.add(<span class="string">"图片"</span>);</div><div class="line">        titleList.add(<span class="string">"活动"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//5、自定义PagerAdapter适配器子类MyPagerAdapter</span></div><div class="line">        </div><div class="line">        <span class="comment">//6、实例化PagerAdapter适配器子类MyPagerAdapter对象</span></div><div class="line">        <span class="comment">//使用MyPagerAdapter的第二个构成方法</span></div><div class="line">        <span class="type">MyPagerAdapter</span> ad = <span class="keyword">new</span> <span class="type">MyPagerAdapter</span>(viewList,titleList);</div><div class="line">        </div><div class="line">        <span class="comment">//7、为ViewPager加载适配器</span></div><div class="line">        <span class="comment">//同上一节，代码省略</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、使用PagerTitleStrip控件时，只需在上一步的基础上，修改一下tab对象的类型为PagerTitleStrip即可，具体修改如下：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//private PagerTabStrip <span class="built_in">tab</span>;</div><div class="line">private PagerTitleStrip <span class="built_in">tab</span>;</div><div class="line"></div><div class="line">//<span class="built_in">tab</span> = (PagerTabStrip)findViewById(R.id.<span class="built_in">tab</span>);</div><div class="line"><span class="built_in">tab</span> = (PagerTitleStrip)findViewById(R.id.<span class="built_in">tab</span>);</div><div class="line"></div><div class="line">//<span class="built_in">tab</span>.setDrawFullUnderline(<span class="literal">false</span>);//去掉长分隔线</div><div class="line">//<span class="built_in">tab</span>.setTabIndicatorColor(Color.GREEN);//更改短分隔线的颜色</div></pre></td></tr></table></figure></p>
<h3 id="使用ViewPager的步骤——使用FragmentPagerAdapter的子类适配器"><a href="#使用ViewPager的步骤——使用FragmentPagerAdapter的子类适配器" class="headerlink" title="使用ViewPager的步骤——使用FragmentPagerAdapter的子类适配器"></a>使用ViewPager的步骤——使用FragmentPagerAdapter的子类适配器</h3><p>注: 使用的Fragment及FragmentPagerAdapter、FragmentStatePagerAdapter等全部都是android.support.v4包中的，为了保持与Fragment的兼容性</p>
<p>1、在xml布局文件中声明ViewPager控件，命名为main.xml<br>内容与“使用ViewPager的步骤——使用View对象作为ViewPager的数据源”中的main.xml完全相同<br>2、声明4个用于左右滑动的视图布局文件<br>内容与“使用ViewPager的步骤——使用View对象作为ViewPager的数据源”中的view.xml,view2.xml,view3.xml,view4.xml完全相同<br>3、创建四个类MyFragment1、MyFragment2、MyFragment3、MyFragment4，均继承自<br>android.support.v4.app.Fragment<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为在3.0以下使用fragment，导入并继承自android.support.v4.app.Fragment</span></div><div class="line"><span class="keyword">import</span> android.support.v4.app.<span class="type">Fragment</span>;</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyFragment3</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</div><div class="line">            <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">return</span> inflater.inflate(<span class="type">R</span>.layout.view, container, <span class="literal">false</span>);</div><div class="line">        <span class="comment">//其他三个android.support.v4.app.Fragment子类引用的布局文件为</span></div><div class="line">        <span class="comment">//R.layout.view2，R.layout.view3，R.layout.view4</span></div><div class="line">        <span class="comment">//其他完全相同</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、自定义FragmentPagerAdapter的子类MyFragmentPagerAdapter<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class="line"></div><div class="line"><span class="comment">//自定义FragmentPagerAdapter的子类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragmentPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//fragment数据源</span></div><div class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; fragList;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; titleList;</div><div class="line">    <span class="comment">//构造函数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFragmentPagerAdapter</span><span class="params">(FragmentManager fm,List&lt;Fragment&gt; fragList,List&lt;String&gt; titleList)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        <span class="keyword">this</span>.fragList = fragList;</div><div class="line">        <span class="keyword">this</span>.titleList = titleList;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//返回当前fragment对象</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> arg0)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="function"><span class="keyword">return</span> fragList.<span class="title">get</span><span class="params">(arg0)</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="function"><span class="keyword">return</span> fragList.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//获取页卡标题的方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="function"><span class="keyword">return</span> titleList.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、在MainActivity中配置MyFragmentPagerAdapter<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.graphics.<span class="type">Color</span>;</div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.<span class="type">Fragment</span>;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.<span class="type">FragmentActivity</span>;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.<span class="type">PagerTabStrip</span>;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.<span class="type">ViewPager</span>;</div><div class="line"><span class="keyword">import</span> android.view.<span class="type">View</span>;</div><div class="line"></div><div class="line"><span class="comment">//为了配合v4.Fragment的兼容性,MainActivity需要继承自android.support.v4.app.FragmentActivity</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">ViewPager</span> vp;</div><div class="line">    <span class="keyword">private</span> <span class="type">PagerTabStrip</span> tab;</div><div class="line">    <span class="comment">//标题集合</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">String</span>&gt; titleList;</div><div class="line">    </div><div class="line">    <span class="comment">//使用List&lt;Fragment&gt;对象，用于存储ViewPager的数据源</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">Fragment</span>&gt; fragList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//1、编写布局文件，声明android.support.v4.view.ViewPager控件</span></div><div class="line">        setContentView(<span class="type">R</span>.layout.main);</div><div class="line">        </div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 使用Fragment作为ViewPager的数据源</div><div class="line">         * */</div><div class="line"></div><div class="line">        <span class="comment">//2、初始化fragList和viewPager对象</span></div><div class="line">        fragList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">Fragment</span>&gt;();</div><div class="line">        vp =  (<span class="type">ViewPager</span>) findViewById(<span class="type">R</span>.id.vp);</div><div class="line">        tab = (<span class="type">PagerTabStrip</span>)findViewById(<span class="type">R</span>.id.tab);     </div><div class="line">        </div><div class="line">        <span class="comment">//为PagerTabStrip设置一些显示效果</span></div><div class="line">        tab.setBackgroundColor(<span class="type">Color</span>.<span class="type">YELLOW</span>);</div><div class="line">        tab.setTextColor(<span class="type">Color</span>.<span class="type">RED</span>);</div><div class="line">        tab.setDrawFullUnderline(<span class="literal">false</span>);<span class="comment">//去掉长分隔线</span></div><div class="line">        tab.setTabIndicatorColor(<span class="type">Color</span>.<span class="type">GREEN</span>);<span class="comment">//更改短分隔线的颜色</span></div><div class="line">        <span class="comment">//为ViewPager页卡设置标题</span></div><div class="line">        titleList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;();</div><div class="line">        titleList.add(<span class="string">"首页"</span>);</div><div class="line">        titleList.add(<span class="string">"要闻"</span>);</div><div class="line">        titleList.add(<span class="string">"图片"</span>);</div><div class="line">        titleList.add(<span class="string">"活动"</span>);</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//3、将View对象存储到fragList集合中，作为ViewPager的数据源</span></div><div class="line">        fragList.add(<span class="keyword">new</span> <span class="type">MyFragment1</span>());</div><div class="line">        fragList.add(<span class="keyword">new</span> <span class="type">MyFragment2</span>());</div><div class="line">        fragList.add(<span class="keyword">new</span> <span class="type">MyFragment3</span>());</div><div class="line">        fragList.add(<span class="keyword">new</span> <span class="type">MyFragment4</span>());</div><div class="line">        <span class="comment">//4、自定义FragmentPagerAdapter的子类数据适配器MyFragmentPagerAdapter</span></div><div class="line">        </div><div class="line">        <span class="comment">//5、配置MyFragmentPagerAdapter适配器</span></div><div class="line">        <span class="comment">//为了配合v4.Fragment的兼容性,使用getSupportFragmentManager()</span></div><div class="line">        <span class="type">MyFragmentPagerAdapter</span> fpd = <span class="keyword">new</span> <span class="type">MyFragmentPagerAdapter</span>(getSupportFragmentManager(),fragList,titleList);</div><div class="line">        <span class="comment">//6、加载MyFragmentPagerAdapter适配器对象</span></div><div class="line">        vp.setAdapter(fpd);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用ViewPager的步骤——使用FragmentStatePagerAdapter的子类适配器"><a href="#使用ViewPager的步骤——使用FragmentStatePagerAdapter的子类适配器" class="headerlink" title="使用ViewPager的步骤——使用FragmentStatePagerAdapter的子类适配器"></a>使用ViewPager的步骤——使用FragmentStatePagerAdapter的子类适配器</h3><p>使用FragmentStatePagerAdapter适配器与使用FragmentPagerAdapter适配器大同小异，仅需做二处修改，具体修改如下：<br>1、前三步与“使用ViewPager的步骤——使用FragmentPagerAdapter的子类适配器”一节的前三步一样<br>2、自定义FragmentStatePagerAdapter的子类MyFragmentStatePagerAdapter<br>新增instantiateItem和destroyItem方法，不需要重写<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.app.<span class="type">FragmentStatePagerAdapter</span>;</div><div class="line"></div><div class="line"><span class="comment">//自定义FragmentStatePagerAdapter的子类</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyFragmentStatePagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentStatePagerAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//其他代码同上一节的MyFragmentPagerAdapter</span></div><div class="line">    </div><div class="line">    <span class="comment">//新增instantiateItem方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">Object</span> instantiateItem(<span class="type">ViewGroup</span> arg0, int arg1) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.instantiateItem(arg0, arg1);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//新增destroyItem方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void destroyItem(<span class="type">ViewGroup</span> container, int position, <span class="type">Object</span> <span class="class"><span class="keyword">object</span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.destroyItem(container, position, <span class="class"><span class="keyword">object</span>)</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在MainActivity中配置MyFragmentStatePagerAdapter<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//其他代码同上一节的MainActivity</span></div><div class="line"></div><div class="line"><span class="comment">//4、配置MyFragmentStatePagerAdapter适配器</span></div><div class="line"><span class="type">MyFragmentStatePagerAdapter</span> fpd = <span class="function"><span class="keyword">new</span> <span class="title">MyFragmentStatePagerAdapter</span>(getSupportFragmentManager(),<span class="title">fragList</span>,<span class="title">titleList</span>);</span></div><div class="line"><span class="comment">//5、加载适配器</span></div><div class="line"><span class="title">vp</span>.<span class="title">setAdapter</span>(fpd);</div></pre></td></tr></table></figure></p>
<h3 id="ViewPager监听器OnPageChangeListener的用法"><a href="#ViewPager监听器OnPageChangeListener的用法" class="headerlink" title="ViewPager监听器OnPageChangeListener的用法"></a>ViewPager监听器OnPageChangeListener的用法</h3><p>onPageChangeListener()————用来监控ViewPager滑动到第几页<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span><span class="selector-class">.OnPageChangeListener</span>;</div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">FragmentActivity</span> <span class="selector-tag">implements</span> <span class="selector-tag">OnPageChangeListener</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//其他代码同上一节的MainActivity</span></div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        </div><div class="line">        <span class="comment">//其他代码同上一节的MainActivity</span></div><div class="line"></div><div class="line">        <span class="comment">//加载监听器</span></div><div class="line">        vp<span class="selector-class">.setOnPageChangeListener</span>(this);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onPageScrollStateChanged(int arg0) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onPageScrolled(int arg0, float arg1, int arg2) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//OnPageChangeListener接口中最常用的是该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onPageSelected(int position) &#123;</div><div class="line">        <span class="comment">//position从0开始计数</span></div><div class="line">        Toast<span class="selector-class">.makeText</span>(this, <span class="string">"当前是第"</span>+position+<span class="string">"个页面"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用ViewFlipper实现屏幕自动切换动画效果"><a href="#使用ViewFlipper实现屏幕自动切换动画效果" class="headerlink" title="使用ViewFlipper实现屏幕自动切换动画效果"></a>使用ViewFlipper实现屏幕自动切换动画效果</h2><p>本质：ViewFlipper是Android系统自带的一个多页面管理控件，可以实现子界面的自动切换。</p>
<p>在ViewFlipper中导入子控件的两种方式——————静态导入与动态导入</p>
<p>1、静态导入(使用较少)<br>在layout布局文件是ViewFlipper中直接声明子控件<br>2、动态导入————使用addView()方法(使用较多)<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">flipper</span> = (ViewFlipper) findViewById(R.id.flipper)<span class="comment">;</span></div><div class="line">flipper.addView(R.drawable.pic1)<span class="comment">;</span></div><div class="line">flipper.addView(R.drawable.pic2)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>ViewFlipper的常用方法<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">setInAnimation</span><span class="params">()</span></span>  设置Vieww进入屏幕时使用的动画</div><div class="line">setOutAnimation   设置Vieww退出屏幕时使用的动画</div><div class="line"><span class="function"><span class="title">showNext</span><span class="params">()</span></span>        调用该函数来显示ViewFlipper里面的下一个View</div><div class="line"><span class="function"><span class="title">showPrevious</span><span class="params">()</span></span>    调用该函数来显示ViewFlipper里面的上一个View</div><div class="line"><span class="function"><span class="title">setFilpInterval</span><span class="params">()</span></span> 设置View之间切换的时间间隔</div><div class="line"><span class="function"><span class="title">startFlipping</span><span class="params">()</span></span>   使用上面设置的时间间隔来开始切换所有的View，切换会循环进行</div><div class="line"><span class="function"><span class="title">stopFlipping</span><span class="params">()</span></span>    停止View切换</div></pre></td></tr></table></figure></p>
<h3 id="使用ViewFlipper实现屏幕自动切换动画效果的步骤"><a href="#使用ViewFlipper实现屏幕自动切换动画效果的步骤" class="headerlink" title="使用ViewFlipper实现屏幕自动切换动画效果的步骤"></a>使用ViewFlipper实现屏幕自动切换动画效果的步骤</h3><p>1、在布局文件中声明ViewFlipper控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ViewFlipper</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/flipper"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        &gt;<span class="tag">&lt;/<span class="name">ViewFlipper</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中实现屏幕自动切换动画效果<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">ViewFlipper</span> vf;</div><div class="line">    <span class="comment">//子view的资源id数组</span></div><div class="line">    <span class="keyword">private</span> int[]resId = &#123;<span class="type">R</span>.drawable.pic1,<span class="type">R</span>.drawable.pic2,<span class="type">R</span>.drawable.pic3,<span class="type">R</span>.drawable.pic4&#125;;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//动态导入的方式为ViewFlipper加入子View</span></div><div class="line">        </div><div class="line">        <span class="comment">//1、初始化ViewFlipper对象</span></div><div class="line">        vf = (<span class="type">ViewFlipper</span>) findViewById(<span class="type">R</span>.id.flipper);</div><div class="line">        </div><div class="line">        <span class="comment">//2、遍历子view的资源id数组</span></div><div class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;resId.length;i++)&#123;</div><div class="line">            </div><div class="line">            <span class="comment">//3、动态导入的方式为ViewFlipper加入子View</span></div><div class="line">            vf.addView(getImageView(resId[i]));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//5、为ViewFlipper设置自动切换动画效果</span></div><div class="line">        vf.setInAnimation(<span class="keyword">this</span>,<span class="type">R</span>.anim.left_in);<span class="comment">//left_in为自定义的动画效果</span></div><div class="line">        vf.setOutAnimation(<span class="keyword">this</span>, <span class="type">R</span>.anim.left_out);<span class="comment">//left_out为自定义的动画效果</span></div><div class="line">        vf.setFlipInterval(<span class="number">3000</span>);<span class="comment">//设置视图切换时间间隔</span></div><div class="line">        vf.startFlipping();<span class="comment">//开始播放动画</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//4、实现通过子view的资源id数组索引来获取子view对象</span></div><div class="line">    <span class="keyword">private</span> <span class="type">ImageView</span> getImageView(int resId) &#123;</div><div class="line">        <span class="type">ImageView</span> iv = <span class="keyword">new</span> <span class="type">ImageView</span>(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//下面的方法无法显示全屏显示图片的效果</span></div><div class="line">        <span class="comment">//iv.setImageResource(resId);</span></div><div class="line">        </div><div class="line">        <span class="comment">//全屏显示图片</span></div><div class="line">        iv.setBackgroundResource(resId);</div><div class="line">        <span class="keyword">return</span> iv;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="支持手势滑动的ViewFlipper"><a href="#支持手势滑动的ViewFlipper" class="headerlink" title="支持手势滑动的ViewFlipper"></a>支持手势滑动的ViewFlipper</h3><p>只要是在MainActivity中添加支持手势的函数onTouchEvent,该函数监控手势滑动的事件处理，具体代码如下<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ViewFlipper vf;</div><div class="line">    <span class="comment">//子view的资源id数组</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[]resId = &#123;R.drawable.pic1,R.drawable.pic2,R.drawable.pic3,R.drawable.pic4&#125;;</div><div class="line">   </div><div class="line">    <span class="comment">//记录手指落下的x轴位置</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> startX;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//动态导入的方式为ViewFlipper加入子View</span></div><div class="line">        </div><div class="line">        <span class="comment">//1、初始化ViewFlipper对象</span></div><div class="line">        vf = (ViewFlipper) findViewById(R.id.flipper);</div><div class="line">        </div><div class="line">        <span class="comment">//2、遍历子view的资源id数组</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;resId.length;i++)&#123;</div><div class="line">            <span class="comment">//3、动态导入的方式为ViewFlipper加入子View</span></div><div class="line">            vf.addView(getImageView(resId[i]));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//4、实现通过子view的资源id数组索引来获取子view对象</span></div><div class="line">    <span class="keyword">private</span> <span class="function">ImageView <span class="title">getImageView</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">        ImageView iv = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//下面的方法无法显示全屏显示图片的效果</span></div><div class="line">        <span class="comment">//iv.setImageResource(resId);</span></div><div class="line">        </div><div class="line">        <span class="comment">//全屏显示图片</span></div><div class="line">        iv.setBackgroundResource(resId);</div><div class="line">        <span class="keyword">return</span> iv;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//5、为ViewFlipper设置根据手势切换动画效果</span></div><div class="line">    <span class="comment">//添加支持手势的函数onTouchEvent,该函数监控手势滑动的事件处理</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        </div><div class="line">        <span class="keyword">switch</span>(event.getAction())&#123;</div><div class="line">            <span class="comment">//手指落下</span></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:&#123;</div><div class="line">                startX = event.getX();<span class="comment">//获取X轴的位置</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//手指滑动</span></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:&#123;</div><div class="line">                <span class="comment">//向右滑动,查看前一页</span></div><div class="line">                <span class="keyword">if</span>(event.getX()-startX&gt;<span class="number">100</span>)&#123;</div><div class="line">                    vf.setInAnimation(<span class="keyword">this</span>, R.anim.left_in);</div><div class="line">                    vf.setInAnimation(<span class="keyword">this</span>, R.anim.left_out);</div><div class="line">                    vf.showPrevious();<span class="comment">//显示前一页</span></div><div class="line">                &#125;</div><div class="line">                <span class="comment">//向左滑动,显示后一页</span></div><div class="line">                <span class="keyword">if</span>(startX-event.getX()&gt;<span class="number">100</span>)&#123;</div><div class="line">                    vf.setInAnimation(<span class="keyword">this</span>, R.anim.right_in);</div><div class="line">                    vf.setInAnimation(<span class="keyword">this</span>, R.anim.right_out);</div><div class="line">                    vf.showNext();<span class="comment">//显示后一页</span></div><div class="line">                &#125;</div><div class="line">                <span class="comment">//其他情况认为是微小滑动，不执行操作</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//手指离开屏幕</span></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:&#123;</div><div class="line">                <span class="comment">//不需要执行任何操作</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTouchEvent</span><span class="params">(event)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用ScrollView实现滚动效果"><a href="#使用ScrollView实现滚动效果" class="headerlink" title="使用ScrollView实现滚动效果"></a>使用ScrollView实现滚动效果</h2><p>ScrollView(滚动视图)是指当屏幕拥有很多内容，一屏显示不完时，需要通过滚动来显示完成的视图</p>
<p>ScrollView的2个分类：<br>    HorizontalScrollView ———— 水平滚动视图<br>    ScrollView ———— 垂直滚动视图</p>
<p>隐藏ScrollView的滚动条方法<br>    标签属性：android:scrollbars=”none”<br>    代码设置：<br>        setHorizontalScrollBarEnabled(false); //隐藏水平ScrollView<br>        setVerticalScrollBarEnabled(false); //隐藏垂直ScrollView</p>
<h3 id="使用ScrollView可以实现滚动效果的步骤"><a href="#使用ScrollView可以实现滚动效果的步骤" class="headerlink" title="使用ScrollView可以实现滚动效果的步骤"></a>使用ScrollView可以实现滚动效果的步骤</h3><p>1、在布局文件中声明ScrollView控件，将将要滚动的视图如TextView作为其子控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/scroll"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:scrollbars</span>=<span class="string">"none"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中使用ScrollView实现滚动效果<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>&#123;</span></div><div class="line">    </div><div class="line">    <span class="keyword">private</span> TextView tv;</div><div class="line">    <span class="keyword">private</span> Button up,down;</div><div class="line">    <span class="keyword">private</span> ScrollView scroll;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//1、获取将要滚动的视图如TextView</span></div><div class="line">        tv = (TextView) findViewById(R.id.tv);</div><div class="line">        <span class="comment">//2、设置长文本</span></div><div class="line">        tv.setText(getResources().getString(R.string.longCon));</div><div class="line">        <span class="comment">//getResources().getString(R.string.longCon)的作用是</span></div><div class="line">        <span class="comment">//获取res文件夹下的string.xml文件中的longCon标签的内容</span></div><div class="line"></div><div class="line">        <span class="comment">//3、为ScrollView设置监听器setOnTouchListener()</span></div><div class="line">        <span class="comment">//判断ScrollView滑动到底部的公式:视图的总高度&lt;=一屏幕的高度+滚动条滚动的距离</span></div><div class="line">        scroll.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="keyword">boolean</span> onTouch(View v, MotionEvent event) &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">switch</span>(event.getAction())&#123;</div><div class="line">                    <span class="keyword">case</span> MotionEvent.<span class="string">ACTION_UP:</span>&#123;</div><div class="line">                        <span class="comment">//手指落下事件，本例中不做处理</span></div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">case</span> MotionEvent.<span class="string">ACTION_DOWN:</span>&#123;</div><div class="line">                        <span class="comment">//手指离开事件，本例中不做处理</span></div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//手指移动事件</span></div><div class="line">                    <span class="keyword">case</span> MotionEvent.<span class="string">ACTION_MOVE:</span>&#123;</div><div class="line">                        <span class="comment">/*</span></div><div class="line">                         * 1、getScrollY()——————滚动条滑动的距离</div><div class="line">                         * 2、getMeasuredHeight()————视图的总高度(包括屏幕外的部分)</div><div class="line">                         * 3、getHeight()————一屏幕的高度</div><div class="line">                         * </div><div class="line">                         */</div><div class="line">                        </div><div class="line">                        <span class="comment">//处于顶部状态</span></div><div class="line">                        <span class="keyword">if</span>(scroll.getScrollY()&lt;=<span class="number">0</span>)&#123;</div><div class="line">                            Log.i(<span class="string">"Main"</span>,<span class="string">"处于顶部"</span>);</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        <span class="comment">//底部状态</span></div><div class="line">                        <span class="comment">//TextView的总高度&lt;=一屏幕的高度+滚动条滚动的距离</span></div><div class="line">                        <span class="keyword">if</span>(scroll.getChildAt(<span class="number">0</span>).getMeasuredHeight()&lt;=scroll.getHeight()+scroll.getScrollY())&#123;</div><div class="line">                            Log.i(<span class="string">"Main"</span>,<span class="string">"滑到底部"</span>);</div><div class="line">                            Log.i(<span class="string">"Main"</span>,<span class="string">"scroll.getChildAt(0).getMeasuredHeight()="</span>+scroll.getChildAt(<span class="number">0</span>).getMeasuredHeight());</div><div class="line">                            Log.i(<span class="string">"Main"</span>,<span class="string">"scroll.getHeight()="</span>+scroll.getHeight());</div><div class="line">                            Log.i(<span class="string">"Main"</span>,<span class="string">"scroll.getScrollY()="</span>+scroll.getScrollY());</div><div class="line">                            </div><div class="line">                            <span class="comment">//追加文本</span></div><div class="line">                            tv.append(<span class="string">"这是一段追加文本"</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//为button添加click事件监听器，说明scrollTo与scrollBy的区别</span></div><div class="line">        up = (Button) findViewById(R.id.up);</div><div class="line">        down = (Button) findViewById(R.id.down);</div><div class="line">        </div><div class="line">        up.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        down.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onClick(View v) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">switch</span>(v.getId())&#123;</div><div class="line">            <span class="comment">//scrollTo()————参考滚动条最开始的位置，只能滚动一次</span></div><div class="line">            <span class="comment">//scrollBy()————相对滚动条前一次的位置进行滚动，可以实现持续滚动</span></div><div class="line">            <span class="keyword">case</span> R.id.<span class="string">up:</span>&#123;</div><div class="line">                scroll.scrollTo(<span class="number">0</span>,<span class="number">-30</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> R.id.<span class="string">down:</span>&#123;</div><div class="line">                scroll.scrollBy(<span class="number">0</span>,<span class="number">30</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用Gallery和ImageSwitcher制作图片浏览器"><a href="#使用Gallery和ImageSwitcher制作图片浏览器" class="headerlink" title="使用Gallery和ImageSwitcher制作图片浏览器"></a>使用Gallery和ImageSwitcher制作图片浏览器</h2><p>Gallery: android提供的一种可通过手机触摸来移动图片，产生图片滚动效果，还可以响应其他事件。</p>
<p>通过Gallery在UI上实现缩略图浏览器，通过ImageSwitcher显示预览大图。</p>
<p>1、在布局文件中声明了Gallery控件和ImageSwitcher控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Gallery</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/gallery"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageSwitcher</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgsw"</span>&gt;<span class="tag">&lt;/<span class="name">ImageSwitcher</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、编写继承自BaseAdapter的自定义适配器MyImageAdapter<br>BaseAdapter中重要方法<br>    public int getCount()  ————返回已定义的数据源的总数量<br>    public Obejct getItem(int position)<br>    public long getItem(int position)<br>            ————告诉适配器取得目前容器中的数据ID和对象<br>    public View getView(int position,View convertView,ViewGroup parent)<br>            ————取得目前欲显示的图像View，传入数组ID值使之读取与成像</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImageAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//数据源</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[]res;</div><div class="line">    <span class="comment">//上下文</span></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="comment">//定义构造方法，传递数据源</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyImageAdapter</span><span class="params">(<span class="keyword">int</span>[] res,Context context)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.res = res;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回已定义的数据源的总数量</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//返回res.length无法实现图片无限循环滚动显示</span></div><div class="line">        <span class="comment">//return res.length;</span></div><div class="line">        <span class="comment">//为实现图片无限循环滚动显示，需返回最大值</span></div><div class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//告诉适配器取得目前容器中的数据对象</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> res[position];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//告诉适配器取得目前容器中的数据ID</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> position;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//取得目前欲显示的图像View，传入数组ID值使之读取与成像</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        </div><div class="line">        ImageView img = <span class="keyword">new</span> ImageView(context);</div><div class="line">        <span class="comment">//直接取数据源的下标，无法实现图片无限循环滚动显示</span></div><div class="line">        <span class="comment">//img.setBackgroundResource(res[position]);</span></div><div class="line">        <span class="comment">//为实现图片无限循环滚动显示，需进行取余操作，因position因getCount()返回无限大，res.length为12</span></div><div class="line">        img.setBackgroundResource(res[position%res.length]);</div><div class="line">        <span class="comment">//设置图片在Gallery中缩略图的大小为200*150</span></div><div class="line">        img.setLayoutParams(<span class="keyword">new</span> Gallery.LayoutParams(<span class="number">200</span>, <span class="number">150</span>));</div><div class="line">        <span class="comment">//设置image的缩略模式</span></div><div class="line">        img.setScaleType(ScaleType.FIT_XY);</div><div class="line">        <span class="keyword">return</span> img;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、在MainActivity中实现手机触摸移动图片、大图预览效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">ViewFactory</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//官方建议使用HorizontalScrollView或android.support.v4.view.ViewPager替换Gallery</span></div><div class="line">    <span class="keyword">private</span> Gallery gall;</div><div class="line">    <span class="keyword">private</span> ImageSwitcher imgsw;</div><div class="line"></div><div class="line">    <span class="comment">//2、定义图片资源数据源</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] imgsId = &#123;R.drawable.item1,R.drawable.item2,R.drawable.item3,</div><div class="line">            R.drawable.item4,R.drawable.item5,R.drawable.item6,R.drawable.item7,</div><div class="line">            R.drawable.item8,R.drawable.item9,R.drawable.item10,</div><div class="line">            R.drawable.item11,R.drawable.item12&#125;;</div><div class="line"></div><div class="line">    <span class="comment">//声明自定义的适配器对象</span></div><div class="line">    <span class="keyword">private</span> MyImageAdapter adapter;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//1、初始化Gallery和ImageSwitcher对象</span></div><div class="line">        gall = (Gallery) findViewById(R.id.gallery);</div><div class="line">        imgsw = (ImageSwitcher) findViewById(R.id.imgsw);</div><div class="line">        </div><div class="line">        <span class="comment">//3、为Gallery对象加载自定义适配器</span></div><div class="line">        adapter = <span class="keyword">new</span> MyImageAdapter(imgsId,<span class="keyword">this</span>);</div><div class="line">        gall.setAdapter(adapter);</div><div class="line">        </div><div class="line">        <span class="comment">//4、为ImageSwitcher对象设置监听器，显示大图预览</span></div><div class="line">        imgsw.setFactory(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//为ImageSwitcher对象设置动画效果</span></div><div class="line">        imgsw.setInAnimation(AnimationUtils.loadAnimation(<span class="keyword">this</span>, android.R.anim.fade_in));</div><div class="line">        imgsw.setOutAnimation(AnimationUtils.loadAnimation(<span class="keyword">this</span>, android.R.anim.fade_out));</div><div class="line"></div><div class="line">        <span class="comment">//6、为Gallery设置监听器onItemSelected,实现大图预览当前选中的图片</span></div><div class="line">        gall.setOnItemSelectedListener(<span class="keyword">new</span> OnItemSelectedListener() &#123;</div><div class="line">            </div><div class="line">            <span class="comment">//7、在Gallery对象中选中图片，利用ImageSwitcher实现显示大图预览</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; parent, View view,</span></span></div><div class="line">                    <span class="keyword">int</span> position, <span class="keyword">long</span> id) &#123;</div><div class="line">                <span class="comment">//8、为ImageSwitcher对象加载图像资源</span></div><div class="line">                imgsw.setBackgroundResource(imgsId[position%imgsId.length]);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; parent)</span> </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;);  </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//5、为ImageSwitcher对象定义监听器的实现</span></div><div class="line">    <span class="comment">//ImageSwitcher粗略的理解就是ImageView的选择器，它需要实现ViewFactory接口</span></div><div class="line">    <span class="comment">//一般情况下，让该ViewFactory接口的makeView()方法返回ImageView对象</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">makeView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        ImageView img = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//按比例缩放图片，并居中显示</span></div><div class="line">        img.setScaleType(ScaleType.FIT_CENTER);</div><div class="line">        <span class="keyword">return</span> img;</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用SeekBar制作可拖动的进度条"><a href="#使用SeekBar制作可拖动的进度条" class="headerlink" title="使用SeekBar制作可拖动的进度条"></a>使用SeekBar制作可拖动的进度条</h2><p>SeekBar可以通过滑块的位置来标识数值，而且允许用户拖动滑块来改变进度值的大小</p>
<p>SeekBar的主要属性和方法<br>    setMax        设置SeekBar的最大数值<br>    setProgress   设置SeekBar当前的数值<br>    setSecondaryProgress 设置SeekBar的第二数值，即当前拖动条推荐的数值</p>
<p>SeekBar是ProgressBar的子类</p>
<p>SeekBar的事件<br>    由于拖动条可以被用户控制，所有需要对其进行事件监听，这就需要实现SeekBar.OnSeekBarChangeListener接口。此接口共需要监听三个事件，分别是：<br>        数值改变————onProgressChanged<br>        开始拖动————onStartTrackingTouch<br>        停止拖动————onStopTrackingTouch</p>
<h3 id="自定义SeekBar进度条样式————与ProgressBar类似"><a href="#自定义SeekBar进度条样式————与ProgressBar类似" class="headerlink" title="自定义SeekBar进度条样式————与ProgressBar类似"></a>自定义SeekBar进度条样式————与ProgressBar类似</h3><pre><code>查看SeekBar默认的样式style=&quot;@android:style/Widget.SeekBar&quot;
</code></pre><p>修改自定义SeekBar进度条样式的步骤<br>1、在drawable中编写thumb.xml文件,代码如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/select"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span> <span class="attr">android:state_window_focused</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/select"</span> <span class="attr">android:state_focused</span>=<span class="string">"true"</span> <span class="attr">android:state_window_focused</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/select"</span> <span class="attr">android:state_selected</span>=<span class="string">"true"</span> <span class="attr">android:state_window_focused</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/normal"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在主布局文件中修改SeekBar的如下属性即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;SeekBar</div><div class="line">    ...</div><div class="line">    <span class="comment">//改变进度条的样式</span></div><div class="line">    android:progressDrawable = <span class="string">"@drawable/seekbar_img"</span></div><div class="line">    <span class="comment">//改变滑块的样式</span></div><div class="line">    android:thumb = <span class="string">"@drawable/thumb"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">SeekBar</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="使用SeekBar制作可拖动的进度条的步骤"><a href="#使用SeekBar制作可拖动的进度条的步骤" class="headerlink" title="使用SeekBar制作可拖动的进度条的步骤"></a>使用SeekBar制作可拖动的进度条的步骤</h3><p>1、在布局文件中声明SeekBar控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- </span></div><div class="line">            android:max="100"  //最大进度值</div><div class="line">            android:progress="50"  //当前进度值</div><div class="line">     --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">SeekBar</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/seekbar"</span></div><div class="line">        <span class="attr">android:max</span>=<span class="string">"100"</span></div><div class="line">        <span class="attr">android:progress</span>=<span class="string">"50"</span>/&gt;</div><div class="line">    </div><div class="line">     <span class="comment">&lt;!--用于显示进度值的2个TextView--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">         <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">         <span class="attr">android:id</span>=<span class="string">"@+id/tv1"</span>/&gt;</div><div class="line">     </div><div class="line">     <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">         <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">         <span class="attr">android:id</span>=<span class="string">"@+id/tv2"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中使用SeekBar<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    private SeekBar sb;</div><div class="line">    private TextView tv1,tv2;</div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//1、初始化</span></div><div class="line">        sb = (SeekBar) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.seekbar</span>);</div><div class="line">        tv1 = (TextView) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.tv1</span>);</div><div class="line">        tv2 = (TextView) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.tv2</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//2、绑定事件监听器</span></div><div class="line">        <span class="selector-tag">sb</span><span class="selector-class">.setOnSeekBarChangeListener</span>(new OnSeekBarChangeListener() &#123;</div><div class="line">            </div><div class="line">            <span class="comment">//停止拖动时调用该方法</span></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void onStopTrackingTouch(SeekBar seekBar) &#123;</div><div class="line">                tv1<span class="selector-class">.setText</span>(<span class="string">"停止拖动"</span>);</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//开始拖动时调用该方法</span></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void onStartTrackingTouch(SeekBar seekBar) &#123;</div><div class="line">                tv1<span class="selector-class">.setText</span>(<span class="string">"开始拖动"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//数值改变时调用该方法</span></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void onProgressChanged(SeekBar seekBar, int progress,</div><div class="line">                    boolean fromUser) &#123;</div><div class="line">                tv1<span class="selector-class">.setText</span>(<span class="string">"正在拖动"</span>);</div><div class="line">                <span class="comment">//显示当前数值</span></div><div class="line">                tv2<span class="selector-class">.setText</span>(<span class="string">"当前数值为"</span>+progress);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Android布局优化"><a href="#Android布局优化" class="headerlink" title="Android布局优化"></a>Android布局优化</h2><h3 id="推荐使用布局"><a href="#推荐使用布局" class="headerlink" title="推荐使用布局"></a>推荐使用布局</h3><p>一、Android五种常用布局<br>|    布局名称     |    特点| 使用频率|<br>| :——-:|:——–:|:——–:|:————–|<br>|    LinearLayout    |线性  垂直 水平|  4|<br>|    RelativeLayout  |最灵活的   相对定位|  5(最多)|<br> |   TableLayout     |行列，建议使用GridView代替|  2|<br>|    AbsoluteLayout  |不建议使用，兼容性差|      1(最少)|<br>|    FrameLayout     |布局叠加时使用，且该布局下的组件也都会叠加显示|  3|</p>
<p>二、Android布局原则</p>
<pre><code>1、尽量多使用LinearLayout和RelativeLayout，不要使用AbsoluteLayout。
2、在布局层次一样的情况下，建议使用LinearLayout代替RelativeLayout，
   因为LinearLayout性能稍高一点。
3、将可复用的组件抽取出来并通过include标签使用。
4、使用ViewStub标签来加载一些不常用的布局。
5、使用merge标签减少布局的嵌套层次。
</code></pre><h3 id="布局优化之include"><a href="#布局优化之include" class="headerlink" title="布局优化之include"></a>布局优化之include</h3><p>作用：将共用的组件抽取出来单独放到一个xml文件中，然后使用include标签导入共用布局<br>效果：提高UI的制作和复用效率，也能保证制作的UI布局更加规整和易维护；</p>
<p>使用inculde进行布局优化的步骤:</p>
<p>1、定义共用组件，如命名为common_title.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#000000"</span> </div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"10dp"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 公共标题组件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/ret"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"返回"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span></div><div class="line">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/title"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"布局优化"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fun"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"功能"</span></div><div class="line">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、使用include标签导入共用布局到主布局文件中,如命名为main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 导入通用标题部分 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> </span></div><div class="line">        <span class="attr">layout</span>=<span class="string">"@layout/common_title"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 正文部分 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"正文内容"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、在MainActivity中，可以使用所有组件<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//导入主布局文件</span></div><div class="line">setContentView(R.<span class="keyword">layout</span>.main);</div><div class="line"></div><div class="line"><span class="comment">//使用include标签导入到主布局文件中的布局，就如同主布局文件中声明的一样</span></div><div class="line"><span class="comment">//所以可以直接在MainActivity中使用common_title.xml文件中的组件</span></div><div class="line">TextView tv = (TextView)findViewById(R.id.ret)</div></pre></td></tr></table></figure></p>
<h3 id="布局优化之merge"><a href="#布局优化之merge" class="headerlink" title="布局优化之merge"></a>布局优化之merge</h3><p>作用：合并UI布局，使用该标签能降低UI布局的嵌套层次</p>
<p>使用场景一：布局根结点是FrameLayout且不需要设置background或padding等属性，可以用merge代替<br>使用场景二：某布局作为子布局被其他布局include时，使用merge当作该布局的顶节点，这样在被引入时顶节点会自动被忽略</p>
<p>使用merge进行布局优化的步骤:<br>1、定义共用布局，如命名为common_progress.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line"><span class="comment">&lt;!-- 在merge的第一种使用场景中，该merge节点是替换自没有background或padding等属性的FrameLayout布局根结点 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 在merge的第二种使用场景中，该merge节点将被忽略 --&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 公共环形进度条组件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wait"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"请稍后..."</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、使用include标签导入到主布局文件中,如命名为main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 导入通用标题部分 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> </span></div><div class="line">        <span class="attr">layout</span>=<span class="string">"@layout/common_title"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 正文部分 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"正文内容"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"18sp"</span>/&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- merge使用场景二：某布局(如common_progress.xml)作为子布局被其他布局</span></div><div class="line">             (如当前布局文件activity_main.xml)include时，</div><div class="line">              使用merge当作该布局的顶节点，这样在被引入时顶节点会自动被忽略</div><div class="line">              (即自动忽略了common_progress.xml中的&lt;merge ...&gt;这个节点) --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> </span></div><div class="line">            <span class="attr">layout</span>=<span class="string">"@layout/common_progress"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、在MainActivity中，可以使用所有组件<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//导入主布局文件</span></div><div class="line">setContentView(R.layout.main);</div><div class="line"></div><div class="line"><span class="comment">//使用include标签导入到主布局文件中的布局，就如同主布局文件中声明的一样</span></div><div class="line"><span class="comment">//所以可以直接在MainActivity中使用common_progress.xml文件中的组件</span></div><div class="line">TextView <span class="built_in">wait</span> = (TextView)findViewById(R.id.<span class="built_in">wait</span>);</div><div class="line"><span class="built_in">wait</span>.setText(<span class="string">"waiting"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="布局优化之viewStub惰性加载"><a href="#布局优化之viewStub惰性加载" class="headerlink" title="布局优化之viewStub惰性加载"></a>布局优化之viewStub惰性加载</h3><p>作用：Viewstub标签同include标签一样可以用来引入一个外部布局；<br>    不同的是，Viewstub引入的布局默认不会扩张(即默认不加载外部布局文件)，既不会占用显示<br>    也不会占用位置，从而在解析layout时节省cpu和内存。</p>
<p><strong>viewStub默认不加载外部布局文件，而由人为控制何时加载————惰性加载</strong></p>
<p>使用viewStub进行布局优化的步骤:<br>1、定义惰性加载布局，如命名为common_text.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/common_text"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"隐藏内容"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、使用ViewStub标签加载外部布局common_text.xml到主布局文件中,如命名为main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/show"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"显示隐藏外部布局"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 使用ViewStub惰性加载外部布局common_text.xml --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ViewStub</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/stub"</span></div><div class="line">        <span class="attr">android:layout</span>=<span class="string">"@layout/common_text"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、在MainActivity中，惰性加载外部布局<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">TextView</span> commonText;</div><div class="line">    <span class="keyword">private</span> <span class="type">Button</span> show;</div><div class="line">    <span class="keyword">private</span> <span class="type">ViewStub</span> stub;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        </div><div class="line">        stub = (<span class="type">ViewStub</span>) findViewById(<span class="type">R</span>.id.stub);</div><div class="line">        show = (<span class="type">Button</span>)findViewById(<span class="type">R</span>.id.show);</div><div class="line">        </div><div class="line">        <span class="comment">//默认不加载外部布局文件，只有在点击按钮后才开始加载外部布局</span></div><div class="line">        show.setOnClickListener(<span class="keyword">new</span> <span class="type">OnClickListener</span>() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            public void onClick(<span class="type">View</span> v) &#123;</div><div class="line">                <span class="comment">//惰性加载加载布局，连续第二次点击按钮就会报错</span></div><div class="line">                <span class="comment">//stub.inflate();</span></div><div class="line">                <span class="comment">//惰性加载加载布局，连续多次点击按钮也会正常显示</span></div><div class="line">                stub.setVisibility(stub.<span class="type">VISIBLE</span>);</div><div class="line">                <span class="comment">//调用惰性加载布局文件中组件</span></div><div class="line">                commonText = (<span class="type">TextView</span>)findViewById(<span class="type">R</span>.id.common_text);</div><div class="line">                commonText.setText(<span class="string">"显示内容"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、android模拟器中的所有文件路径：<br>apk存在于Window-show view-Other-Android-File Explorer<br>2、在布局文件中声明ViewPager控件与之前的控件不同，它是android.support.v4兼容包下的一个控件<br>3、android.support.v4是谷歌为了解决当前android版本碎片化而提供的兼容性jar包，位于libs文件夹下。<br>4、android.support.v4主要目的是解决向下兼容性问题，使得高版本的控件在低版本系统中仍然可以正常使用。<br>5、PagerTabStrip和PagerTitleStrip都是ViewPager控件的子控件，二者不可以同时出现。<br>6、FragmentStatePagerAdapter与FragmentPagerAdapter适配器的区别：<br>FragmentPagerAdapter不会自动的创建和销毁页卡，一次性加载所有页卡；在页卡较少时可以使用该适配器。<br>FragmentStatePagerAdapter是自动的创建和销毁页卡，而不是一次性加载所有页卡；<br>PagerAdapter是自动的创建和销毁页卡，而不是一次性加载所有页卡；默认一次加载三个页卡。<br>7、ViewFlipper与ViewPager的用法区别：<br>通过手势的左右滑动切换视图，建议使用ViewPager；<br>ViewFlipper优点是实现子界面的自动切换；<br>8、控制scrollView视图的滚动条的位置scrollTo()与scrollBy()方法的区别：<br>scrollTo()————参考滚动条最开始的位置，只能滚动一次；<br>scrollBy()————相对滚动条前一次的位置进行滚动，可以实现持续滚动<br>9、ImageSwitcher和ImageView功能类似，都可以用于显示图片，区别在于ImageSwitcher的效果更炫，它可以指定图片切换时的动画效果<br>10、如果ctrl+左键无法打开资源文件时，可以使用如下方式查看：<br>..\sdk\platforms\android-19\data\res\drawable\资源名.xml<br>11、布局的嵌套层次：通过布局文件的outline可以查看布局的嵌套层次————每缩进一层，即是一个嵌套层次。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android入门二]]></title>
      <url>https://aiolos123.github.io/2016/09/06/learn-android-step-by-step-two/</url>
      <content type="html"><![CDATA[<p>本文为android入门的第二课的第一部分，学习了android高级控件、View视图的相关知识。<br>学习来源：<a href="http://www.imooc.com/learn/107" target="_blank" rel="external">http://www.imooc.com/learn/107</a><br><a id="more"></a></p>
<h2 id="AndroidManifest-xml配置文件"><a href="#AndroidManifest-xml配置文件" class="headerlink" title="AndroidManifest.xml配置文件"></a>AndroidManifest.xml配置文件</h2><p>本质：AndroidManifest.xml是整个应用的主配置清单文件。<br>包含：该应用的包名、版本号、组件、权限等信息。<br>作用：记录该应用的相关的配置信息</p>
<h3 id="AndroidManifest-xml三类常用标签"><a href="#AndroidManifest-xml三类常用标签" class="headerlink" title="AndroidManifest.xml三类常用标签"></a>AndroidManifest.xml三类常用标签</h3><h4 id="全局标签-包名、版本信息、android版本"><a href="#全局标签-包名、版本信息、android版本" class="headerlink" title="全局标签(包名、版本信息、android版本)"></a>全局标签(包名、版本信息、android版本)</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?</span>xml <span class="built_in">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></div><div class="line">&lt;manifest xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">   <span class="comment"> //应用的包名以及版本信息管理</span></div><div class="line">    package=<span class="string">"com.example.manifest21app"</span></div><div class="line">    android:versionCode=<span class="string">"1"</span></div><div class="line">    android:versionName=<span class="string">"1.0"</span> &gt;</div><div class="line">    </div><div class="line">   <span class="comment"> //控制android版本信息，支持的最低版本、期望的系统版本</span></div><div class="line">    &lt;uses-sdk</div><div class="line">        android:minSdkVersion=<span class="string">"8"</span></div><div class="line">        android:targetSdkVersion=<span class="string">"19"</span> /&gt;</div><div class="line">   <span class="comment"> //组件标签</span></div><div class="line">    ...</div><div class="line">   <span class="comment"> //权限标签</span></div><div class="line">    ...</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
<h4 id="组件标签-四大组件的声明和配置"><a href="#组件标签-四大组件的声明和配置" class="headerlink" title="组件标签(四大组件的声明和配置)"></a>组件标签(四大组件的声明和配置)</h4><p>使用application标签包裹，一个清单文件中只能包含一个application标签。<br>在其内部可以包含各种组件，如android的四大组件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">...</span>/&gt;</span></div><div class="line"></div><div class="line">    //组件标签</div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span>  //应用全局的图标</div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>  //应用全局的标题</div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>  //应用全局的主题样式</div><div class="line">    &gt;</div><div class="line">        //注册activity组件</div><div class="line">        //所有activity组件都必须在该配置文件中进行注册，否则程序会崩溃</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            //<span class="attr">activity</span>的唯一标识：使用包名<span class="attr">.</span>类名的命名方式</div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app.MainActivity"</span></div><div class="line">            //<span class="attr">activity</span>的标题</div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                //应用的主入口配置，一个android应用只有一个主入口配置</div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 注册其他组件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app.OtherActivity"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                //申明自身的标识</div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"aaa.bbb.ccc"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">service</span> </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app.BaseService"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">receiver</span> </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app.BaseReceiver"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"example.app.install"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">provider</span> </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app.BaseProvider"</span></div><div class="line">            <span class="attr">android:authorities</span>=<span class="string">"aaa.bbb.ccc.ddd"</span>&gt;<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="权限标签-申请和定义权限的配置"><a href="#权限标签-申请和定义权限的配置" class="headerlink" title="权限标签(申请和定义权限的配置)"></a>权限标签(申请和定义权限的配置)</h4><h5 id="系统权限的使用"><a href="#系统权限的使用" class="headerlink" title="系统权限的使用"></a>系统权限的使用</h5><p>添加系统权限的步骤</p>
<pre><code>打开AndroidManifest.xml--&gt;Permissions选项卡--&gt;add--&gt;Uses permission--&gt;OK--&gt;Name下拉列表

使用&lt;user-permission&gt;申请系统权限
声明了哪些是由你选择的权限，而这些权限是应用程序正常秩序所必需的。
在安装程序时，你设定的所有权限将会告诉给用户，由他们来决定同意与否
</code></pre><p>代码示例如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">...</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--申请系统权限--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH"</span> <span class="attr">android:maxSdkVersion</span>=<span class="string">"16"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="自定义权限的使用"><a href="#自定义权限的使用" class="headerlink" title="自定义权限的使用"></a>自定义权限的使用</h5><pre><code>自定义权限可以自定义命名，来保护android的某些重要组件。
防止其他应用随意访问这些组件。
</code></pre><p>代码示例如下<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用permission声明自定义权限eee.fff.ggg</span></div><div class="line">&lt;permission</div><div class="line">    android:<span class="built_in">name</span>=<span class="string">"eee.fff.ggg"</span></div><div class="line">    android:maxSdkVersion=<span class="string">"16"</span>/&gt;</div><div class="line">&lt;activity </div><div class="line">            <span class="comment">//在将要使用的activity中使用android:permission属性来注册自定义权限eee.fff.ggg</span></div><div class="line">            <span class="comment">//注意：声明和使用的权限的名称必须一致。</span></div><div class="line">            android:permission=<span class="string">"eee.fff.ggg"</span></div><div class="line">            android:<span class="built_in">name</span>=<span class="string">"com.example.manifest21app.OtherActivity"</span>&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;<span class="built_in">action</span> android:<span class="built_in">name</span>=<span class="string">"aaa.bbb.ccc"</span>/&gt;</div><div class="line">                &lt;category android:<span class="built_in">name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line"></div><div class="line"><span class="comment">//这样就实现了保护android的这个activity组件。</span></div><div class="line"><span class="comment">//想使用该组件，必须使用如下方法，否则程序会崩溃</span></div><div class="line"><span class="comment">//在其他应用程序中，使用uses-permission标签申请自定义权限eee.fff.ggg，以使用该activity组件</span></div><div class="line"></div><div class="line">&lt;uses-permission </div><div class="line">        android:<span class="built_in">name</span>=<span class="string">"eee.fff.ggg"</span></div><div class="line">        android:maxSdkVersion=<span class="string">"16"</span>/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><pre><code>作用：把复杂的数据源(如数组、链表、数据库、集合等)填充到指定的视图界面上。
意义：数据适配器是连接数据源和视图界面的桥梁。
</code></pre><h3 id="使用适配器的三个步骤"><a href="#使用适配器的三个步骤" class="headerlink" title="使用适配器的三个步骤"></a>使用适配器的三个步骤</h3><pre><code>1、新建适配器
2、添加数据源到适配器
3、视图加载适配器
</code></pre><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><pre><code>作用：android提供很多种事件监听器，主要是为了响应某个动作(动作的发起者可能是用户也可能是android系统本身)。
通过监听这种动作行为，执行特定程序代码来完成需要的功能
意义：监听器是程序和用户(或系统)交互的桥梁。
本质：每个监听器都是一个接口
</code></pre><h3 id="使用监听器的二个步骤"><a href="#使用监听器的二个步骤" class="headerlink" title="使用监听器的二个步骤"></a>使用监听器的二个步骤</h3><pre><code>1、为视图直接设置监听器
2、在监听器的实现方法中补充需要的代码
</code></pre><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><pre><code>熟练运用OnScrollListener、OnItemClickListener两种监听器
熟练运用适配器数据的刷新NotifyDataChanged
</code></pre><h3 id="ListView是什么"><a href="#ListView是什么" class="headerlink" title="ListView是什么"></a>ListView是什么</h3><pre><code>作用：android系统中显示列表的控件
组成：每一个ListView都可以包含很多个列表项
类比: 类似于html中的ul，其中包含的列表项相当于li
</code></pre><h3 id="ListView下常用的两种适配器"><a href="#ListView下常用的两种适配器" class="headerlink" title="ListView下常用的两种适配器"></a>ListView下常用的两种适配器</h3><pre><code>ArrayAdapter(数组适配器):  用于绑定格式单一的数据；数据源可以是集合或数组。
SimpleAdapter(简单适配器): 用于绑定格式复杂的数据；数据源只能是特定泛型的集合。
</code></pre><h3 id="使用ListView的五个步骤"><a href="#使用ListView的五个步骤" class="headerlink" title="使用ListView的五个步骤"></a>使用ListView的五个步骤</h3><pre><code>1、初始化ListView视图对象
2、新建适配器
3、创建数据源并添加到适配器
4、ListView视图加载适配器
5、为ListView配置事件监听器
</code></pre><h3 id="ArrayAdapter的代码示例如下"><a href="#ArrayAdapter的代码示例如下" class="headerlink" title="ArrayAdapter的代码示例如下"></a>ArrayAdapter的代码示例如下</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ListView lv;</div><div class="line"><span class="keyword">private</span> ArrayAdapter&lt;<span class="keyword">String</span>&gt;arr_adapter;</div><div class="line"></div><div class="line">@Override</div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.main);</div><div class="line">    <span class="comment">//一、数组适配器的使用步骤</span></div><div class="line">    lv = (ListView)findViewById(R.id.lv);</div><div class="line">    <span class="comment">//1、新建数组适配器 - new</span></div><div class="line">    <span class="comment">//以数组为数据源的数组适配器的构造方法：</span></div><div class="line">    <span class="comment">//ArrayAdapter&lt;String&gt;(当前Activity上下文-即this本身, 当前ListView加载的每一个列表项所对应的布局文件, 数组数据源)</span></div><div class="line">    <span class="comment">//2、添加数据源到适配器</span></div><div class="line">    <span class="keyword">String</span>[]arr_data = &#123;<span class="string">"X课网1"</span>,<span class="string">"X课网2"</span>,<span class="string">"X课网3"</span>,<span class="string">"X课网4"</span>&#125;;</div><div class="line">    arr_adapter=<span class="keyword">new</span> ArrayAdapter&lt;<span class="keyword">String</span>&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, arr_data);</div><div class="line">    <span class="comment">//3、ListView视图加载适配器</span></div><div class="line">    lv.setAdapter(arr_adapter);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SimpleAdapter的代码示例如下"><a href="#SimpleAdapter的代码示例如下" class="headerlink" title="SimpleAdapter的代码示例如下"></a>SimpleAdapter的代码示例如下</h3><p>简单适配器的构造方法中的参数较多，注意与布局文件的ID的对应关系。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ListView lv;</div><div class="line"><span class="keyword">private</span> SimpleAdapter sim_adapter;</div><div class="line"><span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;&gt;dataList;</div><div class="line"></div><div class="line">@Override</div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.main);</div><div class="line">    </div><div class="line">    <span class="comment">//二、简单适配器的使用步骤</span></div><div class="line">    <span class="comment">//1、新建适配器</span></div><div class="line">    <span class="comment">//简单适配器的唯一一个构造方法:</span></div><div class="line">    <span class="comment">/* SimpleAdapter(context, data, resource, from, to)</span></div><div class="line">    * 其参数含义如下：</div><div class="line">    * context : 指当前Activity上下文--即this本身</div><div class="line">    * data: 数据源，是特定泛型的集合(List&lt;? extends Map&lt;String, ?&gt;&gt; data)</div><div class="line">    *       即一个由Map所组成的list集合</div><div class="line">    *       每一个Map都对应ListView中的一个列表项</div><div class="line">    *       每一个Map(键值对)中的键必须包含在from参数中</div><div class="line">    * resource: 列表项的布局文件ID</div><div class="line">    * from: 记录Map中的键的数组</div><div class="line">    * to: 绑定数据视图xml文件中的控件ID数组，与from成对应关系——即数组的第一个元素对应from数组的第一个元素</div><div class="line">    * </div><div class="line">    */</div><div class="line">    sim_adapter=<span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>, getData(), R.layout.item, <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"pic"</span>,<span class="string">"text"</span>&#125;, <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;R.id.pic,R.id.<span class="built_in">text</span>&#125;);</div><div class="line">    </div><div class="line">    <span class="comment">//如本例中</span></div><div class="line">    <span class="comment">//R.layout.item(即item.xml文件)就是列表项的布局文件的ID</span></div><div class="line">    <span class="comment">//to就是item.xml文件中的控件ID数组——new int[]&#123;R.id.pic,R.id.text&#125;</span></div><div class="line">    <span class="comment">//from就是记录Map中的键的数组——new String[]&#123;"pic","text"&#125;</span></div><div class="line">    <span class="comment">//data数据源就是生成数据源的getData()</span></div><div class="line">    <span class="comment">//3、ListView视图加载适配器</span></div><div class="line">    lv.setAdapter(sim_adapter);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//生成数据源</span></div><div class="line"><span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;&gt; getData()&#123;</div><div class="line">    <span class="comment">//每次新建一个Map,并保存到List集合中</span></div><div class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;<span class="built_in">map</span> =<span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;();</div><div class="line">        <span class="comment">//动态填充图片和文字内容</span></div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"pic"</span>,R.drawable.ic_launcher);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"text"</span>,<span class="string">"慕课网"</span>+i);</div><div class="line">        dataList.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dataList;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>item.xml列表项布局文件如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 图片在左，文字在右 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/pic"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#000000"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Demo"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="监听ListView列表项点击事件"><a href="#监听ListView列表项点击事件" class="headerlink" title="监听ListView列表项点击事件"></a>监听ListView列表项点击事件</h3><p>onItemClickListener: 处理ListView视图中单个条目的点击事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnItemClickListener</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ListView lv;</div><div class="line">    <span class="keyword">private</span> ArrayAdapter&lt;String&gt;arr_adapter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        lv = (ListView)findViewById(R.id.lv);</div><div class="line"></div><div class="line">        String[]arr_data = &#123;<span class="string">"X课网1"</span>,<span class="string">"X课网2"</span>,<span class="string">"X课网3"</span>,<span class="string">"X课网4"</span>&#125;;</div><div class="line">        arr_adapter=<span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, arr_data);</div><div class="line">        </div><div class="line">        lv.setAdapter(arr_adapter);</div><div class="line"></div><div class="line">        <span class="comment">//1、为ListView绑定监听器</span></div><div class="line">        lv.setOnItemClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2、在监听器的实现方法中补充需要的代码</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; arg0, View arg1, <span class="keyword">int</span> position, <span class="keyword">long</span> arg3)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        String tx = lv.getItemIdAtPosition(position)+<span class="string">""</span>;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"position="</span>+position+<span class="string">" text="</span>+tx, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="监听ListView列滚动事件"><a href="#监听ListView列滚动事件" class="headerlink" title="监听ListView列滚动事件"></a>监听ListView列滚动事件</h3><p>onScrollListener: 监听ListView滚动的变化，用于视图在滚动中加载数据<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnScrollListener</span>&#123;</span></div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        lv = (ListView)findViewById(R.id.lv);</div><div class="line">        </div><div class="line">        <span class="comment">//省略创建简单适配器的代码</span></div><div class="line">        lv.setAdapter(sim_adapter);</div><div class="line"></div><div class="line">        <span class="comment">//1、为ListView绑定监听器</span></div><div class="line">        lv.setOnScrollListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2、在监听器的实现方法中补充需要的代码</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onScroll(AbsListView view, <span class="keyword">int</span> firstVisibleItem,</div><div class="line">            <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount) &#123;       </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onScrollStateChanged(AbsListView view, <span class="keyword">int</span> scrollState) &#123;</div><div class="line">        <span class="keyword">switch</span>(scrollState)&#123;</div><div class="line">            <span class="comment">//手指没有离开屏幕，视图正在滑动</span></div><div class="line">            <span class="keyword">case</span> <span class="string">SCROLL_STATE_TOUCH_SCROLL:</span></div><div class="line">                Log.i(<span class="string">"main"</span>,<span class="string">"手指没有离开屏幕，视图正在滑动"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">            <span class="comment">//用户在手中离开屏幕前，用力滑动一下，视图仍依靠惯性继续滑动</span></div><div class="line">            <span class="keyword">case</span> <span class="string">SCROLL_STATE_FLING:</span></div><div class="line">                <span class="comment">//实现下拉增加列表项的功能：</span></div><div class="line">                <span class="comment">//第一步：向下滑动增加一条列表项</span></div><div class="line">                Map&lt;String,Object&gt;map =<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">                map.put(<span class="string">"pic"</span>,R.drawable.ic_launcher);</div><div class="line">                map.put(<span class="string">"text"</span>,<span class="string">"增加项"</span>+<span class="number">21</span>);</div><div class="line">                dataList.add(map);</div><div class="line">                <span class="comment">//第二步：更新视图界面的数据</span></div><div class="line">                <span class="comment">//notifyDataSetChanged用于动态更新视图中所包含的数据</span></div><div class="line">                sim_adapter.notifyDataSetChanged();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">            <span class="comment">//视图已停止滑动</span></div><div class="line">            <span class="keyword">case</span> <span class="string">SCROLL_STATE_IDLE:</span></div><div class="line">                Log.i(<span class="string">"main"</span>,<span class="string">"视图已停止滑动"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="DatePicker和TimePicker"><a href="#DatePicker和TimePicker" class="headerlink" title="DatePicker和TimePicker"></a>DatePicker和TimePicker</h2><p>DatePicker——动态输入并显示日期<br>TimePicker——动态输入并显示时间</p>
<h3 id="DatePickerDialog和TimePickerDialog"><a href="#DatePickerDialog和TimePickerDialog" class="headerlink" title="DatePickerDialog和TimePickerDialog"></a>DatePickerDialog和TimePickerDialog</h3><p>DatePickerDialog——动态输入并显示日期的对话框<br>TimePickerDialog——动态输入并显示时间的对话框</p>
<h3 id="两组监听日期时间改变的监听器"><a href="#两组监听日期时间改变的监听器" class="headerlink" title="两组监听日期时间改变的监听器"></a>两组监听日期时间改变的监听器</h3><table>
<thead>
<tr>
<th style="text-align:center">控件</th>
<th style="text-align:center">对应的监听器</th>
<th style="text-align:center">监听器的作用</th>
<th style="text-align:left">监听器里需要实现的事件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DatePicker</td>
<td style="text-align:center">OnDateChangedListener</td>
<td style="text-align:center">当用户更改了DatePicker里的年、月、日，将触发OnDateChangedListener监听器的onDateChange()事件</td>
<td style="text-align:left">onDateChange()事件</td>
</tr>
<tr>
<td style="text-align:center">TimePicker</td>
<td style="text-align:center">OnTimeChangedListener</td>
<td style="text-align:center">当用户更改了TimePicker里的时、分，将触发OnTimeChangedListener监听器的onTimeChange()事件</td>
<td style="text-align:left">onTimeChange()事件</td>
</tr>
<tr>
<td style="text-align:center">DatePickerDialog</td>
<td style="text-align:center">OnDateSetListener</td>
<td style="text-align:center">当用户更改了DatePickerDialog里的年、月、日，将触发OnDateSetListener监听器的onDateSet()事件</td>
<td style="text-align:left">onDateSet()事件</td>
</tr>
<tr>
<td style="text-align:center">TimePickerDialog</td>
<td style="text-align:center">OnTimeSetListener</td>
<td style="text-align:center">当用户更改了TimePickerDialog里的时、分，将触发OnTimeSetListener监听器的onTimeSet()事件</td>
<td style="text-align:left">onTimeSet()事件</td>
</tr>
</tbody>
</table>
<h3 id="DatePicker与TimePicker的代码示例"><a href="#DatePicker与TimePicker的代码示例" class="headerlink" title="DatePicker与TimePicker的代码示例"></a>DatePicker与TimePicker的代码示例</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    </div><div class="line">    private DatePicker dp;</div><div class="line">    private TimePicker timepk;</div><div class="line">    private Calendar cal;</div><div class="line">    private int year,month,day,hour,minute;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span>获取日历的一个对象</div><div class="line">        cal =Calendar.getInstance();</div><div class="line">        <span class="regexp">//</span>获取年月日时分秒的信息</div><div class="line">        year = cal.get(Calendar.YEAR);</div><div class="line">        month = cal.get(Calendar.MONTH)+<span class="number">1</span>;<span class="regexp">//</span>Calendar的月从<span class="number">0</span>开始</div><div class="line">        day = cal.get(Calendar.DAY_OF_MONTH);</div><div class="line">        hour = cal.get(Calendar.HOUR_OF_DAY);</div><div class="line">        minute = cal.get(Calendar.MINUTE);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span>将时间设置为app的标题</div><div class="line">        setTitle(year+<span class="string">"-"</span>+month+<span class="string">"-"</span>+day+<span class="string">" "</span>+hour+<span class="string">":"</span>+minute);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span>使用DatePicker的步骤</div><div class="line">        <span class="regexp">//</span><span class="number">1</span>、获取对象</div><div class="line">        dp = (DatePicker) findViewById(R.id.dp);</div><div class="line">        timepk = (TimePicker) findViewById(R.id.tp);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span><span class="number">2</span>、datePicker初始化</div><div class="line">        <span class="regexp">//</span>注意：month参数从<span class="number">0</span>开始表示月份，所以直接使用cal.get(Calendar.MONTH)即可</div><div class="line">        dp.init(year, cal.get(Calendar.MONTH), day, new OnDateChangedListener() &#123;</div><div class="line">            </div><div class="line">            @Override</div><div class="line">            public void onDateChanged(DatePicker view, int year, int monthOfYear,</div><div class="line">                    int dayOfMonth) &#123;</div><div class="line">                <span class="regexp">//</span><span class="number">3</span>、获取选取后的日期结果</div><div class="line">                <span class="regexp">//m</span>onthOfYear返回的值从<span class="number">0</span>开始</div><div class="line">                setTitle(year+<span class="string">"-"</span>+(monthOfYear+<span class="number">1</span>)+<span class="string">"-"</span>+dayOfMonth);  </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span>使用TimePicker的步骤</div><div class="line">        <span class="regexp">//</span><span class="number">2</span>、绑定监听器</div><div class="line">        timepk.setOnTimeChangedListener(new OnTimeChangedListener()&#123;</div><div class="line">            @Override</div><div class="line">            public void onTimeChanged(TimePicker view, int hourOfDay, int minute) &#123;</div><div class="line">                <span class="regexp">//</span><span class="number">3</span>、获取选取后的时间结果</div><div class="line">                setTitle(hourOfDay+<span class="string">":"</span>+minute);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="DatePickerDialog与TimePickerDialog的代码示例"><a href="#DatePickerDialog与TimePickerDialog的代码示例" class="headerlink" title="DatePickerDialog与TimePickerDialog的代码示例"></a>DatePickerDialog与TimePickerDialog的代码示例</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    </div><div class="line">    private Calendar cal;</div><div class="line">    private int year,month,day,hour,minute;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="regexp">//</span> TODO Auto-generated method stub</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span>获取日历的一个对象</div><div class="line">        cal =Calendar.getInstance();</div><div class="line">        <span class="regexp">//</span>获取年月日时分秒的信息</div><div class="line">        year = cal.get(Calendar.YEAR);</div><div class="line">        month = cal.get(Calendar.MONTH)+<span class="number">1</span>;<span class="regexp">//</span>Calendar的月从<span class="number">0</span>开始</div><div class="line">        day = cal.get(Calendar.DAY_OF_MONTH);</div><div class="line">        hour = cal.get(Calendar.HOUR_OF_DAY);</div><div class="line">        minute = cal.get(Calendar.MINUTE);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span>将时间设置为app的标题</div><div class="line">        setTitle(year+<span class="string">"-"</span>+month+<span class="string">"-"</span>+day+<span class="string">" "</span>+hour+<span class="string">":"</span>+minute);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span>使用DatePickerDialog的步骤</div><div class="line">        <span class="regexp">//</span><span class="number">1</span>、实例化DatePickerDialog对象并显示出来</div><div class="line">        new DatePickerDialog(this, new OnDateSetListener() &#123;</div><div class="line">            </div><div class="line">            @Override</div><div class="line">            public void onDateSet(DatePicker view, int year, int monthOfYear,</div><div class="line">                    int dayOfMonth) &#123;</div><div class="line">                <span class="regexp">//</span><span class="number">2</span>、获取选取后的日期结果</div><div class="line">                setTitle(year+<span class="string">"-"</span>+(monthOfYear+<span class="number">1</span>)+<span class="string">"-"</span>+dayOfMonth);</div><div class="line">            &#125;</div><div class="line">        &#125;, year, cal.get(Calendar.MONTH), day).show();</div><div class="line"></div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span>使用TimePickerDialog的步骤</div><div class="line">        <span class="regexp">//</span><span class="number">1</span>、实例化TimePickerDialog对象并显示出来</div><div class="line">        new TimePickerDialog(this, new OnTimeSetListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onTimeSet(TimePicker view, int hourOfDay, int minute) &#123;</div><div class="line">                <span class="regexp">//</span><span class="number">2</span>、获取选取后的时间结果</div><div class="line">                setTitle(hourOfDay+<span class="string">":"</span>+minute);</div><div class="line">            &#125;</div><div class="line">        &#125;, hour, minute, true).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><pre><code>1、DatePicker和DatePickerDialog的对象的初始化及其返回值中的月份都是从0开始的。所以在显示月份时都需要加1
2、DatePicker对象以init()方法来指定DatePicker初始的年、月、日及OnDateChangedListener()的事件;
3、TimePicker对象直接以setOnTimeChangedListener()事件来处理时间改变时程序要做的操作;
4、DatePickerDialog与TimePickerDialog和上面两类Picker对象的最大差别在于
XXXPicker是直接显示在屏幕界面上，而XXXPickerDialog对象则是以弹出Dialog的方式来显示。
5、使用DatePickerDialog与TimePickerDialog的方法都是直接在初始化其对象时
传入上下文、监听器的实现和年月日/时分参数即可。
而不像DatePicker与TimePicker需要初始化或绑定事件监听器。
</code></pre><h2 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h2><p>GridView用于在界面上按行、列分布的方式来显示多个组件</p>
<h3 id="使用GridView的五个步骤————同ListView"><a href="#使用GridView的五个步骤————同ListView" class="headerlink" title="使用GridView的五个步骤————同ListView"></a>使用GridView的五个步骤————同ListView</h3><pre><code>1、初始化GridView视图对象
2、新建适配器
3、创建数据源并添加到适配器
4、为GridView视图加载适配器
5、为GridView配置事件监听器——OnItemClickListener
</code></pre><h3 id="GridView使用示例代码"><a href="#GridView使用示例代码" class="headerlink" title="GridView使用示例代码"></a>GridView使用示例代码</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class MainActivity extends Activity implements OnItemClickListener&#123;</div><div class="line">    <span class="keyword">private</span> GridView gv;</div><div class="line">    <span class="keyword">private</span> SimpleAdapter simAda;</div><div class="line">    <span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;&gt; dataList;</div><div class="line">    <span class="comment">//图标icon数组</span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[]icons = &#123;R.drawable.address_book,R.drawable.calendar,</div><div class="line">            R.drawable.<span class="built_in">camera</span>,R.drawable.clock,R.drawable.games_control,</div><div class="line">            R.drawable.messenger,R.drawable.ringtone,R.drawable.settings,</div><div class="line">            R.drawable.speech_balloon,R.drawable.weather,R.drawable.world,</div><div class="line">            R.drawable.youtube</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//图标icon名称数组</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span>[]iconsName =&#123;</div><div class="line">            <span class="string">"通讯录"</span>,<span class="string">"日历"</span>,<span class="string">"照相机"</span>,<span class="string">"时钟"</span>,<span class="string">"游戏"</span>,</div><div class="line">            <span class="string">"短信"</span>,<span class="string">"铃声"</span>,<span class="string">"设置"</span>,<span class="string">"语音"</span>,<span class="string">"天气"</span>,<span class="string">"浏览器"</span>,</div><div class="line">            <span class="string">"视频"</span></div><div class="line">    &#125;;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//使用GridView的四个步骤</span></div><div class="line">        <span class="comment">//1、初始化GridView视图对象</span></div><div class="line">        gv = (GridView) findViewById(R.id.gv);</div><div class="line">        </div><div class="line">        <span class="comment">//2、新建适配器</span></div><div class="line">        <span class="comment">//3、创建数据源dataList并添加到适配器</span></div><div class="line">        dataList = <span class="keyword">new</span> ArrayList&lt;Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;&gt;();</div><div class="line">        simAda = <span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>,getData(),R.layout.item,<span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"img"</span>,<span class="string">"txt"</span>&#125;,<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;R.id.img,R.id.txt&#125;);</div><div class="line">        </div><div class="line">        <span class="comment">//4、为GridView视图加载适配器</span></div><div class="line">        gv.setAdapter(simAda);</div><div class="line">        <span class="comment">//5、为GridView配置事件监听器——OnItemClickListener</span></div><div class="line">        gv.setOnItemClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//3、创建数据源dataList</span></div><div class="line">    <span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;&gt; getData() &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;icons.length;i++)&#123;</div><div class="line">            Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;<span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;();</div><div class="line">            <span class="built_in">map</span>.put(<span class="string">"img"</span>, icons[i]);</div><div class="line">            <span class="built_in">map</span>.put(<span class="string">"txt"</span>,iconsName[i]);</div><div class="line">            dataList.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dataList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//通过接口实现监听器</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onItemClick(AdapterView&lt;?&gt; arg0, View arg1, <span class="built_in">int</span> position, <span class="keyword">long</span> arg3) &#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>,<span class="string">"我是"</span>+iconsName[position],Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用GridView视图时，需要2个布局文件"><a href="#使用GridView视图时，需要2个布局文件" class="headerlink" title="使用GridView视图时，需要2个布局文件"></a>使用GridView视图时，需要2个布局文件</h3><p>一个布局GridView控件，另一个布局GridView内组件<br>在布局GridView控件时，需要用到的属性如下：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">LinearLayout</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">GridView</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/gv"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">        &lt;!<span class="attr">--</span>每一行显示多少列<span class="attr">--</span>&gt;</div><div class="line">        android:numColumns="3"</div><div class="line">        <span class="comment">&lt;!--两列之间的间距--&gt;</span></div><div class="line">        android:horizontalSpacing="10dp"</div><div class="line">        <span class="comment">&lt;!--两行之间的间距--&gt;</span></div><div class="line">        android:verticalSpacing="10dp"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">GridView</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>另一个布局GridView内组件的XML文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/img"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/txt"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"android"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Spinner"><a href="#Spinner" class="headerlink" title="Spinner"></a>Spinner</h2><p>使用Spinner实现下拉列表的功能</p>
<h3 id="使用Spinner的六个步骤"><a href="#使用Spinner的六个步骤" class="headerlink" title="使用Spinner的六个步骤"></a>使用Spinner的六个步骤</h3><pre><code>1、初始化Spinner视图对象
2、创建数据源
3、新建适配器，添加数据源
4、为适配器设置下拉列表下拉时的菜单样式
5、为Spinner加载适配器
6、为Spinner配置事件监听器——OnItemSelectedListener
</code></pre><h3 id="使用Spinner示例代码"><a href="#使用Spinner示例代码" class="headerlink" title="使用Spinner示例代码"></a>使用Spinner示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnItemSelectedListener</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> TextView tv;</div><div class="line">    <span class="keyword">private</span> Spinner sp;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt;list;</div><div class="line">    <span class="keyword">private</span> ArrayAdapter&lt;String&gt;ad;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//1、初始化Spinner视图对象</span></div><div class="line">        tv = (TextView)findViewById(R.id.tv);</div><div class="line">        tv.setText(<span class="string">"您选择的城市是：北京"</span>);</div><div class="line">        sp = (Spinner) findViewById(R.id.sp);</div><div class="line">        </div><div class="line">        <span class="comment">//2、设置数据源</span></div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        list.add(<span class="string">"北京"</span>);</div><div class="line">        list.add(<span class="string">"上海"</span>);</div><div class="line">        list.add(<span class="string">"广州"</span>);</div><div class="line">        list.add(<span class="string">"深圳"</span>);</div><div class="line">        <span class="comment">//3、新建ArrayAdapter</span></div><div class="line">        ad = <span class="keyword">new</span> ArrayAdapter(<span class="keyword">this</span>,android.R.layout.simple_spinner_item,list);</div><div class="line">        <span class="comment">//4、为适配器设置下拉列表下拉时的菜单样式</span></div><div class="line">        ad.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);</div><div class="line">        <span class="comment">//5、为Spinner加载适配器</span></div><div class="line">        sp.setAdapter(ad);</div><div class="line">        <span class="comment">//6、为Spinner配置事件监听器——OnItemSelectedListener</span></div><div class="line">        sp.setOnItemSelectedListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//6、为Spinner配置事件监听器——OnItemSelectedListener</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; arg0, View arg1, <span class="keyword">int</span> position,</span></span></div><div class="line">            <span class="keyword">long</span> arg3) &#123;</div><div class="line">        String cityName = ad.getItem(position);</div><div class="line">        <span class="comment">//或者使用如下方式获取下拉列表项</span></div><div class="line">        <span class="comment">//String cityName = list.get(position);</span></div><div class="line">        tv.setText(<span class="string">"您选择的城市是："</span>+cityName);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; arg0)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">           </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Spinner的布局文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Spinner</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/sp"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line">    </div><div class="line"> <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h2><p>ProgressBar是进度条组件，通常用于展示耗时操作完成的进度。<br>使用ProgressBar实现加载进度条效果</p>
<h3 id="定制ProgressBar显示风格"><a href="#定制ProgressBar显示风格" class="headerlink" title="定制ProgressBar显示风格"></a>定制ProgressBar显示风格</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout <span class="params">...</span>&gt;</div><div class="line">    &lt;ProgressBar</div><div class="line">        android:id=<span class="string">"@+id/pb"</span></div><div class="line">        style=<span class="string">"?android:attr/progressBarStyleLarge"</span>  <span class="comment">//大环形进度条</span></div><div class="line">        <span class="comment">//不设置style属性时，默认为中环形进度条</span></div><div class="line">        style=<span class="string">"?android:attr/progressBarStyleSmall"</span>   <span class="comment">//小环形进度条</span></div><div class="line">        style=<span class="string">"?android:attr/progressBarStyleHorizontal"</span>   <span class="comment">//水平进度条</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span> /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="ProgressBar的两个分类"><a href="#ProgressBar的两个分类" class="headerlink" title="ProgressBar的两个分类"></a>ProgressBar的两个分类</h3><p>一种是可以精确显示进度(可以显示刻度或百分比)————水平进度条<br>一种是不能精确显示进度(一直转,类似于一个过渡动画)————环形进度条</p>
<h3 id="标题栏显示ProgressBar"><a href="#标题栏显示ProgressBar" class="headerlink" title="标题栏显示ProgressBar"></a>标题栏显示ProgressBar</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//启用窗口特征，启用带进度和不带进度的进度条</span></div><div class="line">        requestWindowFeature(<span class="type">Window</span>.<span class="type">FEATURE_PROGRESS</span>);</div><div class="line">        requestWindowFeature(<span class="type">Window</span>.<span class="type">FEATURE_INDETERMINATE_PROGRESS</span>);</div><div class="line">        </div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//显示带进度的进度条;false为不显示进度条</span></div><div class="line">        setProgressBarVisibility(<span class="literal">true</span>);</div><div class="line">        <span class="comment">//设置带进度的进度条的刻度，最大刻度是一个常量值：1万</span></div><div class="line">        <span class="comment">//当设置为1万时，表示完成，进度条消失。</span></div><div class="line">        setProgress(<span class="number">600</span>);</div><div class="line">        <span class="comment">//显示不带进度的进度条;false为不显示进度条</span></div><div class="line">        setProgressBarIndeterminateVisibility(<span class="literal">true</span>);   </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ProgressBar的关键属性"><a href="#ProgressBar的关键属性" class="headerlink" title="ProgressBar的关键属性"></a>ProgressBar的关键属性</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">android:</span>secondaryProgress=<span class="string">"80"</span> <span class="comment">//缓存进度</span></div><div class="line"><span class="symbol">android:</span>progress=<span class="string">"50"</span>  <span class="comment">//播放进度</span></div><div class="line"><span class="symbol">android:</span>max=<span class="string">"100"</span>     <span class="comment">//最大进度</span></div><div class="line"><span class="comment">//设置是否精确显示，true表示不精确显示进度；false为精确显示进度</span></div><div class="line"><span class="symbol">android:</span>indeterminate=<span class="string">"true"</span></div></pre></td></tr></table></figure>
<h3 id="ProgressBar的关键方法"><a href="#ProgressBar的关键方法" class="headerlink" title="ProgressBar的关键方法"></a>ProgressBar的关键方法</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">setProgress</span><span class="params">(int)</span></span>  <span class="comment">//设置播放进度</span></div><div class="line"><span class="function"><span class="title">getProgress</span><span class="params">()</span></span>  <span class="comment">//获取播放进度</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">setSecondaryProgress</span><span class="params">(int)</span></span> <span class="comment">//设置缓存进度</span></div><div class="line"><span class="function"><span class="title">getSecondaryProgress</span><span class="params">()</span></span>  <span class="comment">//获取缓存进度</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">incrementProgressBy</span><span class="params">(int)</span></span>  <span class="comment">//增加或减少播放进度</span></div><div class="line"><span class="function"><span class="title">incrementSecondaryProgressBy</span><span class="params">(int)</span></span>  <span class="comment">//增加或减少缓存进度</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">getMax</span><span class="params">()</span></span>  <span class="comment">//获取最大进度</span></div></pre></td></tr></table></figure>
<h3 id="使用ProgressBar实现加载进度条示例代码"><a href="#使用ProgressBar实现加载进度条示例代码" class="headerlink" title="使用ProgressBar实现加载进度条示例代码"></a>使用ProgressBar实现加载进度条示例代码</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> <span class="selector-tag">implements</span> <span class="selector-tag">OnClickListener</span>&#123;</div><div class="line">    </div><div class="line">    private ProgressBar pro;</div><div class="line">    private Button add,reduce,reset;</div><div class="line">    private TextView tv;</div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line">        </div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        <span class="comment">//初始化控件</span></div><div class="line">        pro = (ProgressBar) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.hor</span>);</div><div class="line">        add = (Button)findViewById(R<span class="selector-class">.id</span><span class="selector-class">.add</span>);</div><div class="line">        reduce = (Button)findViewById(R<span class="selector-class">.id</span><span class="selector-class">.reduce</span>);</div><div class="line">        reset = (Button)findViewById(R<span class="selector-class">.id</span><span class="selector-class">.reset</span>);</div><div class="line">        tv = (TextView)findViewById(R<span class="selector-class">.id</span><span class="selector-class">.text</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//获取播放进度</span></div><div class="line">        int playProgress = pro<span class="selector-class">.getProgress</span>();</div><div class="line">        <span class="comment">//获取缓存进度</span></div><div class="line">        int cacheProgress = pro<span class="selector-class">.getSecondaryProgress</span>();</div><div class="line">        <span class="comment">//获取最大进度</span></div><div class="line">        int maxProgress = pro<span class="selector-class">.getMax</span>();</div><div class="line">        <span class="comment">//设置最初的显示文本</span></div><div class="line">        tv<span class="selector-class">.setText</span>(<span class="string">"播放进度"</span>+(int)(playProgress/(float)maxProgress*<span class="number">100</span>)+<span class="string">"% 缓存进度="</span>+(int)(cacheProgress/(float)maxProgress*<span class="number">100</span>)+<span class="string">"%"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//设置button的监听器</span></div><div class="line">        add<span class="selector-class">.setOnClickListener</span>(this);</div><div class="line">        reduce<span class="selector-class">.setOnClickListener</span>(this);</div><div class="line">        reset<span class="selector-class">.setOnClickListener</span>(this);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//在监听器中处理按钮的逻辑</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        </div><div class="line">        <span class="selector-tag">switch</span>(v.getId())&#123;</div><div class="line">            <span class="selector-tag">case</span> <span class="selector-tag">R</span><span class="selector-class">.id</span><span class="selector-class">.add</span>:&#123;</div><div class="line">                <span class="comment">//增加播放进度和缓存进度 10个刻度</span></div><div class="line">                pro<span class="selector-class">.incrementProgressBy</span>(<span class="number">10</span>);</div><div class="line">                pro<span class="selector-class">.incrementSecondaryProgressBy</span>(<span class="number">10</span>);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            case R.id.<span class="attribute">reduce</span>:&#123;</div><div class="line">                <span class="comment">//减少播放进度和缓存进度 10个刻度</span></div><div class="line">                pro<span class="selector-class">.incrementProgressBy</span>(-<span class="number">10</span>);</div><div class="line">                pro<span class="selector-class">.incrementSecondaryProgressBy</span>(-<span class="number">10</span>);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            case R.id.<span class="attribute">reset</span>:&#123;</div><div class="line">                <span class="comment">//重置进度条</span></div><div class="line">                pro<span class="selector-class">.setProgress</span>(<span class="number">50</span>);</div><div class="line">                pro<span class="selector-class">.setSecondaryProgress</span>(<span class="number">80</span>);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//设置最后的显示文本</span></div><div class="line">        tv<span class="selector-class">.setText</span>(<span class="string">"播放进度"</span>+(int)(pro.getProgress()/(float)pro.getMax()*<span class="number">100</span>)+<span class="string">"% 缓存进度="</span>+(int)(pro.getSecondaryProgress()/(float)pro.getMax()*<span class="number">100</span>)+<span class="string">"%"</span>);           </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="对话框形式的进度条ProgressDialog的使用"><a href="#对话框形式的进度条ProgressDialog的使用" class="headerlink" title="对话框形式的进度条ProgressDialog的使用"></a>对话框形式的进度条ProgressDialog的使用</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span>&#123;</div><div class="line">    </div><div class="line">    private Button btn;</div><div class="line">    private ProgressDialog pd;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//ProgressDialog的使用</span></div><div class="line">        btn = (Button)findViewById(R<span class="selector-class">.id</span><span class="selector-class">.btn</span>);</div><div class="line">        <span class="selector-tag">btn</span><span class="selector-class">.setOnClickListener</span>(new OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                </div><div class="line">                <span class="comment">//1、设置ProgressDialog界面风格</span></div><div class="line"></div><div class="line">                <span class="comment">//创建ProgressDialog对象</span></div><div class="line">                pd = new ProgressDialog(MainActivity<span class="selector-class">.this</span>);</div><div class="line">                <span class="comment">//设置显示风格——进度条的种类</span></div><div class="line">                pd<span class="selector-class">.setProgressStyle</span>(pd.STYLE_HORIZONTAL);</div><div class="line">                <span class="comment">//设置标题</span></div><div class="line">                pd<span class="selector-class">.setTitle</span>(<span class="string">"X课网"</span>);</div><div class="line">                <span class="comment">//设置对话框里的文字信息</span></div><div class="line">                pd<span class="selector-class">.setMessage</span>(<span class="string">"欢迎访问本博客"</span>);</div><div class="line">                <span class="comment">//设置标题icon</span></div><div class="line">                pd<span class="selector-class">.setIcon</span>(R.drawable.ic_launcher);</div><div class="line">                </div><div class="line">                <span class="comment">//2、设置ProgressDialog进度条信息</span></div><div class="line"></div><div class="line">                <span class="comment">//设置进度条最大刻度</span></div><div class="line">                pd<span class="selector-class">.setMax</span>(<span class="number">100</span>);</div><div class="line">                <span class="comment">//设置初始状态已经增长到的进度</span></div><div class="line">                pd<span class="selector-class">.incrementProgressBy</span>(<span class="number">50</span>);</div><div class="line">                <span class="comment">//设置进度条精确显示进度</span></div><div class="line">                pd<span class="selector-class">.setIndeterminate</span>(false);</div><div class="line">                </div><div class="line">                <span class="comment">//3、设置一个确定按钮</span></div><div class="line">                <span class="selector-tag">pd</span><span class="selector-class">.setButton</span>(DialogInterface.BUTTON_POSITIVE, <span class="string">"确定"</span>, new DialogInterface.OnClickListener() &#123;</div><div class="line">                    </div><div class="line">                    <span class="variable">@Override</span></div><div class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                        Toast<span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"欢迎大家访问本博客"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                </div><div class="line">                <span class="comment">//4、设置是否可以通过返回物理按钮退出对话框</span></div><div class="line">                <span class="selector-tag">pd</span><span class="selector-class">.setCancelable</span>(true);<span class="comment">//true表示可以</span></div><div class="line">                </div><div class="line">                <span class="comment">//5、显示ProgressDialog</span></div><div class="line">                <span class="selector-tag">pd</span><span class="selector-class">.show</span>();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义进度条样式"><a href="#自定义进度条样式" class="headerlink" title="自定义进度条样式"></a>自定义进度条样式</h3><h4 id="默认进度条样式的引用路径"><a href="#默认进度条样式的引用路径" class="headerlink" title="默认进度条样式的引用路径"></a>默认进度条样式的引用路径</h4><p>从ProgressBar的xml布局文件的style<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@android:style/Widget.ProgressBar.Horizontal"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>进入到style.xml文件的android:progressDrawable<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=<span class="string">"Widget.ProgressBar.Horizontal"</span>&gt;</div><div class="line">    &lt;item name=<span class="string">"android:progressDrawable"</span>&gt;<span class="variable">@android</span><span class="symbol">:drawable/progress_horizontal&lt;/item&gt;</span></div><div class="line">&lt;<span class="regexp">/style&gt;</span></div></pre></td></tr></table></figure></p>
<p>再进入到progress_horizontal.xml文件<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">item</span> android:<span class="built_in">id</span>=<span class="string">"@android:id/background"</span>&gt;设置进度条背景&lt;/<span class="built_in">item</span>&gt;</div><div class="line">&lt;<span class="built_in">item</span> android:<span class="built_in">id</span>=<span class="string">"@android:id/secondaryProgress"</span>&gt;设置缓存进度条&lt;/<span class="built_in">item</span>&gt;</div><div class="line">&lt;<span class="built_in">item</span> android:<span class="built_in">id</span>=<span class="string">"@android:id/progress"</span>&gt;设置播放进度条&lt;/<span class="built_in">item</span>&gt;</div></pre></td></tr></table></figure></p>
<h4 id="自定义进度条样式-1"><a href="#自定义进度条样式-1" class="headerlink" title="自定义进度条样式"></a>自定义进度条样式</h4><p>1、首先在drawable文件夹下按照progress_horizontal.xml文件的格式重新编写进度条的样式，并命名为如progress_bar.xml<br>2、修改ProgressBar的xml布局文件，覆盖默认的progressDrawable引用，指向自定义的xml进度条样式文件progress_bar.xml<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ProgressBar</div><div class="line">    style=<span class="string">"@android:style/Widget.ProgressBar.Horizontal"</span></div><div class="line">    android:progressDrawable=<span class="string">"@drawable/progress_bar"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><h3 id="通过Intent调用系统浏览器"><a href="#通过Intent调用系统浏览器" class="headerlink" title="通过Intent调用系统浏览器"></a>通过Intent调用系统浏览器</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">String</span> url = <span class="string">"http://www.baidu.com"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="type">Uri</span> uri = <span class="type">Uri</span>.parse(url);<span class="comment">//url为你要链接的地址</span></div><div class="line">        <span class="type">Intent</span> intent = <span class="keyword">new</span> <span class="type">Intent</span>(<span class="type">Intent</span>.<span class="type">ACTION_VIEW</span>,uri);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用WebView在界面中显示网页"><a href="#使用WebView在界面中显示网页" class="headerlink" title="使用WebView在界面中显示网页"></a>使用WebView在界面中显示网页</h3><p>使用WebView在界面中显示网页的八个步骤：</p>
<pre><code>1、将WebView加入到你的应用中
      要在你的应用中加入WebView，只需在xml布局文件中加入&lt;WebView&gt;元素即可
      &lt;LinearLayout ...&gt;
            &lt;WebView 
                android:id=&quot;@+id/web&quot;
                android:layout_width=&quot;match_parent&quot;
                android:layout_height=&quot;match_parent&quot;/&gt;
      &lt;/LinearLayout&gt;
2、使用WebView加载页面
      要在WebView加载页面，使用loadUrl()方法
         加载web资源：webView.loadUrl(&quot;http://www.baidu.com&quot;);
         加载本地文件：webView.loadUrl(&quot;file:///android_asset/XX.html&quot;);
             本地文件存放在assets文件夹中

         //使页面获得焦点，进行输入等操作
         webView.requestFocus();
 3、获取网络访问权限
       在WebView有效工作之前，要保证应用能访问网络，即在配置文件中配置了
       INTERNET权限。
       &lt;manifest ...&gt;
       ...
         &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;
       ...
       &lt;/manifest&gt;

4、处理页面导航
       当用户点击一个WebView中的页面链接时，通常由默认的浏览器打开并加载目标URL。
         然而，可以在WebView中覆盖这一由默认浏览器打开页面的行为————
       通过webView.setWebViewClient(new WebViewClient(){})那么链接就会在WebView中打开。

5、在WebView中使用JavaScript
        如果想在加载的WebView中的web页面上使用javascript，需要在WebView中启用javascript。
        启用Javascript通过WebView中带有的WebSettings来启用。可通过getSettings()来获取WebSettings的值，然后通过setJavaScriptEnabled()来启用Javascript

         WebView web = (WebView) findViewById(R.id.web);
         WebSettings websettings = web.getSettings();
         websettings.setJavaScriptEnabled(true);

6、网页后退与前进
       当WebView覆盖了URL加载——即第5步操作，它会自动生成历史访问记录。可以通过goBack()或
       goForward()向前或向后访问已访问过的站点

       @Override
       public boolean onKeyDown(int keyCode,KeyEvent event){
         if((keyCode == KeyEvent.KEYCODE_BACK)&amp;&amp; webView.canGoBack()){
             webView.goBack();
             return true;
         }
         return super.onKeyDown(keyCode,event);
       }


7、判断页面加载过程
         由于网页可能加载缓慢，所以需要去判断页面的加载过程，制作进度条给予
        用户良好的体验

        web.setWebChromeClient(new WebChromeClient(){

         @Override
         public void onProgressChanged(WebView view,int newProgress){
             if(newProgress == 100){
             //加载完成
             }else{
             //加载中
             }
         }
        }

8、提升访问网页的速度————WebView缓存的运用
        优先使用缓存：
         webView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        不使用缓存(默认)：
         webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
</code></pre><h3 id="使用WebView在界面中显示网页代码示例"><a href="#使用WebView在界面中显示网页代码示例" class="headerlink" title="使用WebView在界面中显示网页代码示例"></a>使用WebView在界面中显示网页代码示例</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> WebView web;</div><div class="line">    <span class="keyword">private</span> ProgressDialog dialog;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//1、初始化WebView</span></div><div class="line">        web = (WebView) findViewById(R.id.web);</div><div class="line">        </div><div class="line">        <span class="comment">//2、使用WebView加载页面</span></div><div class="line">        <span class="comment">//加载本地文件</span></div><div class="line">        <span class="comment">//web.loadUrl("file:///android_asset/demo.html");</span></div><div class="line">        <span class="comment">//加载web资源</span></div><div class="line">        web.loadUrl(<span class="string">"http://www.baidu.com"</span>);</div><div class="line">        <span class="comment">//3、在manifest.xml中配置网络访问权限</span></div><div class="line">        <span class="comment">//4、覆盖WebView默认通过系统或第三方浏览器打开页面的行为，使得网页可以在WebView中打开</span></div><div class="line"></div><div class="line">        web.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">                <span class="comment">//返回值为true: 网页在WebView中打开</span></div><div class="line">                <span class="comment">//返回值为false: 网页通过系统或第三方浏览器打开</span></div><div class="line">                </div><div class="line">                view.loadUrl(url);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//WebViewClient用于帮助WebView处理一些页面控制和请求通知</span></div><div class="line">        </div><div class="line">        <span class="comment">//5、启动支持Javascript</span></div><div class="line">        WebSettings websettings = web.getSettings();</div><div class="line">        websettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">//8、WebView加载页面优先使用缓存加载</span></div><div class="line">        websettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</div><div class="line">        <span class="comment">//7、判断页面加载进度</span></div><div class="line">        web.setWebChromeClient(<span class="keyword">new</span> WebChromeClient()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">                <span class="comment">//TODO Auto-generated method stub</span></div><div class="line">                </div><div class="line">                <span class="comment">//newProgress 反应页面加载进度的整数 1-100</span></div><div class="line">                <span class="keyword">if</span>(newProgress == <span class="number">100</span>)&#123;</div><div class="line">                    <span class="comment">//网页加载完成，关闭对话框</span></div><div class="line">                    closeDialog();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//网页正在加载中，显示对话框</span></div><div class="line">                    openDialog(newProgress);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">openDialog</span><span class="params">(<span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                <span class="keyword">if</span>(dialog==<span class="keyword">null</span>)&#123;</div><div class="line">                    dialog = <span class="keyword">new</span> ProgressDialog(MainActivity.<span class="keyword">this</span>);</div><div class="line">                    dialog.setTitle(<span class="string">"正在加载中..."</span>);</div><div class="line">                    dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</div><div class="line">                    dialog.show();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//刷新进度</span></div><div class="line">                    dialog.setProgress(newProgress);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">closeDialog</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span>(dialog!=<span class="keyword">null</span>&amp;&amp;dialog.isShowing())&#123;</div><div class="line">                    dialog.dismiss();</div><div class="line">                    dialog=<span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//6、改写物理返回按键的逻辑</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">if</span>((keyCode == KeyEvent.KEYCODE_BACK)&amp;&amp; web.canGoBack())&#123;</div><div class="line">            web.goBack();<span class="comment">//返回上一页面</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onKeyDown</span><span class="params">(keyCode, event)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、一个Manifest.xml清单文件中只能包含一个application节点。<br>   这个节点中可以包含各种组件如activity、Service、Content Provider、Broadcase Receiver。<br>2、启动一个没有在Manifest.xml清单中定义的Activity会抛出异常，程序会崩溃。<br>3、Manifest.xml中的每个组件都必须包含android:name属性，推荐其值为”包名.类名”，intent-filter(过滤器)可以选写。<br>4、Manifest.xml中的四大组件中除了BroadcastReceiver可以使用代码声明注册外，<br>其他组件必须要在Manifest.xml中进行声明配置，否则程序会报错崩溃。<br>5、DatePicker和DatePickerDialog的对象的初始化传入参数及其返回值中的月份都是从0开始的，所以在界面显示真实月份时都需要加1。<br>6、选中xml文件中的文本，用ctrl+1、双击弹出来的”Extract String”,来设置文本字符串。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下定时自动备份和删除]]></title>
      <url>https://aiolos123.github.io/2016/09/05/how-to-use-crontab-on-linux/</url>
      <content type="html"><![CDATA[<p>本文介绍一下linux下的定时任务crontab的安装和使用<br><a id="more"></a></p>
<h2 id="安装和使用crontab"><a href="#安装和使用crontab" class="headerlink" title="安装和使用crontab"></a>安装和使用crontab</h2><h3 id="安装crontab"><a href="#安装crontab" class="headerlink" title="安装crontab"></a>安装crontab</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># yum install crontabs</span></div></pre></td></tr></table></figure>
<h3 id="crontab服务常用命令"><a href="#crontab服务常用命令" class="headerlink" title="crontab服务常用命令"></a>crontab服务常用命令</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># service crond start <span class="comment">//启动服务</span></span></div><div class="line"><span class="meta"># service crond stop <span class="comment">//关闭服务</span></span></div><div class="line"><span class="meta"># service crond restart <span class="comment">//重启服务</span></span></div><div class="line"><span class="meta"># service crond reload <span class="comment">//重新载入配置</span></span></div><div class="line"><span class="meta"># service crond status  <span class="comment">//查看crontab服务状态</span></span></div><div class="line"></div><div class="line"><span class="meta"># ntsysv <span class="comment">//查看crontab服务是否已设置为开机启动</span></span></div><div class="line"></div><div class="line"><span class="meta"># chkconfig –level 35 crond on <span class="comment">//加入开机自动启动</span></span></div></pre></td></tr></table></figure>
<h2 id="查看crontab日志"><a href="#查看crontab日志" class="headerlink" title="查看crontab日志"></a>查看crontab日志</h2><p>crontab的执行日志位置一般位于/var/log/cron，利用下面的语句即可查看日志。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> /var/<span class="built_in">log</span>/cron</div></pre></td></tr></table></figure></p>
<p>上面的/var/log/cron只会记录是否执行了某些计划的脚本，但是具体执行是否正确以及脚本执行过程中的一些信息linux会通过邮件形式发送到给该用户。<br>对于root用户该邮件记录位于/var/spool/mail/root，通过以下命令可以查看最近的crontab执行情况。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f <span class="regexp">/var/</span>spool<span class="regexp">/mail/</span>root</div></pre></td></tr></table></figure></p>
<p>mail邮件一般只会记录脚本执行成功与否，如果执行失败，无法给出进一步的错误信息，这时需要我们将语句执行的错误信息重定向至文件中，这样可以很方便的查看错误信息。下面就给出了一个简单的例子<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">6</span> * * * /root/script/ss.sh &gt;&gt; /root/crontab/mylog.<span class="keyword">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>上述语句表示把错误输出和标准输出都输出到mylog.log中，<br>在执行的时候会将命令执行的相关信息记录至mylog.log文件中。</p>
<h2 id="linux下定时自动备份oracle数据库"><a href="#linux下定时自动备份oracle数据库" class="headerlink" title="linux下定时自动备份oracle数据库"></a>linux下定时自动备份oracle数据库</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># mkdir -p /home/expdp  #以root用户新建Oracle数据库备份目录</span></div><div class="line"><span class="meta"># chown -R  oracle:oinstall /home/expdp -R  #设置目录权限为oinstall用户组的oracle用户（用户oracle与用户组oinstall是在安装Oracle数据库时设置的）</span></div></pre></td></tr></table></figure>
<p>新建备份脚本文件<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># vi /home/expdp/ordbak.sh</span></div></pre></td></tr></table></figure></p>
<p>输入以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">export</span> ORACLE_BASE=/home/oracle</div><div class="line"><span class="built_in">export</span> ORACLE_HOME=<span class="variable">$ORACLE_BASE</span>/112</div><div class="line"><span class="built_in">export</span> ORACLE_SID=orcl</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ORACLE_HOME</span>/bin:<span class="variable">$HOME</span>/bin</div><div class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$ORACLE_HOME</span>/lib:/lib:/usr/lib</div><div class="line"><span class="built_in">export</span> NLS_LANG=’Simplified Chinese_CHINA.AL32UTF8’</div><div class="line"><span class="comment">#以上代码为Oracle数据库运行账号oracle的系统环境变量设置，必须添加，否则crontab任务计划不能执行</span></div><div class="line">date=`date +%Y_%m_%d`   <span class="comment">#获取系统当前日期时间</span></div><div class="line">days=7  <span class="comment">#设置删除7天之前的备份文件</span></div><div class="line">orsid=`127.0.0.0:1521/orcl`  <span class="comment">#Oracle数据库服务器IP、端口、SID</span></div><div class="line"><span class="comment">#orsid=`orcl`</span></div><div class="line"><span class="comment">#备份user数据库</span></div><div class="line">orowner=user  <span class="comment">#备份此用户下面的数据</span></div><div class="line">bakuser=user  <span class="comment">#用此用户来执行备份，必须要有备份操作的权限</span></div><div class="line">bakpass=<span class="built_in">pwd</span>  <span class="comment">#执行备注的用户密码</span></div><div class="line">bakdir=/home/expdp/  <span class="comment">#备份文件路径，需要提前创建好</span></div><div class="line">bakdata=<span class="variable">$orowner</span><span class="variable">$date</span>.dmp <span class="comment">#备份数据库名称</span></div><div class="line">baklog=<span class="variable">$orowner</span><span class="variable">$date</span>.log <span class="comment">#备份执行时候生成的日志文件名称</span></div><div class="line">ordatabak=<span class="variable">$orowner</span><span class="variable">$date</span>.tar.gz <span class="comment">#最后保存的Oracle数据库备份文件</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$bakdir</span> <span class="comment">#进入备份目录</span></div><div class="line"><span class="comment">#mkdir -p $orowner #按需要备份的Oracle用户创建目录</span></div><div class="line"><span class="comment">#cd $orowner #进入目录</span></div><div class="line">expdp <span class="variable">$bakuser</span>/<span class="variable">$bakpass</span>@<span class="variable">$orsid</span> schemas=<span class="variable">$bakuser</span> dumpfile=<span class="variable">$bakdata</span> directory=expdp_dir logfile=<span class="variable">$baklog</span> <span class="comment">#执行备份</span></div><div class="line">tar -zcvf <span class="variable">$ordatabak</span> <span class="variable">$bakdata</span>  <span class="variable">$baklog</span>  <span class="comment">#压缩备份文件和日志文件</span></div><div class="line"> <span class="comment">#删除备份文件</span></div><div class="line">find <span class="variable">$bakdir</span>  -type f -name <span class="variable">$baklog</span> -exec rm &#123;&#125; \;</div><div class="line"><span class="comment">#删除日志文件</span></div><div class="line">find <span class="variable">$bakdir</span>  -type f -name <span class="variable">$bakdata</span> -exec rm &#123;&#125; \; </div><div class="line"><span class="comment">#删除7天前的备份（注意：&#123;&#125; \中间有空格）</span></div><div class="line">find <span class="variable">$bakdir</span>  -type f -name <span class="string">"<span class="variable">$orowner</span><span class="variable">$date</span>.tar.gz"</span> -mtime +<span class="variable">$days</span> -exec rm -rf &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>:wq! #保存退出<br>为ordbak.sh脚本添加执行权限<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># chmod +x <span class="regexp">/home/</span>oracle<span class="regexp">/expdp_dir/</span>ordatabak.sh</div></pre></td></tr></table></figure></p>
<p>编辑任务计划<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#crontab</span> -e</div></pre></td></tr></table></figure></p>
<p>将下列代码加止末尾<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#每天凌晨<span class="number">2</span>点<span class="number">45</span>分，以oracle用户执行ordbak.sh备份文件</div><div class="line"><span class="number">45</span> <span class="number">2</span> * * * oracle  /home/expdp/ordbak.sh  &gt;&gt; /home/expdp/crontablog.log <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>:wq! #保存退出<br>通过如下命令查看定时任务执行情况<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># tail -f /<span class="built_in">var</span>/<span class="built_in">log</span>/cron</div></pre></td></tr></table></figure></p>
<h2 id="linux下定时自动删除"><a href="#linux下定时自动删除" class="headerlink" title="linux下定时自动删除"></a>linux下定时自动删除</h2><h3 id="删除文件命令"><a href="#删除文件命令" class="headerlink" title="删除文件命令"></a>删除文件命令</h3><p>引用自：<a href="http://www.cnblogs.com/peida/archive/2013/03/25/2980121.html" target="_blank" rel="external">http://www.cnblogs.com/peida/archive/2013/03/25/2980121.html</a><br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">find</span> 对应目录 -mtime +天数 -<span class="built_in">name</span> <span class="string">"文件名"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>实例命令：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">find</span> /opt/soft/<span class="built_in">log</span>/ -mtime +<span class="number">30</span> -<span class="built_in">name</span> <span class="string">"*.log"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>本例实现了将/opt/soft/log/目录下所有30天前带”.log”的文件删除。具体参数说明如下：</p>
<pre><code>find：linux的查找命令，用户查找指定条件的文件；
/opt/soft/log/：想要进行清理的任意目录；
-mtime：标准语句写法；
+30：查找30天前的文件，这里用数字代表天数；
&quot;*.log&quot;：希望查找的数据类型，&quot;*.jpg&quot;表示查找扩展名为jpg的所有文件，&quot;*&quot;表示查找所有文件，这个可以灵活运用，举一反三；
-exec：固定写法；
rm -rf：强制删除文件，包括目录；
{} \; ：固定写法，一对大括号+空格+\+; 
</code></pre><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>若嫌每次手动执行语句太麻烦，可以将这小语句写到一个可执行shell脚本文件中，再设置cron调度执行，那就可以让系统自动去清理相关文件。</p>
<h4 id="创建shell文件"><a href="#创建shell文件" class="headerlink" title="创建shell文件"></a>创建shell文件</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">touch /<span class="keyword">opt</span>/soft/bin/auto-del-<span class="number">30</span>-days-ago-<span class="built_in">log</span>.<span class="keyword">sh</span></div><div class="line">chmod +<span class="keyword">x</span> auto-del-<span class="number">30</span>-days-ago-<span class="built_in">log</span>.<span class="keyword">sh</span></div></pre></td></tr></table></figure>
<p>新建一个可执行文件auto-del-30-days-ago-log.sh，并分配可运行权限</p>
<h4 id="编辑shell脚本"><a href="#编辑shell脚本" class="headerlink" title="编辑shell脚本"></a>编辑shell脚本</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="keyword">vi</span> auto-del-<span class="number">30</span>-days-ago-<span class="built_in">log</span>.<span class="keyword">sh</span></div></pre></td></tr></table></figure>
<p>编辑auto-del-30-days-ago-log.sh文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">find /opt/soft/<span class="built_in">log</span>/ -mtime +30 -name <span class="string">"*.log"</span> -exec rm -rf &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>ok，保存退出(:wq)。</p>
<h4 id="执行计划任务"><a href="#执行计划任务" class="headerlink" title="执行计划任务"></a>执行计划任务</h4><p>crontab -l   //列出所有定时任务<br>crontab -e   //编辑定时任务,如果不存在,则创建一个新的crontab文件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#crontab</span> -e</div></pre></td></tr></table></figure></p>
<p>将auto-del-30-days-ago-log.sh执行脚本加入到系统计划任务，到点自动执行<br>输入：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">10 </span><span class="number">0</span> * * * /opt/soft/<span class="keyword">log</span>/<span class="keyword">auto</span>-del-<span class="number">7</span>-days-ago-<span class="keyword">log</span>.sh &gt;/home/del.<span class="keyword">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>这里的设置是每天凌晨0点10分执行auto-del-7-days-ago-log.sh文件进行数据清理任务了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[liunx常用命令]]></title>
      <url>https://aiolos123.github.io/2016/08/24/liunx-common-commands/</url>
      <content type="html"><![CDATA[<p>本文记录一些本人常用的liunx命令，其中有些内容是引用自其他博客。本文将持续更新中…<br><a id="more"></a></p>
<h2 id="查看与及关闭SELinux"><a href="#查看与及关闭SELinux" class="headerlink" title="查看与及关闭SELinux"></a>查看与及关闭SELinux</h2><h3 id="查看SELinux状态"><a href="#查看SELinux状态" class="headerlink" title="查看SELinux状态"></a>查看SELinux状态</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#如果SELinux status参数为enabled即为开启状态</span></div><div class="line"><span class="meta"># /usr/sbin/sestatus -v</span></div></pre></td></tr></table></figure>
<h3 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h3><p>修改配置文件并重启机器后生效</p>
<pre><code>修改/etc/selinux/config文件
将SELINUX=enforcing改为SELINUX=disabled
重启机器即可
</code></pre><h2 id="查看与开关linux防火墙"><a href="#查看与开关linux防火墙" class="headerlink" title="查看与开关linux防火墙"></a>查看与开关linux防火墙</h2><p>注意：对于Linux下的其它服务都可以用以下命令执行开启和关闭操作。</p>
<h3 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># service iptables status</span></div></pre></td></tr></table></figure>
<h3 id="永久开关防火墙"><a href="#永久开关防火墙" class="headerlink" title="永久开关防火墙"></a>永久开关防火墙</h3><p>设置后需要重启服务器，重启后生效<br>永久开启防火墙命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chkconfig iptables on</span></div></pre></td></tr></table></figure></p>
<p>永久关闭防火墙命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chkconfig iptables off</span></div></pre></td></tr></table></figure></p>
<h3 id="临时开关防火墙"><a href="#临时开关防火墙" class="headerlink" title="临时开关防火墙"></a>临时开关防火墙</h3><p>重启后失效<br>临时开启防火墙命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># service iptables start</span></div></pre></td></tr></table></figure></p>
<p>临时关闭防火墙命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># service iptables stop</span></div></pre></td></tr></table></figure></p>
<h3 id="在开启了防火墙时，做如下设置，开启相关端口"><a href="#在开启了防火墙时，做如下设置，开启相关端口" class="headerlink" title="在开启了防火墙时，做如下设置，开启相关端口"></a>在开启了防火墙时，做如下设置，开启相关端口</h3><p>修改/etc/sysconfig/iptables 文件，添加以下内容：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//开启80端口</span></div><div class="line">-A RH-Firewall<span class="number">-1</span>-INPUT -m <span class="section">state</span> --<span class="section">state</span> NEW -m tcp -p tcp --dport <span class="number">80</span> -j ACCEPT </div><div class="line"><span class="comment">//开启22端口</span></div><div class="line">-A RH-Firewall<span class="number">-1</span>-INPUT -m <span class="section">state</span> --<span class="section">state</span> NEW -m tcp -p tcp --dport <span class="number">22</span> -j ACCEPT</div></pre></td></tr></table></figure></p>
<h2 id="telent命令"><a href="#telent命令" class="headerlink" title="telent命令"></a>telent命令</h2><p>telnet用于测试某个端口是否开通。<br>格式为： telnet ip 端口号<br>输入命令后，如果出现SSH-1.99…的信息，说明端口已开通；否则端口未开通，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/1.jpg" alt="telent命令"></p>
<h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>tail命令设计用于显示文本文件的最后几行</p>
<pre><code>1．命令格式;
    tail[必要参数][选择参数][文件]   
2．命令功能：
    用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。
3．命令参数：
    -f 当日志增加新的内容时，tail将继续显示新的输出。
    -q 不显示处理信息
    -v 显示详细的处理信息
    -c&lt;数目&gt; 显示的字节数
    -n&lt;行数&gt; 显示行数
    --pid=PID 与-f合用,表示在进程ID,PID死掉之后结束. 
    -q, --quiet, --silent 从不输出给出文件名的首部 
    -s, --sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒 
</code></pre><p>使用实例<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># tail -<span class="keyword">n</span> 5 log2014.<span class="keyword">log</span> <span class="comment">//显示文件最后5行内容</span></div><div class="line"># tail -f <span class="keyword">test</span>.<span class="keyword">log</span> <span class="comment">//持续显示文件最新内容</span></div></pre></td></tr></table></figure></p>
<h2 id="查看是否安装apache及其版本"><a href="#查看是否安装apache及其版本" class="headerlink" title="查看是否安装apache及其版本"></a>查看是否安装apache及其版本</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># rpm -qa | grep -i http</span></div><div class="line"><span class="comment">//或者</span></div><div class="line"><span class="meta"># apachectl -v  </span></div><div class="line"><span class="comment">//或者</span></div><div class="line"><span class="meta"># httpd -v</span></div><div class="line"><span class="comment">//或者</span></div><div class="line">./httpd -v apache版本（必须转到apache的bin目录下运行）</div></pre></td></tr></table></figure>
<h2 id="linux下查看apache进程"><a href="#linux下查看apache进程" class="headerlink" title="linux下查看apache进程"></a>linux下查看apache进程</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ps</span> -aux | <span class="keyword">grep</span> httpd</div></pre></td></tr></table></figure>
<h2 id="查看linux80端口是否开启"><a href="#查看linux80端口是否开启" class="headerlink" title="查看linux80端口是否开启"></a>查看linux80端口是否开启</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -an <span class="string">| grep :80</span></div></pre></td></tr></table></figure>
<h2 id="两台服务器之间的文件复制"><a href="#两台服务器之间的文件复制" class="headerlink" title="两台服务器之间的文件复制"></a>两台服务器之间的文件复制</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>将远程服务器上<span class="regexp">/home/</span>root<span class="regexp">/目录下的文件夹bmw复制到本地服务器的/</span>home<span class="regexp">/daisy/</span>目录下</div><div class="line"><span class="comment"># scp -r root@10.28.11.5:/home/root/bmw  /home/daisy/</span></div><div class="line"><span class="regexp">//</span>将本地<span class="regexp">/home/</span>www目录下的文件夹bmw复制到远程服务器<span class="number">10.28</span>.<span class="number">11.5</span>的<span class="regexp">/home/</span>www目录下</div><div class="line"><span class="comment"># scp -r  /home/www/bmw  root@10.28.11.5:/home/www/</span></div></pre></td></tr></table></figure>
<h2 id="通过netstat查看端口状态"><a href="#通过netstat查看端口状态" class="headerlink" title="通过netstat查看端口状态"></a>通过netstat查看端口状态</h2><p>原文地址：<a href="http://jingyan.baidu.com/article/59703552c2fd838fc1074046.html" target="_blank" rel="external">http://jingyan.baidu.com/article/59703552c2fd838fc1074046.html</a></p>
<p>在Linux使用过程中，可以通过netstat命令查询系统开放了哪些端口，并且可以查看开放这些端口的具体进程和用户。</p>
<p>netstat命令各个参数说明如下：</p>
<pre><code>　　-t : 指明显示TCP端口
　　-u : 指明显示UDP端口
　　-l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)
　　-p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。
　　-n : 不进行DNS轮询，显示IP(可以加速操作)
</code></pre><p>使用方法</p>
<p>使用netstat -ntlp即可显示当前服务器上所有端口及进程服务，<br>结合grep可查看某个具体端口及服务情况。</p>
<p>如下例</p>
<pre><code>netstat -ntlp   //查看当前服务器上所有tcp端口及进程服务·
netstat -ntulp|grep 80   //查看所有80端口使用情况·
netstat -an|grep 3306   //查看所有3306端口使用情况·
</code></pre><p>例如要查看当前Mysql默认端口3306是否启动可以输入命令<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># netstat -ntlp</span></div><div class="line"><span class="comment">//或者</span></div><div class="line"><span class="meta"># netstat -an|grep 3306</span></div></pre></td></tr></table></figure></p>
<p>如果出现下图，则说明端口已经启动<br><img src="http://ocej2soxx.bkt.clouddn.com/%E7%AB%AF%E5%8F%A3.jpg" alt="查看3306端口是否启动"></p>
<h2 id="yum用法"><a href="#yum用法" class="headerlink" title="yum用法"></a>yum用法</h2><h3 id="yum配置"><a href="#yum配置" class="headerlink" title="yum配置"></a>yum配置</h3><p>请参考：<a href="http://jingyan.baidu.com/article/ed2a5d1f5a9fbe09f6be17ea.html" target="_blank" rel="external">http://jingyan.baidu.com/article/ed2a5d1f5a9fbe09f6be17ea.html</a></p>
<h3 id="yum常用命令"><a href="#yum常用命令" class="headerlink" title="yum常用命令"></a>yum常用命令</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># yum search software_name  <span class="comment">//搜索软件</span></span></div><div class="line"><span class="meta"># yum install  software_name <span class="comment">//安装软件</span></span></div><div class="line"><span class="meta"># yum list  software_name  <span class="comment">//列出已装软件</span></span></div><div class="line"><span class="meta"># yum remove  software_name  <span class="comment">//卸载软件</span></span></div></pre></td></tr></table></figure>
<h3 id="yum安装出错-Error-Protected-multilib-versions"><a href="#yum安装出错-Error-Protected-multilib-versions" class="headerlink" title="yum安装出错 Error: Protected multilib versions"></a>yum安装出错 Error: Protected multilib versions</h3><p>yum 安装zlib出错<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># yum install zlib-1.2.3-29.el6.i686</span></div><div class="line"></div><div class="line">    <span class="keyword">Error</span>: <span class="keyword">Protected</span> multilib versions: zlib<span class="number">-1.2</span><span class="number">.3</span><span class="number">-29.</span>el6.i686 != zlib<span class="number">-1.2</span><span class="number">.3</span><span class="number">-27.</span>el6.x86_64</div><div class="line">    You could <span class="keyword">try</span> <span class="keyword">using</span> --<span class="keyword">skip</span>-broken <span class="keyword">to</span> work around the problem</div><div class="line">    You could <span class="keyword">try</span> running: rpm -Va --nofiles --nodigest</div></pre></td></tr></table></figure></p>
<p><strong>原因：多个库共存冲突</strong></p>
<p>解决办法：在执行命令后面加上：–setopt=protected_multilib=false </p>
<p>再次执行：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install zlib<span class="number">-1.2</span><span class="number">.3</span><span class="number">-29.</span>el6.i686  --setopt=protected_multilib=false</div></pre></td></tr></table></figure></p>
<p>成功！<br>原文地址：<a href="http://blog.csdn.net/qianlong4526888/article/details/9497165" target="_blank" rel="external">http://blog.csdn.net/qianlong4526888/article/details/9497165</a></p>
<p>以下摘录自： <a href="http://mushme.iteye.com/blog/1001478" target="_blank" rel="external">http://mushme.iteye.com/blog/1001478</a></p>
<h2 id="查看linux日志"><a href="#查看linux日志" class="headerlink" title="查看linux日志"></a>查看linux日志</h2><pre><code>日志文件说明：
/var/log/message    系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一 
/var/log/secure 与安全相关的日志信息 
/var/log/maillog    该日志文件记录了每一个发送到系统或从系统发出的电子邮件的活动。它可以用来查看用户使用哪个系统发送工具或把数据发送到哪个系统。 
/var/log/cron   该日志文件记录crontab守护进程crond所派生的子进程的动作，前面加上用户、登录时间和PID，以及派生出的进程的动作。 
/var/log/spooler    与UUCP和news设备相关的日志信息 
/var/log/boot.log   该文件记录了系统在引导过程中发生的事件，就是Linux系统开机自检过程显示的信息 
</code></pre><h2 id="查看linux系统信息"><a href="#查看linux系统信息" class="headerlink" title="查看linux系统信息"></a>查看linux系统信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># uname -a   # 查看内核/操作系统/CPU信息 </span></div><div class="line"><span class="meta"># cat /etc/issue </span></div><div class="line"><span class="meta"># cat /etc/redhat-release # 查看操作系统版本 </span></div><div class="line"><span class="meta"># cat /proc/cpuinfo  # 查看CPU信息 </span></div><div class="line"><span class="meta"># hostname   # 查看计算机名 </span></div><div class="line"><span class="meta"># lspci -tv   # 列出所有PCI设备 </span></div><div class="line"><span class="meta"># lsusb -tv   # 列出所有USB设备 </span></div><div class="line"><span class="meta"># lsmod    # 列出加载的内核模块 </span></div><div class="line"><span class="meta"># env    # 查看环境变量</span></div><div class="line"><span class="meta"># lsb_release -a  #查看linux版本，这个命令适用于所有的linux，包括Redhat、SuSE、Debian、Centos等发行版</span></div></pre></td></tr></table></figure>
<h2 id="查看linux资源信息"><a href="#查看linux资源信息" class="headerlink" title="查看linux资源信息"></a>查看linux资源信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># free -m   # 查看内存使用量和交换区使用量 </span></div><div class="line"><span class="meta"># df -h    # 查看各分区使用情况 </span></div><div class="line"><span class="meta"># du -sh &lt;目录名&gt;  # 查看指定目录的大小 </span></div><div class="line"><span class="meta"># grep MemTotal /proc/meminfo # 查看内存总量 </span></div><div class="line"><span class="meta"># grep MemFree /proc/meminfo # 查看空闲内存量 </span></div><div class="line"><span class="meta"># uptime   # 查看系统运行时间、用户数、负载 </span></div><div class="line"><span class="meta"># cat /proc/loadavg  # 查看系统负载</span></div></pre></td></tr></table></figure>
<h2 id="查看linux磁盘和分区信息"><a href="#查看linux磁盘和分区信息" class="headerlink" title="查看linux磁盘和分区信息"></a>查看linux磁盘和分区信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># mount | column -t  # 查看挂接的分区状态 </span></div><div class="line"><span class="meta"># fdisk -l   # 查看所有分区 </span></div><div class="line"><span class="meta"># swapon -s   # 查看所有交换分区 </span></div><div class="line"><span class="meta"># hdparm -i /dev/hda  # 查看磁盘参数(仅适用于IDE设备) </span></div><div class="line"><span class="meta"># dmesg | grep IDE  # 查看启动时IDE设备检测状况</span></div></pre></td></tr></table></figure>
<h2 id="查看linux网络信息"><a href="#查看linux网络信息" class="headerlink" title="查看linux网络信息"></a>查看linux网络信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ifconfig   # 查看所有网络接口的属性 </span></div><div class="line"><span class="meta"># iptables -L   # 查看防火墙设置 </span></div><div class="line"><span class="meta"># route -n   # 查看路由表 </span></div><div class="line"><span class="meta"># netstat -lntp   # 查看所有监听端口 </span></div><div class="line"><span class="meta"># netstat -antp   # 查看所有已经建立的连接 </span></div><div class="line"><span class="meta"># netstat -s   # 查看网络统计信息</span></div></pre></td></tr></table></figure>
<h2 id="查看linux进程信息"><a href="#查看linux进程信息" class="headerlink" title="查看linux进程信息"></a>查看linux进程信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ps -ef   # 查看所有进程 </span></div><div class="line"><span class="meta"># top    # 实时显示进程状态</span></div><div class="line"><span class="meta"># ps -ef|grep 进程名 #查看特定进程</span></div></pre></td></tr></table></figure>
<h2 id="查看linux用户信息"><a href="#查看linux用户信息" class="headerlink" title="查看linux用户信息"></a>查看linux用户信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># w    # 查看活动用户 </span></div><div class="line"><span class="meta"># id &lt;用户名&gt;   # 查看指定用户信息 </span></div><div class="line"><span class="meta"># last    # 查看用户登录日志 </span></div><div class="line"><span class="meta"># cut -d: -f1 /etc/passwd # 查看系统所有用户 </span></div><div class="line"><span class="meta"># cut -d: -f1 /etc/group # 查看系统所有组 </span></div><div class="line"><span class="meta"># crontab -l   # 查看当前用户的计划任务</span></div></pre></td></tr></table></figure>
<h2 id="查看linux服务信息"><a href="#查看linux服务信息" class="headerlink" title="查看linux服务信息"></a>查看linux服务信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chkconfig –list  # 列出所有系统服务 </span></div><div class="line"><span class="meta"># chkconfig –list | grep on # 列出所有启动的系统服务</span></div></pre></td></tr></table></figure>
<h2 id="查看linux程序信息"><a href="#查看linux程序信息" class="headerlink" title="查看linux程序信息"></a>查看linux程序信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># rpm -qa   # 查看所有安装的软件包</span></div></pre></td></tr></table></figure>
<h2 id="查看linux下目录大小"><a href="#查看linux下目录大小" class="headerlink" title="查看linux下目录大小"></a>查看linux下目录大小</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">du -sh : 查看当前目录总共占的容量。而不单独列出各子项占用的容量</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android入门一]]></title>
      <url>https://aiolos123.github.io/2016/08/23/learn-android-step-by-step-one/</url>
      <content type="html"><![CDATA[<p>本文为android入门的第一课，学习了android基础控件、布局、Activity组件的相关知识。<br>学习来源：<a href="http://www.imooc.com/learn/96" target="_blank" rel="external">http://www.imooc.com/learn/96</a><br><a id="more"></a></p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre><code>src：程序源文件
res：资源文件。都会在R.java中自动生成id
assets：资源文件。不会在R.java中生成id
</code></pre><h2 id="自定义Activity类的基本结构"><a href="#自定义Activity类的基本结构" class="headerlink" title="自定义Activity类的基本结构"></a>自定义Activity类的基本结构</h2><p>自动生成的自定义Activity类的基本结构是不对的，需要改为如下结构<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//三、需要导入的包为如下2个</span></div><div class="line"><span class="keyword">import</span> android.app.<span class="type">Activity</span>;</div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"></div><div class="line"><span class="comment">//一、自定义Activity类必须继承自Activity</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//二、重写onCreate方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        </div><div class="line">        <span class="comment">//coding...</span></div><div class="line">          </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><table>
<thead>
<tr>
<th style="text-align:center">Android控件</th>
<th style="text-align:center">控件的作用</th>
<th style="text-align:center">HTML中与之功能相似的标签</th>
<th style="text-align:left">控件属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TextView</td>
<td style="text-align:center">显示文本</td>
<td style="text-align:center">label</td>
<td style="text-align:left">android:id/android:layout_width<br>android:layout_height/android:text<br>android:textSize/android:textColor<br>android:background</td>
</tr>
<tr>
<td style="text-align:center">EditText</td>
<td style="text-align:center">输入文本</td>
<td style="text-align:center">input</td>
<td style="text-align:left">TextView属性+android:hint/android:inputType</td>
</tr>
<tr>
<td style="text-align:center">ImageView</td>
<td style="text-align:center">显示图片</td>
<td style="text-align:center">img</td>
<td style="text-align:left">TextView属性+android:src=”@drawable/ic_launcher” #ImageView的图片内容<br> android:background=”@drawable/ic_launcher” #ImageView的背景图片</td>
</tr>
<tr>
<td style="text-align:center">Button</td>
<td style="text-align:center">按钮</td>
<td style="text-align:center">button</td>
<td style="text-align:left">TextView属性</td>
</tr>
<tr>
<td style="text-align:center">ImageButton</td>
<td style="text-align:center">图片按钮</td>
<td style="text-align:center">button</td>
<td style="text-align:left">TextView属性+android:src</td>
</tr>
<tr>
<td style="text-align:center">AutoCompleteTextView</td>
<td style="text-align:center">动态匹配输入内容，只能选择一个值。如搜索的下拉提示框</td>
<td style="text-align:center">无</td>
<td style="text-align:left">TextView属性+android:completionThreshold=2<br></td>
</tr>
<tr>
<td style="text-align:center">MultiAutoCompleteTextView</td>
<td style="text-align:center">支持多次输入、选择多个值，以分隔符分开。如邮件的收件人框</td>
<td style="text-align:center">无</td>
<td style="text-align:left">同AutoCompleteTextView</td>
</tr>
<tr>
<td style="text-align:center">ToggleButton</td>
<td style="text-align:center">类似于开关，有选中和未选中两种状态，并且在不同状态可设置显示不同文本</td>
<td style="text-align:center">无</td>
<td style="text-align:left">android:checked #是否被选中<br>android:textOff #未选中状态下显示的文本 <br>android:textOn #选中状态下显示的文本</td>
</tr>
<tr>
<td style="text-align:center">CheckBox</td>
<td style="text-align:center">复选框，有选中和取消两种状态。可实现多选多</td>
<td style="text-align:center">input[type=checkbox]</td>
<td style="text-align:left">TextView属性+android:checked #是否被选中</td>
</tr>
<tr>
<td style="text-align:center">RadioButton</td>
<td style="text-align:center">单选框。RadioButton一旦选中，无法取消，所以不建议单独使用，一般都是与RadioGroup配合使用；</td>
<td style="text-align:center">一个input[type=radio]</td>
<td style="text-align:left">TextView属性+android:checked #是否被选中</td>
</tr>
<tr>
<td style="text-align:center">RadioGroup</td>
<td style="text-align:center">RadioGroup是RadioButton的一个集合，提供多选一机制</td>
<td style="text-align:center">多个input[type=radio]</td>
<td style="text-align:left">TextView属性+<br>android:orientation: #设置其中radioButton的排布方式——vertical/horizontal</td>
</tr>
</tbody>
</table>
<h3 id="常见控件的属性值"><a href="#常见控件的属性值" class="headerlink" title="常见控件的属性值"></a>常见控件的属性值</h3><pre><code>wrap_content: 实际内容的宽高
match_parent: 铺满父类容器
fill_parent:  铺满父类容器     
</code></pre><p>   match_parent与fill_parent的异同：</p>
<pre><code>match_parent与fill_parent完全相同;
只是match_parent是2.3API之后引入的属性值;
而fill_parent是2.3之前引入的一个属性值。
</code></pre><h3 id="实现事件监听的三个步骤"><a href="#实现事件监听的三个步骤" class="headerlink" title="实现事件监听的三个步骤"></a>实现事件监听的三个步骤</h3><pre><code>1、初始化对象  ————  findViewById()
2、为对象绑定事件监听器  ———— setOnClickListener(listener)
3、在监听器内部实现事件处理(即定义事件发生后的处理动作)   ———— listener
</code></pre><h4 id="在监听器内部实现事件处理的三种方式"><a href="#在监听器内部实现事件处理的三种方式" class="headerlink" title="在监听器内部实现事件处理的三种方式"></a>在监听器内部实现事件处理的三种方式</h4><h5 id="a、通过匿名内部类来实现"><a href="#a、通过匿名内部类来实现" class="headerlink" title="a、通过匿名内部类来实现"></a>a、通过匿名内部类来实现</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//匿名内部类来实现</span></div><div class="line">        loginBtn.setOnClickListener(<span class="keyword">new</span> <span class="type">OnClickListener</span>() &#123;     </div><div class="line">             <span class="meta">@Override</span></div><div class="line">             public void onClick(<span class="type">View</span> arg0) &#123;</div><div class="line">                 <span class="comment">//在当前onClick方法中监听点击button的事件</span></div><div class="line">                 <span class="comment">//some coding</span></div><div class="line">             &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="b、通过外部类来实现————-比较少用"><a href="#b、通过外部类来实现————-比较少用" class="headerlink" title="b、通过外部类来实现————(比较少用)"></a>b、通过外部类来实现————(比较少用)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//主类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="comment">//在监听器内使用外部类实现事件监听</span></div><div class="line">    loginBtn.setOnClickListener(<span class="keyword">new</span> MyOnClickListener()&#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">              <span class="comment">//调用父类MyOnClickListener的onClick方法</span></div><div class="line">              <span class="keyword">super</span>.onClick(arg0);</div><div class="line">              <span class="comment">//在当前onClick方法中监听点击button的事件</span></div><div class="line">              <span class="comment">//some coding</span></div><div class="line">          &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//定义外部类MyOnClickListener,并且需要实现OnClickListener接口</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOnClickListener</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">        <span class="comment">//some coding</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="c、通过外部类来实现的另一种写法"><a href="#c、通过外部类来实现的另一种写法" class="headerlink" title="c、通过外部类来实现的另一种写法"></a>c、通过外部类来实现的另一种写法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//主类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="comment">//将外部类赋予一个OnClickListener接口的对象listener</span></div><div class="line">        loginBtn.setOnClickListener(listener);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//将外部类赋予一个OnClickListener接口的对象</span></div><div class="line">    OnClickListener listener = <span class="keyword">new</span> MyOnClickListener()&#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">              <span class="comment">//调用父类的onClick方法</span></div><div class="line">              <span class="keyword">super</span>.onClick(arg0);</div><div class="line">              <span class="comment">//在当前onClick方法中监听点击button的事件</span></div><div class="line">              <span class="comment">//some coding</span></div><div class="line">          &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">//定义外部类MyOnClickListener,并且需要实现OnClickListener接口</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOnClickListener</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">        <span class="comment">//some coding</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="d、通过实现接口的方式来实现"><a href="#d、通过实现接口的方式来实现" class="headerlink" title="d、通过实现接口的方式来实现"></a>d、通过实现接口的方式来实现</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainActivity类直接实现OnClickListener接口，并重写onClick()方法</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="title">implements</span> <span class="title">OnClickListener</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="comment">//将监听事件的对象——MainActivity的当前对象(即this)绑定到当前控件loginBtn上</span></div><div class="line">        loginBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写onClick()方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onClick(<span class="type">View</span> v) &#123;</div><div class="line">        <span class="comment">//some coding</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Button与ImageButton的异同</p>
<pre><code>都可以作为按钮产生点击事件、都会产生明显的点击效果；
Button有text属性，ImageButton没有；
ImageButton有src属性，Button没有
</code></pre><h3 id="常见控件的使用步骤"><a href="#常见控件的使用步骤" class="headerlink" title="常见控件的使用步骤"></a>常见控件的使用步骤</h3><h4 id="autoCompleteTextView与MultiAutoCompleteTextView的使用步骤"><a href="#autoCompleteTextView与MultiAutoCompleteTextView的使用步骤" class="headerlink" title="autoCompleteTextView与MultiAutoCompleteTextView的使用步骤"></a>autoCompleteTextView与MultiAutoCompleteTextView的使用步骤</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、初始化对象</span></div><div class="line">actv = (AutoCompleteTextView) findViewById(R.id.actv1);</div><div class="line"><span class="comment">//2、初始化数据源，这些数据源用来匹配文本框中输入的内容</span></div><div class="line"><span class="keyword">String</span>[] res=&#123;<span class="string">"beijing1"</span>,<span class="string">"beijing2"</span>,<span class="string">"beijian"</span>,<span class="string">"shanghai"</span>&#125;;</div><div class="line"><span class="comment">//3、创建一个适配器，通过适配器来适配文本框的输入内容，下拉框的内容就是通过适配器来操作的</span></div><div class="line">ArrayAdapter&lt;<span class="keyword">String</span>&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;<span class="keyword">String</span>&gt;(<span class="keyword">this</span>,android.R.layout.simple_list_item_1,res);</div><div class="line"><span class="comment">//4、将adapter与当前autoCompleteTextView控件绑定</span></div><div class="line">actv.setAdapter(adapter);</div><div class="line"><span class="comment">//5、在xml文件中设置android:completionThreshold，设置输入多少字符时自动匹配</span></div><div class="line"><span class="comment">//6、对MultiAutoCompleteTextView而言，以上步骤完全相同，仅多一步设置分隔符</span></div><div class="line">mactv.setTokenizer(<span class="keyword">new</span> MultiAutoCompleteTextView.CommaTokenizer());</div></pre></td></tr></table></figure>
<p>AutoCompleteTextView与MultiAutoCompleteTextView控件的区别</p>
<pre><code>AutoCompleteTextView：匹配多个值、只选择一个值。常用于搜索下拉提示框；
MultiAutoCompleteTextView：匹配多个值、可选择多个值、以分隔符分隔。常用于邮件收件人输入框；
</code></pre><h4 id="ToggleButton的使用步骤"><a href="#ToggleButton的使用步骤" class="headerlink" title="ToggleButton的使用步骤"></a>ToggleButton的使用步骤</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、初始化控件</span></div><div class="line">tb = (ToggleButton) findViewById(R.id.toggleButton1);     <span class="comment">//2、监听ToggleButton按钮，为当前的tbs设置onCheckedChangeListener监听器</span></div><div class="line">tb.setOnCheckedChangeListener(<span class="keyword">this</span>); <span class="comment">//通过实现接口的方式来实现事件监听</span></div><div class="line"><span class="comment">//3、重写onCheckedChanged()方法——当点击tb控件，更换textview的文字</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(CompoundButton buttonView, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</div><div class="line">    <span class="comment">//当tb被点击时，该方法会执行</span></div><div class="line">    <span class="comment">//参数buttonView代表被点击的控件对象本身</span></div><div class="line">    <span class="comment">//参数isChecked代表被点击的控件的状态,true或false</span></div><div class="line">    <span class="comment">//实现思路：当点击tb控件，更换textview的文字即可</span></div><div class="line">    tv.setText(isChecked?<span class="string">"open"</span>:<span class="string">"close"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>textOn  对应checked=true状态下的文字
textOff 对应checked=false状态下的文字
</code></pre><h4 id="CheckBox的使用步骤"><a href="#CheckBox的使用步骤" class="headerlink" title="CheckBox的使用步骤"></a>CheckBox的使用步骤</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、初始化控件checkBox控件对象</span></div><div class="line">dViewById(R.id.checkBox1);</div><div class="line"><span class="comment">//2、设置checkbox的监听器setOnCheckedChangeListener()</span></div><div class="line">cb.setOnCheckedChangeListener(<span class="literal">new</span> OnCheckedChangeListener() &#123;</div><div class="line"><span class="comment">//3、通过监听器的onCheckedChanged()方法来判断当前checkbox是否被选中，并作相应处理</span></div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="literal">void</span> onCheckedChanged(CompoundButton buttonView, <span class="built_in">boolean</span> isChecked) &#123;</div><div class="line">            <span class="comment">//参数buttonView代表被点击的当前控件对象本身</span></div><div class="line">            <span class="comment">//参数isChecked代表当前checkbox是否被选中</span></div><div class="line">            <span class="keyword">if</span>(isChecked)&#123;</div><div class="line">                <span class="comment">//获取checkbox的文本内容</span></div><div class="line">                <span class="built_in">String</span> txt = buttonView.getText().toString();</div><div class="line">                <span class="keyword">Log</span>.i(<span class="string">"tag"</span>,txt);<span class="comment">//android中输出的一种方式，使用Log</span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">Log</span>.i(<span class="string">"tag"</span>,<span class="string">"取消选中"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h4 id="RadioGroup的使用步骤"><a href="#RadioGroup的使用步骤" class="headerlink" title="RadioGroup的使用步骤"></a>RadioGroup的使用步骤</h4><p>XML文件中的写法<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;RadioGroup</div><div class="line">          android:orientation=<span class="string">"horizontal"</span></div><div class="line">          android:<span class="built_in">id</span>=<span class="string">"@+id/radioGroup1"</span></div><div class="line">          android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">          android:layout_height=<span class="string">"wrap_content"</span> &gt;</div><div class="line">          &lt;RadioButton</div><div class="line">              android:<span class="built_in">id</span>=<span class="string">"@+id/radio0"</span></div><div class="line">              android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">              android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">              android:checked=<span class="string">"true"</span>  </div><div class="line">              android:<span class="built_in">text</span>=<span class="string">"男"</span> /&gt;</div><div class="line">          &lt;RadioButton</div><div class="line">              android:<span class="built_in">id</span>=<span class="string">"@+id/radio1"</span></div><div class="line">              android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">              android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">              android:<span class="built_in">text</span>=<span class="string">"女"</span> /&gt;    </div><div class="line">&lt;/RadioGroup&gt;</div></pre></td></tr></table></figure></p>
<p>activity.java文件中<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、初始化控件RadioGroup控件对象</span></div><div class="line">rg = (RadioGroup) findViewById(R.id.radioGroup1);</div><div class="line"><span class="comment">//2、设置RadioGroup的监听器setOnCheckedChangeListener()</span></div><div class="line"><span class="comment">//3、通过监听器的onCheckedChanged()方法来判断当前RadioGroup中的哪个radioButton被选中</span></div><div class="line"><span class="comment">//注意：RadioGroup的接口OnCheckedChangeListener是android.widget.RadioGroup包下的</span></div><div class="line">rg.setOnCheckedChangeListener(<span class="keyword">new</span> android.widget.RadioGroup.OnCheckedChangeListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(RadioGroup group, <span class="keyword">int</span> checkedId)</span> </span>&#123;</div><div class="line">            <span class="comment">//参数group代表被点击的控件RadioGroup对象本身</span></div><div class="line">            <span class="comment">//参数checkedId代表被选中的radioButton的id</span></div><div class="line">            <span class="keyword">switch</span> (checkedId) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.radio0:</div><div class="line">                Log.i(<span class="string">"tag"</span>,<span class="string">"当前——男孩被选中"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.radio1:</div><div class="line">                Log.i(<span class="string">"tag"</span>,<span class="string">"当前——女孩被选中"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p><strong>注意：RadioGroup的接口OnCheckedChangeListener是android.widget.RadioGroup包下的</strong></p>
<h2 id="五大布局"><a href="#五大布局" class="headerlink" title="五大布局"></a>五大布局</h2><table>
<thead>
<tr>
<th style="text-align:center">布局名称</th>
<th style="text-align:center">特点</th>
<th style="text-align:center">语法</th>
<th style="text-align:left">属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">LinearLayout</td>
<td style="text-align:center">其包含的子控件将以横向或竖向方式排列</td>
<td style="text-align:center">&lt;LinearLayout attr=value&gt;&lt;/LinearLayout&gt;</td>
<td style="text-align:left">android:orientation<br>android:gravity</td>
</tr>
<tr>
<td style="text-align:center">RelativeLayout</td>
<td style="text-align:center">其包含的子控件将以子控件之间的相对位置或子控件相对父容器的位置的方式排列</td>
<td style="text-align:center">&lt;RelativeLayout attr=value&gt;&lt;/RelativeLayout&gt;</td>
<td style="text-align:left">本身无特殊属性，但该布局的子控件有特殊属性</td>
</tr>
<tr>
<td style="text-align:center">FrameLayout</td>
<td style="text-align:center">其包含的所有子控件都不能被指定存放位置，统统都放于该布局的左上角。并且后面的控件直接覆盖前面的控件，并将其部分或全部遮挡</td>
<td style="text-align:center">&lt;FrameLayout attr=value&gt;&lt;/FrameLayout&gt;</td>
<td style="text-align:left">本身无特殊属性，但该布局的子控件有特殊属性</td>
</tr>
<tr>
<td style="text-align:center">AbsoluteLayout</td>
<td style="text-align:center">直接指定子控件的在xy轴上的绝对位置。由于屏幕适配问题很少用到</td>
<td style="text-align:center">忽略</td>
<td style="text-align:left">忽略</td>
</tr>
<tr>
<td style="text-align:center">TableLayout</td>
<td style="text-align:center">以行列的表格形式管理子控件，每一行为一个TableRow的对象，也可以是一个View的对象</td>
<td style="text-align:center">&lt;TableLayout attr=value&gt;&lt;/TableLayout&gt;</td>
<td style="text-align:left">android:stretchColumns<br>android:shrinkColumns</td>
</tr>
</tbody>
</table>
<h3 id="LinearLayout的常用属性及其用法"><a href="#LinearLayout的常用属性及其用法" class="headerlink" title="LinearLayout的常用属性及其用法"></a>LinearLayout的常用属性及其用法</h3><h4 id="LinearLayout本身常用到的2个属性"><a href="#LinearLayout本身常用到的2个属性" class="headerlink" title="LinearLayout本身常用到的2个属性"></a>LinearLayout本身常用到的2个属性</h4><pre><code>android:orientation  //决定其子控件的水平或垂直排布方式，
//其值为：
    vertical 垂直
    horizontal 水平
android:gravity //决定其子控件的水平和垂直上的位置
//其值有：
      center_vertical  子控件垂直居中
      center 子控件垂直水平居中
      center_horizontal 子控件水平居中
      right  子控件位于当前布局的右边
      left   子控件位于当前布局的左边
      bottom 子控件位于当前布局的底部
</code></pre><p><strong>注：android:gravity支持多个属性,以|分隔,如android:gravity=”bottom|center_vertical”</strong></p>
<h4 id="LinearLayout的子控件的常用属性"><a href="#LinearLayout的子控件的常用属性" class="headerlink" title="LinearLayout的子控件的常用属性"></a>LinearLayout的子控件的常用属性</h4><pre><code>android:layout_gravity //子控件本身在当前父容器的xy轴上的位置
    其值同android:gravity
android:layout_weight  //子控件本身占当前父容器的一个比例
    其值为整数或小数
</code></pre><p><strong>注意：android:layout_gravity与android:gravity的异同</strong></p>
<pre><code>都用于设置水平和垂直上的位置
属性值都相同

android:gravity是LinearLayout的属性，决定布局的子控件的位置
android:layout_gravity是LinearLayout的子控件的属性，决定子控件自身的位置
某些属性值在android:layout_gravity上不起作用，此时需使用android:gravity
</code></pre><h4 id="LinearLayout的实例代码"><a href="#LinearLayout的实例代码" class="headerlink" title="LinearLayout的实例代码"></a>LinearLayout的实例代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span>  <span class="comment">//LinearLayout的常用属性</span></div><div class="line">    android:gravity=<span class="string">"bottom"</span>  <span class="comment">//LinearLayout的常用属性</span></div><div class="line">    &gt;</div><div class="line">    <span class="xml"><span class="comment">&lt;!--子控件--&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button1"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span> </div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span>  //<span class="attr">LinearLayout</span>的子控件的常用属性</div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> //<span class="attr">LinearLayout</span>的子控件的常用属性</div><div class="line">    /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="RelativeLayout的常用属性及其用法"><a href="#RelativeLayout的常用属性及其用法" class="headerlink" title="RelativeLayout的常用属性及其用法"></a>RelativeLayout的常用属性及其用法</h3><p>RelativeLayout本身无特殊属性，但其子控件有特殊属性</p>
<h4 id="RelativeLayout的子控件的常用属性-当前子控件相对于其父容器的一个位置"><a href="#RelativeLayout的子控件的常用属性-当前子控件相对于其父容器的一个位置" class="headerlink" title="RelativeLayout的子控件的常用属性 (当前子控件相对于其父容器的一个位置)"></a>RelativeLayout的子控件的常用属性 (当前子控件相对于其父容器的一个位置)</h4><pre><code>android:layout_alignParentXXX = &quot;true&quot;  //子控件相对当前父容器靠左|右|上|下
android:layout_marginXXX =&quot;30dp&quot; //子控件距当前父容器左|右|上|下边的距离
android:layout_centerXXX = &quot;true&quot; //子控件相对当前父容器水平|垂直居中
</code></pre><h4 id="RelativeLayout的子控件的常用属性-当前子控件相对于其他子控件的位置"><a href="#RelativeLayout的子控件的常用属性-当前子控件相对于其他子控件的位置" class="headerlink" title="RelativeLayout的子控件的常用属性 (当前子控件相对于其他子控件的位置)"></a>RelativeLayout的子控件的常用属性 (当前子控件相对于其他子控件的位置)</h4><pre><code>android:layout_XXX  = &quot;@+id/btn1&quot;  //子控件相对与id为btn1的子控件的位置
</code></pre><h4 id="RelativeLayout的实例代码"><a href="#RelativeLayout的实例代码" class="headerlink" title="RelativeLayout的实例代码"></a>RelativeLayout的实例代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;RelativeLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span> </div><div class="line">    &gt;</div><div class="line"></div><div class="line">    &lt;Button </div><div class="line">        android:id=<span class="string">"@+id/btn1"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"第一个按钮"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        <span class="comment">//当前子控件相对于其父容器的一个位置</span></div><div class="line">        android:layout_centerHorizontal=<span class="string">"true"</span>    </div><div class="line">   /&gt;</div><div class="line"></div><div class="line">   &lt;Button </div><div class="line">        android:id=<span class="string">"@+id/btn2"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"第二个按钮"</span></div><div class="line">        android:layout_width=<span class="string">"200dp"</span></div><div class="line">        android:layout_height=<span class="string">"100dp"</span></div><div class="line">        <span class="comment">//当前子控件相对于其他子控件的位置</span></div><div class="line">        android:layout_alignTop=<span class="string">"@+id/btn1"</span></div><div class="line">   /&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="FrameLayout的常用属性及其用法"><a href="#FrameLayout的常用属性及其用法" class="headerlink" title="FrameLayout的常用属性及其用法"></a>FrameLayout的常用属性及其用法</h3><p>FrameLayout本身无特殊属性，但其子控件有特殊属性</p>
<h4 id="FrameLayout的子控件的常用属性"><a href="#FrameLayout的子控件的常用属性" class="headerlink" title="FrameLayout的子控件的常用属性"></a>FrameLayout的子控件的常用属性</h4><pre><code>android:layout_gravity  //同LinearLayout子控件的属性
</code></pre><h4 id="FrameLayout的实例代码"><a href="#FrameLayout的实例代码" class="headerlink" title="FrameLayout的实例代码"></a>FrameLayout的实例代码</h4><p>FrameLayout常用于进度条布局，如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> </div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/progressBar1"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleLarge"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/textView1"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"80%"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="TableLayout的常用属性及其用法"><a href="#TableLayout的常用属性及其用法" class="headerlink" title="TableLayout的常用属性及其用法"></a>TableLayout的常用属性及其用法</h3><h4 id="TableLayout本身常用到的3个属性"><a href="#TableLayout本身常用到的3个属性" class="headerlink" title="TableLayout本身常用到的3个属性"></a>TableLayout本身常用到的3个属性</h4><pre><code>//隐藏第N列(0为第一列),列之间用逗号隔开
android:collapseColumns=&quot;2,3&quot;
//收缩第N列(0为第一列)的高度和宽度，防止可收缩的列因为内容过多而太宽被挤出屏幕外,列之间用逗号隔开，*代表收缩所有列
//注：一列能同时表示收缩和拉伸
android:shrinkColumns=&quot;2,4&quot;
//拉伸第N列(0为第一列)的高度和宽度，以填满剩下的多余空白空间,列之间用逗号隔开
android:stretchColumns=&quot;1,2&quot;  
</code></pre><h4 id="TableLayout子控件常用到的属性"><a href="#TableLayout子控件常用到的属性" class="headerlink" title="TableLayout子控件常用到的属性"></a>TableLayout子控件常用到的属性</h4><pre><code>//该子控件显示在第2列
android:layout_column =&quot;1&quot; 
//该子控件占据2列
android:layout_span=&quot;2&quot;  
</code></pre><h4 id="TableLayout的实例代码"><a href="#TableLayout的实例代码" class="headerlink" title="TableLayout的实例代码"></a>TableLayout的实例代码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TableLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:shrinkColumns</span>=<span class="string">"2"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 一个view控件也可以是一行   --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button4"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TableRow</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tableRow2"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:layout_span</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/button5"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Button"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/button6"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Button"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Android四大组件之Activity"><a href="#Android四大组件之Activity" class="headerlink" title="Android四大组件之Activity"></a>Android四大组件之Activity</h2><p>Activity是一个应用程序组件，提供用户与程序交互的界面</p>
<pre><code>Android四大组件
    Activity
    Service
    Broadcast Receiver
    Content Provider
</code></pre><h3 id="创建并使用Activity步骤"><a href="#创建并使用Activity步骤" class="headerlink" title="创建并使用Activity步骤"></a>创建并使用Activity步骤</h3><p>以代码示例创建并使用Activity的4个步骤<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.<span class="type">Activity</span>;</div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"><span class="comment">//1、创建一个继承了Android的Activity的类</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="comment">//2、在类中重写onCreate()方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//3、在onCreate()方法中设置显示布局</span></div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        <span class="comment">//some coding</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>//4、在AndroidManifest.xml文件中注册该Activity<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">application</span></span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--注册activity--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            &lt;!<span class="attr">--android:name</span>=<span class="string">"包名.类名"</span><span class="attr">--</span>&gt;</div><div class="line">            android:name="com.example.myfourthapp.MainActivity"</div><div class="line">            android:label="@string/app_name" &gt;</div><div class="line">            <span class="comment">&lt;!--应用程序的主入口Activity设置--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><p>Activity整个生命周期如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/2.jpg" alt="Activity生命周期"><br>其中各方法的作用为：</p>
<pre><code>onCreate()  //创建
onStart()   //运行
onResume()  //获取焦点
onPause()   //失去焦点
onStop()    //暂停
onDestroy() //销毁
onRestart() //重新运行
</code></pre><p>从创建到销毁(如按多次返回键)的生命周期如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/3.jpg" alt="Activity创建到销毁的生命周期"><br>从启动到后台(如按Home键)，再到前台的生命周期<br><img src="http://ocej2soxx.bkt.clouddn.com/3.jpg" alt=""><br>从启动到失去焦点(如弹出新的半透明Activity)，再到获取焦点的生命周期<br><img src="http://ocej2soxx.bkt.clouddn.com/5.jpg" alt=""></p>
<h4 id="Activity的四种状态"><a href="#Activity的四种状态" class="headerlink" title="Activity的四种状态"></a>Activity的四种状态</h4><pre><code>活动状态(Running) Activity处于界面最顶端，获取焦点 
暂定状态(Paused) Activity失去焦点，但对用户可见。如弹出dailog
停止状态(Stopped) Activity被完全遮挡，但保留所有状态和成员信息。如按下home键
非活动状态(killed) Activity被停止
</code></pre><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>Intent用于完成Android各个组件之间的通讯。</p>
<p>Intent实现页面跳转的两种方式</p>
<h3 id="无返回结果的页面跳转"><a href="#无返回结果的页面跳转" class="headerlink" title="无返回结果的页面跳转"></a>无返回结果的页面跳转</h3><p>通过startActivity(intent)来实现无返回结果的页面跳转的3个步骤<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.为控件注册监听事件，即通过什么事件触发页面跳转</span></div><div class="line">btn1 = (Button) findViewById(R.id.btn1);</div><div class="line">btn1.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;   </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">            <span class="comment">//2.初始化Intent对象</span></div><div class="line"></div><div class="line">            <span class="comment">//使用Intent的构造方法为Intent(context , class) ,其中：</span></div><div class="line">            <span class="comment">//第一个参数content是启动Activity的上下文对象，</span></div><div class="line">            <span class="comment">//有两种写法：FirstActivity.this</span></div><div class="line">            <span class="comment">//或者定义FirstActivity类的成员变量Content mContext,</span></div><div class="line">            <span class="comment">//并在onCreate()方法中设置mContext=this;</span></div><div class="line">            </div><div class="line">            <span class="comment">//第二个参数：想要跳转到的目标Activity类</span></div><div class="line">            <span class="comment">//Intent intent = new Intent(mContext, SecondActivity.class);</span></div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">            <span class="comment">//3.通过startActivity(intent对象)来实现页面跳转</span></div><div class="line">            startActivity(intent);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>通过上例，即可实现从FirstActivity跳转到SecondActivity</p>
<h3 id="有返回结果的页面跳转"><a href="#有返回结果的页面跳转" class="headerlink" title="有返回结果的页面跳转"></a>有返回结果的页面跳转</h3><p>通过startActivityForResult()来实现有返回结果的页面跳转的7个步骤<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="comment">//1.为控件注册监听事件，即通过什么事件触发页面跳转</span></div><div class="line">    btn2 = (Button) findViewById(R.id.btn2);</div><div class="line">    btn2.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">                <span class="comment">//2.初始化Intent对象</span></div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">                <span class="comment">//3.通过startActivityForResult(intent,requestCode)来实现页面跳转，其中：</span></div><div class="line">                <span class="comment">//第一个参数为Intent对象</span></div><div class="line">                <span class="comment">//第二个参数requestCode为请求的一个标识</span></div><div class="line">                startActivityForResult(intent,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">&#125;  </div><div class="line"><span class="comment">//4.通过重写onActivityResult()方法接收第二个Activity返回的数据</span></div><div class="line"><span class="comment">//其中的参数的含义：</span></div><div class="line"><span class="comment">//requestCode为请求的标识</span></div><div class="line"><span class="comment">//resultCode为第二个Activity返回的标识</span></div><div class="line"><span class="comment">//data为第二个Activity返回的数据</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">    <span class="comment">//6.判断请求标识和返回标识是否匹配</span></div><div class="line">    <span class="keyword">if</span>(requestCode ==<span class="number">1</span> &amp;&amp; resultCode ==<span class="number">2</span>)&#123;</div><div class="line">        <span class="comment">//7.获取第二个Activity返回的数据</span></div><div class="line">        String content = data.getStringExtra(<span class="string">"data"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>//5.在第二个Activity需要设置返回标识<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="type">Button</span> bt;</div><div class="line">    <span class="keyword">private</span> <span class="type">String</span> content = <span class="string">"你好"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.second_activity);</div><div class="line">        </div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 第二个Activity什么时候给第一个Activity回传数据?</div><div class="line">         * ————被动式的回传数据————当点击第二个Activity的按钮时回传</div><div class="line">         * 回传到第一个Activity的数据实际上是一个Intent对象</div><div class="line">         * 通过setResult设置返回码</div><div class="line">         * */</div><div class="line">        bt = (<span class="type">Button</span>) findViewById(<span class="type">R</span>.id.sBtn1);</div><div class="line">        bt.setOnClickListener(<span class="keyword">new</span> <span class="type">OnClickListener</span>() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            public void onClick(<span class="type">View</span> arg0) &#123;</div><div class="line">                <span class="comment">//创建用于回传数据的Intent对象</span></div><div class="line">                <span class="type">Intent</span> data = <span class="keyword">new</span> <span class="type">Intent</span>();</div><div class="line">                <span class="comment">//data用键值对保存数据</span></div><div class="line">                data.putExtra(<span class="string">"data"</span>, content);</div><div class="line">                <span class="comment">//第一个参数为resultCode，即返回的标识码</span></div><div class="line">                <span class="comment">//第二个参数为回传的数据，即Intent对象</span></div><div class="line">                setResult(<span class="number">2</span>,data);</div><div class="line">                <span class="comment">//结束当前页面</span></div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过上例，即可实现从FirstActivity跳转到SecondActivity,并将SecondActivity的数据返回到FirstActivity。</p>
<p><strong>注：通过startActivityForResult()来实现有返回结果的页面跳转时，需要下面2个方法的配合</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">onActivityResult</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">setResult</span><span class="params">()</span></span></div></pre></td></tr></table></figure></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、一般情况下，布局属性与对象的setXXX方法一一对应</p>
<pre><code>比如设置字体颜色，在xml中属性是android:textColor，而在Activity中则是setTextColor方法
</code></pre><p>2、将布局文件Demo.xml引入到该activity中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">setContentView</span>(<span class="selector-tag">R</span><span class="selector-class">.layout</span><span class="selector-class">.Demo</span>);</div></pre></td></tr></table></figure></p>
<p>3、快捷键</p>
<pre><code>alt+/  代码提示与自动补全
ctrl+/ 注释
</code></pre><p>4、文字大小的单位常用sp;宽高的单位常用dp;android:hint为提示信息文体<br>5、执行android项目</p>
<pre><code>右键项目--&gt;run as android project
</code></pre><p>6、android底层自动根据手机屏幕分辨率选择不同分辨率的图片<br>7、res目录下的所有资源都会在R.java中自动生成对应的一个id</p>
<pre><code>&quot;@string/btn_name&quot;的含义是访问string.xml文件中的btn_name属性;
能访问的原因是由于R.java的存在,将其转换为R.string.btn_name;

findViewById()是如何查找到对应View的id————通过R.java中内部静态类id中的静态变量
</code></pre><p>8、android SDK开发文档：</p>
<pre><code>在sdk目录下的docs文件夹内，常用的是Develop栏目下的API Guides/Reference/Tools

查看android.support.design包控件的属性步骤
    点击进入android.support.design包下的R.styleable类、搜索控件属性即可
查看android控件的属性步骤
    点击进入android包下的R.styleable类、搜索控件属性即可
</code></pre><p>9、android信息输出</p>
<pre><code>可以使用Log.i(&quot;Tag&quot;,info) 输出信息
也可以使用System.out.println(info)
</code></pre><p>10、RadioGroup的接口OnCheckedChangeListener是android.widget.RadioGroup包下的<br>11、五大布局之间可以嵌套使用<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;LinearLayout&gt;</span></div><div class="line">    <span class="section">&lt;RelativeLayout&gt;</span></div><div class="line">    <span class="section">&lt;/RelativeLayout&gt;</span></div><div class="line"><span class="section">&lt;/LinearLayout&gt;</span></div></pre></td></tr></table></figure></p>
<p>12、长文本滚动效果<br>            <a href="http://www.imooc.com/video/4308" target="_blank" rel="external">http://www.imooc.com/video/4308</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何使用hexo搭建github博客]]></title>
      <url>https://aiolos123.github.io/2016/08/21/how-to-deploy-github-blog-with-hexo/</url>
      <content type="html"><![CDATA[<p>作为本人在github上的第一篇文档，本文详细讲解一下我是如何利用hexo在github上搭建博客的。算是送给自己的一份special gift。<br><a id="more"></a></p>
<p>特别感谢如下博客提供的帮助，为我解决了许多问题：<br><a href="http://www.tuicool.com/articles/ueI7naV" target="_blank" rel="external">http://www.tuicool.com/articles/ueI7naV</a></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="全局安装Hexo"><a href="#全局安装Hexo" class="headerlink" title="全局安装Hexo"></a>全局安装Hexo</h3><p>Hexo是基于Node的，所以首先要安装Node(安装过程略)，然后再全局安装Hexo，即加-g参数，安装命令如下：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install hexo-<span class="keyword">cli</span> -g</div></pre></td></tr></table></figure>
<p>本人系统的node版本和hexo安装过程截图如下：<br><img src="http://ocej2soxx.bkt.clouddn.com/g1.jpg" alt="node版本和hexo安装过程图"></p>
<h3 id="校验hexo是否安装成功"><a href="#校验hexo是否安装成功" class="headerlink" title="校验hexo是否安装成功"></a>校验hexo是否安装成功</h3><p>安装完成后，通过如下命令查看是否安装成功</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="built_in">version</span></div></pre></td></tr></table></figure>
<p>执行过程如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g2.jpg" alt="查看hexo是否安装成功图"></p>
<h3 id="创建Hexo项目"><a href="#创建Hexo项目" class="headerlink" title="创建Hexo项目"></a>创建Hexo项目</h3><p>安装好后，我们就可以使用Hexo创建项目了。进入到一个目录后，执行如下命令<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo init <span class="string">[目标文件夹名]</span></div></pre></td></tr></table></figure></p>
<p>Hexo即会自动在目标文件夹内建立网站所需要的所有文件。执行过程如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g3.jpg" alt="Hexo创建项目过程图"></p>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>切换到该目录，运行如下命名安装依赖包<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm <span class="keyword">install</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g4.jpg" alt="安装依赖包"></p>
<h3 id="启动Hexo服务器，本地查看"><a href="#启动Hexo服务器，本地查看" class="headerlink" title="启动Hexo服务器，本地查看"></a>启动Hexo服务器，本地查看</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="keyword">server</span>  <span class="comment">//或者hexo s</span></div></pre></td></tr></table></figure>
<p>打开浏览器，输入 http:localhost:4000 回车就看到如下界面<br><img src="http://ocej2soxx.bkt.clouddn.com/g5.jpg" alt="启动Hexo服务器"></p>
<p>至此，Hexo在本地已经搭建起来了，下一步需要对hexo进行适当配置。</p>
<h2 id="Hexo的配置"><a href="#Hexo的配置" class="headerlink" title="Hexo的配置"></a>Hexo的配置</h2><h3 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a>目录和文件</h3><p>安装完成的Hexo的目录结构如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/g6.jpg" alt="Hexo的目录结构"><br>其中：<br>    source ：为资源文件夹，用于存放用户资源的地方。<br>    source/_post ：为文件箱。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件/ 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。<br>    themes ：为主题文件夹。Hexo会根据主题来生成静态页面。<br>    _config.yml ：为全局的配置文件，每次更改要重启服务。  </p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>在_config.yml 中只需修改site部分和url部分即可，其他保持默认：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Site 站点配置</span></div><div class="line"><span class="symbol">title:</span> Hexo-demo <span class="meta">#网站标题</span></div><div class="line"><span class="symbol">subtitle:</span> hexo is simple <span class="keyword">and</span> easy to study <span class="meta">#网站副标题</span></div><div class="line"><span class="symbol">description:</span> this is hexo-demo <span class="meta">#网栈描述</span></div><div class="line"><span class="symbol">author:</span> pomy <span class="meta">#你的名字</span></div><div class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Hans <span class="meta">#网站使用的语言</span></div><div class="line"><span class="symbol">timezone:</span> Asia/Shanghai <span class="meta">#网站时区</span></div><div class="line"></div><div class="line"><span class="meta"># URL</span></div><div class="line"><span class="meta">## If your site is put in a subdirectory, </span></div><div class="line"><span class="meta">## set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="symbol">url:</span> https://aiolos123.github.io/  <span class="meta">#网址</span></div><div class="line"><span class="symbol">root:</span> / <span class="meta">#网站根目录</span></div><div class="line"><span class="symbol">permalink:</span> :year/:month/:day/:title/ <span class="meta">#永久链接格式</span></div><div class="line"><span class="symbol">permalink_defaults:</span> <span class="meta">#永久链接中各部分的默认值</span></div></pre></td></tr></table></figure></p>
<p><strong>修改全局配置文件时，注意缩进，同时注意冒号后面要有一个空格。</strong></p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>见第6章  《更改主题》</p>
<h2 id="Hexo的基本使用"><a href="#Hexo的基本使用" class="headerlink" title="Hexo的基本使用"></a>Hexo的基本使用</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>通过 new 命令新建一篇文章：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt; </div><div class="line"><span class="comment">//其中layout是可选参数，默认值为post。</span></div><div class="line"><span class="comment">//或hexo n</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g7.jpg" alt="新建文章"><br>新建的文件则会保存到source/_post目录下。打开后即可编辑<br><img src="http://ocej2soxx.bkt.clouddn.com/g8.jpg" alt="编辑文章"><br>编辑完成后，启动服务器，便能看到刚刚发表的文章<br><img src="http://ocej2soxx.bkt.clouddn.com/g9.jpg" alt="查看文章"></p>
<p>下一步需要将其部署到github上。</p>
<h2 id="github-创建博客"><a href="#github-创建博客" class="headerlink" title="github 创建博客"></a>github 创建博客</h2><p>以下内容参考自 <a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="external">http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html</a></p>
<h3 id="创建页面仓库"><a href="#创建页面仓库" class="headerlink" title="创建页面仓库"></a>创建页面仓库</h3><p>登录github后(没有账号的请自行注册，本文略)，点击右上角的new repository新建仓库。<br><strong>注：这个仓库的名字必须与你的账号对应，格式: github账号.github.io</strong><br>输入基本信息，然后点击创建仓库。操作过程如下图(图片来源于<a href="http://www.jianshu.com/p/701b1095da11" target="_blank" rel="external">http://www.jianshu.com/p/701b1095da11</a>)<br><img src="http://ocej2soxx.bkt.clouddn.com/g10.jpg" alt="新建仓库"></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在刚刚创建的Repository下，找到http clone url，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g11.jpg" alt=""><br>将其中的url地址复制到全局配置文件的deploy项的repository后<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">deploy:</span></div><div class="line"><span class="symbol">  type:</span> git</div><div class="line"><span class="symbol">  repository:</span> <span class="meta">#上述复制的url</span></div><div class="line"><span class="symbol">  branch:</span> master</div></pre></td></tr></table></figure></p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>以下内容参考自 <a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="external">http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html</a></p>
<h4 id="使用Git-Bash生成ssh-key，命令如下"><a href="#使用Git-Bash生成ssh-key，命令如下" class="headerlink" title="使用Git Bash生成ssh key，命令如下"></a>使用Git Bash生成ssh key，命令如下</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">cd</span> <span class="regexp">~  #保证当前路径在”~”下</span></div><div class="line">ssh-keygen -t rsa -C <span class="string">"xxxxxx<span class="variable">@yy</span>.com"</span>  <span class="comment">#建议填写自己真实有效的邮箱地址</span></div></pre></td></tr></table></figure>
<p>执行过程如下图(填写密码处直接回车)：<br><img src="http://ocej2soxx.bkt.clouddn.com/g12.jpg" alt="生成ssh key"></p>
<h4 id="添加ssh-key到GItHub"><a href="#添加ssh-key到GItHub" class="headerlink" title="添加ssh key到GItHub"></a>添加ssh key到GItHub</h4><p>登录GitHub系统；点击右上角账号头像的“▼”→Settings→SSH kyes→Add SSH key。<br><img src="http://ocej2soxx.bkt.clouddn.com/g13.jpg" alt="添加ssh key到GItHub"></p>
<p>打开c:/Users/xxxx_000/.ssh/目录下的id_rsa.pub文件，全选复制公钥内容。将公钥粘贴到GitHub中Add an SSH key的key输入框，Title自定义，最后点击“Add Key”。</p>
<h4 id="配置账户"><a href="#配置账户" class="headerlink" title="配置账户"></a>配置账户</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> user.name “your_username”  <span class="meta">#设置用户名</span></div><div class="line">git config --<span class="keyword">global</span> user.email “your_registered_github_Email”  <span class="meta">#设置邮箱地址(建议用注册giuhub的邮箱)</span></div></pre></td></tr></table></figure>
<h4 id="测试ssh-keys是否设置成功"><a href="#测试ssh-keys是否设置成功" class="headerlink" title="测试ssh keys是否设置成功"></a>测试ssh keys是否设置成功</h4><p>输入如下命令<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g14.jpg" alt="配置账户"><br>如上图，如果出现Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 这句话，说明设置成功。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>最后一步就是部署博客到github上</p>
<h3 id="静态化"><a href="#静态化" class="headerlink" title="静态化"></a>静态化</h3><p>在部署之前，需要通过命令把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。<br>使用的命令为：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;hexo <span class="keyword">generate</span></div><div class="line"><span class="comment">//或hexo g</span></div></pre></td></tr></table></figure></p>
<p>在当前目录下，会生成一个public的目录，里面包括了所有静态化的文件。</p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g15.jpg" alt="静态化文件"></p>
<h3 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h3><p>生成静态文件之后，如果要发布到github，还需要安装 hexo-deployer-git<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git -S</div></pre></td></tr></table></figure></p>
<p>执行过程如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g16.jpg" alt="安装deploygit"><br><strong>强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy文件夹</strong>，命名如下：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo clean</span></div></pre></td></tr></table></figure></p>
<p>然后，使用如下命令进行部署<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy  <span class="comment">//或hexo d</span></div></pre></td></tr></table></figure></p>
<p>执行过程如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/g17.jpg" alt="部署"></p>
<p>然后，在github上便能看到刚刚部署的静态web网站：<br><img src="http://ocej2soxx.bkt.clouddn.com/g18.jpg" alt="部署成功"><br>现在，我们的博客就已经完全搭建起来了，在浏览器输入博客地址，即可查看。</p>
<h3 id="后期维护"><a href="#后期维护" class="headerlink" title="后期维护"></a>后期维护</h3><p>每次修改本地文件后，需要键入hexo generate才能保存。每次使用命令时，都要在Hexo目录下。每次想要上传文件到Github时，就应该先键入hexo generate保存之后，再键入hexo deploy。大概成功之后是酱紫的：<br><img src="http://ocej2soxx.bkt.clouddn.com/g19.jpg" alt="部署成功"></p>
<h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>如果觉得默认的主题不好，可自己更换一个主题，步骤如下。</p>
<h3 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h3><p>本人选用next主题，故参考如下地址内容即可<br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a> </p>
<p>安装完成的next主题如下：<br><img src="http://ocej2soxx.bkt.clouddn.com/g20.jpg" alt="安装完成的next主题"></p>
<h4 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h4><p>更改主题配置文件中的 highlight_theme 字段，将其值设定成你所喜爱的高亮主题。NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Code Highlight theme</span></div><div class="line"><span class="symbol">highlight_theme:</span> normal</div></pre></td></tr></table></figure></p>
<h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h4><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。配置如下：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Han</div></pre></td></tr></table></figure></p>
<h3 id="集成第三方服务"><a href="#集成第三方服务" class="headerlink" title="集成第三方服务"></a>集成第三方服务</h3><h4 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h4><p>在 站点配置文件 中新增 duoshuo_shortname 字段，值设置成多说域名的第一个.前的值。<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">duoshuo_shortname:</span> iissnan-notes</div></pre></td></tr></table></figure></p>
<h4 id="本地检索"><a href="#本地检索" class="headerlink" title="本地检索"></a>本地检索</h4><p>安装 hexo-generator-search，在站点的根目录下执行以下命令：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install hexo-generator-<span class="keyword">search</span> --<span class="keyword">save</span></div></pre></td></tr></table></figure></p>
<p>编辑 站点配置文件，新增以下内容到任意位置：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.<span class="keyword">xml</span></div><div class="line">  <span class="title">field</span>: post</div></pre></td></tr></table></figure></p>
<p>更多next主题内容请参考：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>上传图片使用：图床  <a href="http://tuchuang.org/" target="_blank" rel="external">http://tuchuang.org/</a></p>
]]></content>
    </entry>
    
  
  
</search>
