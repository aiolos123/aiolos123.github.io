<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[如何在centOS65中安装配置Nginx]]></title>
      <url>https://aiolos123.github.io/2017/09/13/how-to-install-and-config-nginx-on-centOS65/</url>
      <content type="html"><![CDATA[<p>本文讲解如何在CentOS65 X64中安装与配置Nginx开机自启动<br>本文Nginx的安装目录：/usr/local/nginx  安装版本是nginx-1.12.1<br><a id="more"></a></p>
<h1 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h1><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># /usr/local/nginx/sbin/nginx                      # 启动Nginx</span></div><div class="line"><span class="meta"># /usr/local/nginx/sbin/nginx -s reload            # 重新载入配置文件</span></div><div class="line"><span class="meta"># /usr/local/nginx/sbin/nginx -s reopen            # 重启 Nginx</span></div><div class="line"><span class="meta"># /usr/local/nginx/sbin/nginx -s quit              # 停止 Nginx</span></div><div class="line"><span class="meta"># /usr/local/nginx/sbin/nginx -t                   # 检查ngnix.conf配置文件的正确性</span></div></pre></td></tr></table></figure>
<h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>nginx依赖以下一些软件库，在安装之前请确保安装了这些软件库，它们包括：gcc，openssl，zlib，pcre（可通过rpm -q命令查询是否已安装），其中前三个库可通过系统盘进行安装<br><img src="/images/Nginx_1.jpg" alt="查看依赖软件库"></p>
<h2 id="下载最新版Nginx"><a href="#下载最新版Nginx" class="headerlink" title="下载最新版Nginx"></a>下载最新版Nginx</h2><blockquote>
<p>Nginx官网：<a href="http://nginx.org/en/download.html" target="_blank" rel="external">http://nginx.org/en/download.html</a><br>下载目前最新的稳定版 Nginx 1.12.1<br><img src="/images/Nginx_2.jpg" alt="查看依赖软件库"></p>
</blockquote>
<h2 id="安装Nginx过程"><a href="#安装Nginx过程" class="headerlink" title="安装Nginx过程"></a>安装Nginx过程</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># tar zxvf nginx-1.12.1.tar.gz </span></div><div class="line"><span class="meta">#cd nginx-1.12.1   </span></div><div class="line"><span class="meta">#./configure</span></div><div class="line"><span class="meta"># make  </span></div><div class="line"><span class="meta"># make install</span></div></pre></td></tr></table></figure>
<p>安装过程的截图如下：<br><img src="/images/Nginx_3.jpg" alt="安装Nginx过程"><br><img src="/images/Nginx_4.jpg" alt="安装Nginx过程"><br>安装成功的截图如下：<br><img src="/images/Nginx_5.jpg" alt="安装Nginx过程"></p>
<h2 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h2><p>安装完成后执行以下操作验证安装是否成功：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cd  /usr/local/nginx/sbin</span></div><div class="line"><span class="meta"># ./nginx -t</span></div></pre></td></tr></table></figure></p>
<p>结果显示如下图，说明nginx的安装已成功完成。<br><img src="/images/Nginx_6.jpg" alt="测试是否安装成功"></p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查看版本</span></div><div class="line"><span class="meta"># ./nginx -v</span></div><div class="line"><span class="comment">//启动nginx </span></div><div class="line"><span class="meta"># cd /usr/local/nginx/sbin</span></div><div class="line"><span class="meta"># ./nginx</span></div></pre></td></tr></table></figure>
<p>在浏览器中输入：<a href="http://localhost" target="_blank" rel="external">http://localhost</a> 来验证nginx是否成功启动<br><img src="/images/Nginx_7.jpg" alt="启动成功"></p>
<h1 id="配置Nginx开机自启动"><a href="#配置Nginx开机自启动" class="headerlink" title="配置Nginx开机自启动"></a>配置Nginx开机自启动</h1><p>本节内容引用自博客：<a href="http://blog.csdn.net/u013870094/article/details/52463026" target="_blank" rel="external">http://blog.csdn.net/u013870094/article/details/52463026</a></p>
<p>首先，在linux系统的/etc/init.d/目录下创建nginx文件，使用如下命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># vi /etc/init.d/nginx</span></div></pre></td></tr></table></figure></p>
<p>在脚本中添加如下命令,注意nginxd与nginx_config两项修改为nginx真实的安装路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># nginx Startup script for the Nginx HTTP Server</span></div><div class="line"><span class="comment"># it is v.0.0.2 version.</span></div><div class="line"><span class="comment"># chkconfig: - 85 15</span></div><div class="line"><span class="comment"># description: Nginx is a high-performance web and proxy server.</span></div><div class="line"><span class="comment">#              It has a lot of features, but it's not for everyone.</span></div><div class="line"><span class="comment"># processname: nginx</span></div><div class="line"><span class="comment"># pidfile: /var/run/nginx.pid</span></div><div class="line"><span class="comment"># config: /usr/local/nginx/conf/nginx.conf</span></div><div class="line">nginxd=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</div><div class="line">nginx_config=/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</div><div class="line">nginx_pid=/var/run/nginx.pid</div><div class="line">RETVAL=0</div><div class="line">prog=<span class="string">"nginx"</span></div><div class="line"><span class="comment"># Source function library.</span></div><div class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></div><div class="line"><span class="comment"># Source networking configuration.</span></div><div class="line">. /etc/sysconfig/network</div><div class="line"><span class="comment"># Check that networking is up.</span></div><div class="line">[ <span class="variable">$&#123;NETWORKING&#125;</span> = <span class="string">"no"</span> ] &amp;&amp; <span class="built_in">exit</span> 0</div><div class="line">[ -x <span class="variable">$nginxd</span> ] || <span class="built_in">exit</span> 0</div><div class="line"><span class="comment"># Start nginx daemons functions.</span></div><div class="line"><span class="function"><span class="title">start</span></span>() &#123;</div><div class="line"><span class="keyword">if</span> [ <span class="_">-e</span> <span class="variable">$nginx_pid</span> ];<span class="keyword">then</span></div><div class="line">   <span class="built_in">echo</span> <span class="string">"nginx already running...."</span></div><div class="line">   <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line">   <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></div><div class="line">   daemon <span class="variable">$nginxd</span> -c <span class="variable">$&#123;nginx_config&#125;</span></div><div class="line">   RETVAL=$?</div><div class="line">   <span class="built_in">echo</span></div><div class="line">   [ <span class="variable">$RETVAL</span> = 0 ] &amp;&amp; touch /var/lock/subsys/nginx</div><div class="line">   <span class="built_in">return</span> <span class="variable">$RETVAL</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># Stop nginx daemons functions.</span></div><div class="line"><span class="function"><span class="title">stop</span></span>() &#123;</div><div class="line">        <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></div><div class="line">        killproc <span class="variable">$nginxd</span></div><div class="line">        RETVAL=$?</div><div class="line">        <span class="built_in">echo</span></div><div class="line">        [ <span class="variable">$RETVAL</span> = 0 ] &amp;&amp; rm <span class="_">-f</span> /var/lock/subsys/nginx /var/run/nginx.pid</div><div class="line">&#125;</div><div class="line"><span class="comment"># reload nginx service functions.</span></div><div class="line"><span class="function"><span class="title">reload</span></span>() &#123;</div><div class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></div><div class="line">    <span class="comment">#kill -HUP `cat $&#123;nginx_pid&#125;`</span></div><div class="line">    killproc <span class="variable">$nginxd</span> -HUP</div><div class="line">    RETVAL=$?</div><div class="line">    <span class="built_in">echo</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># See how we were called.</span></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">start)</div><div class="line">        start</div><div class="line">        ;;</div><div class="line">stop)</div><div class="line">        stop</div><div class="line">        ;;</div><div class="line">reload)</div><div class="line">        reload</div><div class="line">        ;;</div><div class="line">restart)</div><div class="line">        stop</div><div class="line">        start</div><div class="line">        ;;</div><div class="line">status)</div><div class="line">        status <span class="variable">$prog</span></div><div class="line">        RETVAL=$?</div><div class="line">        ;;</div><div class="line">*)</div><div class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$prog</span> &#123;start|stop|restart|reload|status|help&#125;"</span></div><div class="line">        <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></div></pre></td></tr></table></figure></p>
<p>保存脚本文件后设置文件的执行权限：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a+x <span class="regexp">/etc/i</span>nit.d<span class="regexp">/nginx</span></div></pre></td></tr></table></figure></p>
<p>然后，就可以通过该脚本对nginx服务进行管理了：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx <span class="literal">start</span></div><div class="line">/etc/init.d/nginx <span class="literal">stop</span></div></pre></td></tr></table></figure></p>
<p>使用chkconfig进行管理<br>上面的方法完成了用脚本管理nginx服务的功能，但是还是不太方便，比如要设置nginx开机启动等。这时可以使用chkconfig来设置。</p>
<p>先将nginx服务加入chkconfig管理列表：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig <span class="comment">--add /etc/init.d/nginx</span></div></pre></td></tr></table></figure></p>
<p>加完这个之后，就可以使用service对nginx进行启动，重启等操作了。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service nginx <span class="literal">start</span></div><div class="line">service nginx <span class="literal">stop</span></div></pre></td></tr></table></figure></p>
<p>设置终端模式开机启动：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig nginx <span class="keyword">on</span></div></pre></td></tr></table></figure></p>
<p>上述配置过程如下图：<br><img src="/images/Nginx_8.jpg" alt="配置过程"></p>
<h1 id="安装Nginx过程中的问题的解决办法"><a href="#安装Nginx过程中的问题的解决办法" class="headerlink" title="安装Nginx过程中的问题的解决办法"></a>安装Nginx过程中的问题的解决办法</h1><h2 id="error-while-loading-shared-libraries-libpcre-so-1-cannot-open-shared-object-file-No-such-file-or-directory的解决办法"><a href="#error-while-loading-shared-libraries-libpcre-so-1-cannot-open-shared-object-file-No-such-file-or-directory的解决办法" class="headerlink" title="error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory的解决办法"></a>error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory的解决办法</h2><blockquote>
<p>错误描述<br>测试是否安装成功时，报出如下图错误，从下图错误提示信息可以得知是因为缺少lib文件导致，进一步查看具体内容，可从结果显示得知 ： <strong>libpcre.so.1 =&gt; not found </strong>，同时注意lib库的路径，有/lib/<em> 和 /lib64/</em> 之分。比如上图的是 /lib64/*,这个和下面解决问题时创建的软连接有关系</p>
<p>解决办法：<br>1、首先确认已经安装好pcre 软件（nginx 依赖该软件）<br>2、创建软连接，分64位系统和32位系统两种处理方式</p>
</blockquote>
<p>对于/lib64/* 64位系统来说,创建软连接的方式如下：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>查看lib库</div><div class="line"><span class="comment"># ls /lib64/ |grep pcre</span></div><div class="line"><span class="regexp">//</span>添加软连接</div><div class="line"><span class="comment"># ln -s /lib64/libpcre.so.0.0.1 /lib64/libpcre.so.1</span></div><div class="line"><span class="regexp">//</span>ps: 也有可能 pcre lib文件在目录：<span class="regexp">/usr/</span>local<span class="regexp">/lib64/</span>，具体请看错误具体内容中的显示路径</div></pre></td></tr></table></figure></p>
<p>报错信息及解决办法如下图<br><img src="/images/Nginx_10.jpg" alt="报错信息"></p>
<p>对于/lib/* 32位系统来说,创建软连接的方式如下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查看lib库</span></div><div class="line">#  ls /lib/ |grep pcre</div><div class="line">    libpcre.so<span class="number">.0</span></div><div class="line">    libpcre.so<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span></div><div class="line"><span class="comment">//添加软连接</span></div><div class="line"># ln -s /lib/libpcre.so<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> /lib/libpcre.so<span class="number">.1</span></div><div class="line"><span class="comment">//ps: 也有可能 pcre lib文件在目录：/usr/local/lib/</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在CentOS65中升级OpenSSH7.5P1的完整过程]]></title>
      <url>https://aiolos123.github.io/2017/09/13/how-to-update-openSSH-on-centOS65/</url>
      <content type="html"><![CDATA[<p>由于OpenSSH7.5之前的版本存在众多漏洞，本文讲解如何在CentOS65中升级OpenSSH到最新版本7.5p1</p>
<p>本文部分内容参考自博客：<a href="http://blog.csdn.net/lqy461929569/article/details/76148598" target="_blank" rel="external">http://blog.csdn.net/lqy461929569/article/details/76148598</a><br><a id="more"></a></p>
<h1 id="升级OpenSSH的注意事项"><a href="#升级OpenSSH的注意事项" class="headerlink" title="升级OpenSSH的注意事项"></a>升级OpenSSH的注意事项</h1><blockquote>
<p>首先列出7.4及以下openssh版本存在的部分漏洞：<br>     OpenSSH 远程权限提升漏洞(CVE-2016-10010)<br>     OpenSSH J-PAKE授权问题漏洞(CVE-2010-4478)<br>     Openssh MaxAuthTries限制绕过漏洞(CVE-2015-5600)</p>
</blockquote>
<ol>
<li>openssl不可以选用1.1.X 版本，否则openssh编译时会报错</li>
<li>升级之前最好先把telnet开起来，防止意外导致ssh无法连接，需要下载telent、telent-server、xinetd</li>
<li>为了保险起见，建议安装lrzsz-0.12.20-27.1.el6.x86_64.rpm，下载地址：<br> <a href="https://centos.pkgs.org/6/centos-x86_64/lrzsz-0.12.20-27.1.el6.x86_64.rpm.html" target="_blank" rel="external">https://centos.pkgs.org/6/centos-x86_64/lrzsz-0.12.20-27.1.el6.x86_64.rpm.html</a></li>
<li>升级OpenSSH7.5p1需要的依赖包及其最低版本见下表：</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">安装顺序</th>
<th>依赖包</th>
<th>需要版本</th>
<th>下载地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td>zlib</td>
<td>&gt;=1.2.8，建议安装zlib-1.2.11</td>
<td><a href="http://zlib.net/" target="_blank" rel="external">http://zlib.net/</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>pam</td>
<td>&gt;=1.1.1-13，CentOS65默认即是1.1.1-17</td>
<td><a href="http://www.linuxfromscratch.org/blfs/view/svn/postlfs/linux-pam.html" target="_blank" rel="external">http://www.linuxfromscratch.org/blfs/view/svn/postlfs/linux-pam.html</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>pam-devel</td>
<td>&gt;=1.1.1-13，CentOS65默认即是1.1.1-17</td>
<td><a href="http://www.linuxfromscratch.org/blfs/view/svn/postlfs/linux-pam.html" target="_blank" rel="external">http://www.linuxfromscratch.org/blfs/view/svn/postlfs/linux-pam.html</a></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td>openssl</td>
<td>&gt;=1.0.1e，建议安装 openssl-1.0.2l,但不可安装1.1.X 版本</td>
<td><a href="https://www.openssl.org/source/" target="_blank" rel="external">https://www.openssl.org/source/</a></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td>openssh</td>
<td>7.5p1</td>
<td><a href="https://openbsd.hk/pub/OpenBSD/OpenSSH/portable/openssh-7.5p1.tar.gz" target="_blank" rel="external">https://openbsd.hk/pub/OpenBSD/OpenSSH/portable/openssh-7.5p1.tar.gz</a></td>
</tr>
</tbody>
</table>
<ol>
<li>查看升级前的ssh版本的命令<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#ssh</span> -v</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/openSSH_1.jpg" alt="查看升级前的ssh版本"></p>
<ol>
<li>查看是否安装了软件及其版本的命令 <figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># rpm -qa | grep xxx</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="升级OpenSSH前的准备工作"><a href="#升级OpenSSH前的准备工作" class="headerlink" title="升级OpenSSH前的准备工作"></a>升级OpenSSH前的准备工作</h1><h2 id="安装telent"><a href="#安装telent" class="headerlink" title="安装telent"></a>安装telent</h2><p><strong>升级OpenSSH前首先必须安装telnet</strong>，再进行后续升级操作<br>原因：避免升级过程中服务器意外重启后无法远程登录系统<br>具体操作：需要下载telent、telent-server、xinetd, 并配置telnet服务开机自启动</p>
<h3 id="安装xinted与telnet"><a href="#安装xinted与telnet" class="headerlink" title="安装xinted与telnet"></a>安装xinted与telnet</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装tenlet的必备依赖包</span></div><div class="line"># rpm -ivh xinetd<span class="number">-2.3</span><span class="number">.14</span><span class="number">-39.</span>el6_4.x86_64.rpm</div><div class="line"><span class="comment">//安装telnet</span></div><div class="line"># rpm -ivh telnet-server<span class="number">-0.17</span><span class="number">-47.</span>el6_3<span class="number">.1</span>.x86_64.rpm  telnet<span class="number">-0.17</span><span class="number">-47.</span>el6_3<span class="number">.1</span>.x86_64.rpm</div></pre></td></tr></table></figure>
<p>上述两个命令的截图如下：<br><img src="/images/openSSH_2.jpg" alt="安装xinted与telnet"></p>
<h3 id="启动telnet服务"><a href="#启动telnet服务" class="headerlink" title="启动telnet服务"></a>启动telnet服务</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># vi /etc/xinetd.d/telnet  </span></div><div class="line"><span class="comment">// 将其中disable字段的yes改为no以允许root用户通过telnet登录</span></div><div class="line"></div><div class="line">mv <span class="meta-keyword">/etc/</span>securetty <span class="meta-keyword">/etc/</span>securetty.old <span class="comment">// 备份文件</span></div><div class="line"></div><div class="line"><span class="meta"># service xinetd start <span class="comment">//启动telnet服务</span></span></div><div class="line"></div><div class="line"><span class="meta"># chkconfig xinetd on </span></div><div class="line"><span class="comment">// 使telnet服务开机启动，避免升级过程中服务器意外重启后无法远程登录系统</span></div></pre></td></tr></table></figure>
<p>上述四个命令的截图如下：<br><img src="/images/openSSH_3.jpg" alt="启动telnet服务"></p>
<h3 id="测试telnet能否正常登入系统"><a href="#测试telnet能否正常登入系统" class="headerlink" title="测试telnet能否正常登入系统"></a>测试telnet能否正常登入系统</h3><p>在本机的cmd中输入如下命令<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; telnet 虚拟机的<span class="built_in">IP</span>地址</div></pre></td></tr></table></figure></p>
<p>如果出现下图中的login的提示符，输入用户名和密码后能够登陆到服务器，说明telent安装、启动成功</p>
<p><img src="/images/openSSH_4.jpg" alt="测试telnet能否正常登入系统"></p>
<h2 id="安装lrzsz"><a href="#安装lrzsz" class="headerlink" title="安装lrzsz"></a>安装lrzsz</h2><p>为保证后续安装过程中能够上传文件，最好安装lrzsz，安装命令如下：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装lrzsz</span></div><div class="line"><span class="meta"># rpm -ivh lrzsz-0.12.20-27.1.el6.x86_64.rpm</span></div><div class="line"><span class="comment">//测试是否安装成功，输入如下命令，</span></div><div class="line"><span class="comment">//查看是否弹出如下图的本地上传文件界面，以及上传文件是否成功。</span></div><div class="line"><span class="meta"># rz</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/openSSH_5.jpg" alt="测试安装lrzsz是否成功"></p>
<h1 id="升级OpenSSH的依赖包"><a href="#升级OpenSSH的依赖包" class="headerlink" title="升级OpenSSH的依赖包"></a>升级OpenSSH的依赖包</h1><h2 id="升级zlib"><a href="#升级zlib" class="headerlink" title="升级zlib"></a>升级zlib</h2><p>OpenSSH7.5P1不支持zlib&lt;=1.2.8以下的版本，因此需要升级zlib到1.2.11版本，升级步骤如下：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># tar zxvf zlib-1.2.11.tar.gz</span></div><div class="line"><span class="meta"># cd zlib-1.2.11</span></div><div class="line"><span class="meta"># ./configure</span></div><div class="line"><span class="meta"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure></p>
<p>升级过程的截图如下：<br><img src="/images/openSSH_6.jpg" alt="升级zlib过程"><br>安装成功完成截图如下：<br><img src="/images/openSSH_7.jpg" alt="升级zlib成功完成"></p>
<h2 id="安装pam和pam-devel"><a href="#安装pam和pam-devel" class="headerlink" title="安装pam和pam-devel"></a>安装pam和pam-devel</h2><p>安装OpenSSH7.5P1需要pam和pam-devel包的支持，版本号&gt;=1.1.1-13即可。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查看安装的pam包及其版本</span></div><div class="line"><span class="meta"># rpm -qa | grep pam</span></div><div class="line"><span class="comment">//如果未发现pam，或者发现只有pam-1.1.1-X.el6.x86_64，</span></div><div class="line"><span class="comment">//则需要安装pam-devel-1.1.1-X.el6.x86_64.rpm（其中X&gt;=1.1.1-13）</span></div><div class="line"><span class="comment">//如果未安装，则在编译OpenSSH时会出现如下错误：</span></div><div class="line"><span class="comment">//configure: error: PAM headers not found</span></div><div class="line"></div><div class="line"><span class="comment">//安装pam-devel包的命令如下:</span></div><div class="line"><span class="meta"># rpm -ivh pam-devel-XXX</span></div></pre></td></tr></table></figure></p>
<p>安装过程的截图如下：<br><img src="/images/openSSH_8.jpg" alt="安装pam和pam-devel完成"></p>
<h1 id="升级OpenSSH的过程"><a href="#升级OpenSSH的过程" class="headerlink" title="升级OpenSSH的过程"></a>升级OpenSSH的过程</h1><h2 id="升级openssl"><a href="#升级openssl" class="headerlink" title="升级openssl"></a>升级openssl</h2><p>OpenSSH7.5P1不支持openssl&lt;=1.0.1e以下的版本，因此需要升级openssl，升级步骤如下：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查看旧版本的ssh</span></div><div class="line"><span class="meta"># ssh -V</span></div><div class="line"><span class="comment">// 查找当前openssl文件并备份</span></div><div class="line"><span class="meta"># find / -name openssl</span></div><div class="line"><span class="meta"># mv /usr/lib64/openssl /usr/lib64/openssl.old</span></div><div class="line"><span class="meta"># mv /usr/bin/openssl /usr/bin/openssl.old</span></div><div class="line"><span class="meta"># cp  /usr/lib64/libcrypto.so.10  /usr/lib64/libcrypto.so.10.old</span></div><div class="line"><span class="meta"># cp  /usr/lib64/libssl.so.10  /usr/lib64/libssl.so.10.old</span></div><div class="line"><span class="comment">//卸载旧版本openssl</span></div><div class="line"><span class="meta"># rpm -e --nodeps `rpm -qa|grep openssl` </span></div><div class="line"><span class="comment">// 查看是否卸载成功   </span></div><div class="line"><span class="meta"># rpm -qa|grep openssl</span></div></pre></td></tr></table></figure></p>
<p>上述命令的截图如下：<br><img src="/images/openSSH_9.jpg" alt="卸载旧版本openssl"></p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//编译安装新版本openssl</span></div><div class="line"><span class="meta"># tar zxvf openssl-1.0.2l.tar.gz</span></div><div class="line"><span class="meta"># cd openssl-1.0.2l</span></div><div class="line"><span class="meta"># ./config --prefix=/usr --shared &amp;&amp; make &amp;&amp; make install </span></div><div class="line"></div><div class="line"><span class="comment">//安装完成后，验证版本信息</span></div><div class="line"><span class="meta"># openssl version -a</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：编译文件时可能报如下错<br>make[1]: gcc: Command not found—-gcc未找到<br>解决办法：上传并安装如下gcc等相关依赖包</p>
</blockquote>
<p>安装openssl过程及成功的截图如下：<br><img src="/images/openSSH_10.jpg" alt="安装openssl过程及成功"></p>
<p>如果出现最新版本信息说明升级openssl成功。</p>
<h2 id="安装OpenSSH"><a href="#安装OpenSSH" class="headerlink" title="安装OpenSSH"></a>安装OpenSSH</h2><p>停止当前ssh服务，并备份<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># service sshd stop  <span class="comment">//停止服务</span></div><div class="line"># mv <span class="regexp">/etc/</span>ssh<span class="regexp">/ /</span>home<span class="regexp">/ssh-bak  /</span><span class="regexp">/备份旧ssh配置文件 /</span>etc<span class="regexp">/ssh</span></div></pre></td></tr></table></figure></p>
<p>卸载现有版本<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># rpm -e --nodeps `rpm -qa | grep openssh`</span></div><div class="line"><span class="meta"># rpm -qa | grep openssh</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/openSSH_11.jpg" alt="卸载旧版本openssh"></p>
<p>安装新版本的OpenSSH<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># tar xzvf openssh-7.5p1.tar.gz</span></div><div class="line"><span class="meta"># cd openssh-7.5p1</span></div><div class="line"><span class="comment">//编译（同时兼容ssh1协议）</span></div><div class="line"><span class="meta"># ./configure --prefix=/usr  --sysconfdir=/etc/ssh  --with-md5-passwords  --with-pam  --with-ssh1  --with-zlib --with-openssl-includes=/usr --with-privsep-path=/var/lib/sshd</span></div><div class="line"><span class="meta"># make</span></div><div class="line"><span class="meta"># make install</span></div><div class="line"></div><div class="line"><span class="comment">//安装完成后，验证版本信息</span></div><div class="line"><span class="meta"># ssh -v</span></div></pre></td></tr></table></figure></p>
<p>编译的截图如下：<br><img src="/images/openSSH_12.jpg" alt="编译"><br>make的截图如下：<br><img src="/images/openSSH_13.jpg" alt="make"><br>安装成功的截图如下：<br><img src="/images/openSSH_14.jpg" alt="安装成功"></p>
<p>如果出现最新版本信息说明升级openssh成功。</p>
<h1 id="升级OpenSSH成功后的配置"><a href="#升级OpenSSH成功后的配置" class="headerlink" title="升级OpenSSH成功后的配置"></a>升级OpenSSH成功后的配置</h1><h2 id="升级OpenSSH成功后的配置-1"><a href="#升级OpenSSH成功后的配置-1" class="headerlink" title="升级OpenSSH成功后的配置"></a>升级OpenSSH成功后的配置</h2><p>升级OpenSSH成功后，还需要进行一些环境配置<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//复制启动脚本：</span></div><div class="line"><span class="meta"># cp contrib/redhat/sshd.init /etc/init.d/sshd</span></div><div class="line"><span class="meta"># chmod +x /etc/init.d/sshd</span></div><div class="line"><span class="comment">//设置开机启动：</span></div><div class="line"><span class="meta"># chkconfig --add sshd</span></div><div class="line"><span class="meta"># chkconfig sshd on</span></div><div class="line"><span class="comment">//编辑ssh配置文件，添加PermitRootLogin yes、PasswordAuthentication yes到文件末尾</span></div><div class="line"><span class="meta"># vi /etc/ssh/sshd_config</span></div><div class="line">    PasswordAuthentication yes</div><div class="line">    PermitRootLogin yes</div><div class="line"></div><div class="line"><span class="comment">//启动ssh服务</span></div><div class="line"><span class="meta"># service sshd start</span></div><div class="line"></div><div class="line"><span class="comment">//验证版本信息：</span></div><div class="line"><span class="meta"># ssh -V</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/openSSH_15.jpg" alt="环境配置成功"></p>
<h2 id="测试openssh"><a href="#测试openssh" class="headerlink" title="测试openssh"></a>测试openssh</h2><p>使用Xshell重新登录服务器，出现如下图所示界面，说明版本已经升级成功<br><img src="/images/openSSH_16.jpg" alt="测试openssh"></p>
<h2 id="重启系统验证没问题后关闭telnet服务"><a href="#重启系统验证没问题后关闭telnet服务" class="headerlink" title="重启系统验证没问题后关闭telnet服务"></a>重启系统验证没问题后关闭telnet服务</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># mv /etc/securetty.old /etc/securetty</span></div><div class="line"><span class="meta"># chkconfig  xinetd off</span></div><div class="line"><span class="meta"># service xinetd stop</span></div></pre></td></tr></table></figure>
<p><img src="/images/openSSH_18.jpg" alt="重启系统验证没问题"></p>
<h1 id="升级SSH过程中遇到的问题及其解决办法"><a href="#升级SSH过程中遇到的问题及其解决办法" class="headerlink" title="升级SSH过程中遇到的问题及其解决办法"></a>升级SSH过程中遇到的问题及其解决办法</h1><h2 id="OpenSSH升级后xshell无法远程登入的解决办法"><a href="#OpenSSH升级后xshell无法远程登入的解决办法" class="headerlink" title="OpenSSH升级后xshell无法远程登入的解决办法"></a>OpenSSH升级后xshell无法远程登入的解决办法</h2><p>升级完成OpenSSH后，使用Xshell无法登陆服务器，导致此问题的原因是ssh升级后，为了安全，默认不在采用原来一些不太安全的加密算法，我们手工添加进去即可；</p>
<blockquote>
<p>解决办法：修改ssh的配置文件 /etc/ssh/sshd_config，在配置文件中如下代码</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Ciphers</span> <span class="selector-tag">aes128-cbc</span>,<span class="selector-tag">aes192-cbc</span>,<span class="selector-tag">aes256-cbc</span>,<span class="selector-tag">aes128-ctr</span>,<span class="selector-tag">aes192-ctr</span>,<span class="selector-tag">aes256-ctr</span>,3<span class="selector-tag">des-cbc</span>,<span class="selector-tag">arcfour128</span>,<span class="selector-tag">arcfour256</span>,<span class="selector-tag">arcfour</span>,<span class="selector-tag">blowfish-cbc</span>,<span class="selector-tag">cast128-cbc</span></div><div class="line"><span class="selector-tag">MACs</span> <span class="selector-tag">hmac-md5</span>,<span class="selector-tag">hmac-sha1</span>,<span class="selector-tag">umac-64</span>@<span class="keyword">openssh</span>.<span class="keyword">com</span>,<span class="keyword">hmac</span>-<span class="keyword">ripemd160</span>,<span class="keyword">hmac</span>-<span class="keyword">sha1</span>-<span class="keyword">96</span>,<span class="keyword">hmac</span>-<span class="keyword">md5</span>-<span class="keyword">96</span></div><div class="line">KexAlgorithms diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256</div></pre></td></tr></table></figure>
<p>添加位置如下图：<br><img src="/images/openSSH_17.jpg" alt="无法远程登入"><br>添加后，重启sshd服务后，即可正常连接。</p>
<h2 id="使用xshell登录到linux主机上时会出现“The-remote-SSH-server-rejected-X11-forwarding-request-”警告的解决办法"><a href="#使用xshell登录到linux主机上时会出现“The-remote-SSH-server-rejected-X11-forwarding-request-”警告的解决办法" class="headerlink" title="使用xshell登录到linux主机上时会出现“The  remote SSH server rejected X11 forwarding request.”警告的解决办法"></a>使用xshell登录到linux主机上时会出现“The  remote SSH server rejected X11 forwarding request.”警告的解决办法</h2><p>问题描述及解决办法如下图：<br><img src="/images/openSSH_19.jpg" alt="警告"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何使用hexo搭建github博客]]></title>
      <url>https://aiolos123.github.io/2016/08/21/how-to-deploy-github-blog-with-hexo/</url>
      <content type="html"><![CDATA[<p>作为本人在github上的第一篇文档，本文详细讲解一下我是如何利用hexo在github上搭建博客的。算是送给自己的一份special gift。<br><a id="more"></a></p>
<p>特别感谢如下博客提供的帮助，为我解决了许多问题：<br><a href="http://www.tuicool.com/articles/ueI7naV" target="_blank" rel="external">http://www.tuicool.com/articles/ueI7naV</a></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="全局安装Hexo"><a href="#全局安装Hexo" class="headerlink" title="全局安装Hexo"></a>全局安装Hexo</h3><p>Hexo是基于Node的，所以首先要安装Node(安装过程略)，然后再全局安装Hexo，即加-g参数，安装命令如下：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install hexo-<span class="keyword">cli</span> -g</div></pre></td></tr></table></figure>
<p>本人系统的node版本和hexo安装过程截图如下：<br><img src="/images/hexo_1.jpg" alt="node版本和hexo安装过程图"></p>
<h3 id="校验hexo是否安装成功"><a href="#校验hexo是否安装成功" class="headerlink" title="校验hexo是否安装成功"></a>校验hexo是否安装成功</h3><p>安装完成后，通过如下命令查看是否安装成功</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="built_in">version</span></div></pre></td></tr></table></figure>
<p>执行过程如下图：<br><img src="/images/hexo_2.jpg" alt="查看hexo是否安装成功图"></p>
<h3 id="创建Hexo项目"><a href="#创建Hexo项目" class="headerlink" title="创建Hexo项目"></a>创建Hexo项目</h3><p>安装好后，我们就可以使用Hexo创建项目了。进入到一个目录后，执行如下命令<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo init <span class="string">[目标文件夹名]</span></div></pre></td></tr></table></figure></p>
<p>Hexo即会自动在目标文件夹内建立网站所需要的所有文件。执行过程如下图：<br><img src="/images/hexo_3.jpg" alt="Hexo创建项目过程图"></p>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>切换到该目录，运行如下命名安装依赖包<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm <span class="keyword">install</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/hexo_4.jpg" alt="安装依赖包"></p>
<h3 id="启动Hexo服务器，本地查看"><a href="#启动Hexo服务器，本地查看" class="headerlink" title="启动Hexo服务器，本地查看"></a>启动Hexo服务器，本地查看</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="keyword">server</span>  <span class="comment">//或者hexo s</span></div></pre></td></tr></table></figure>
<p>打开浏览器，输入 http:localhost:4000 回车就看到如下界面<br><img src="/images/hexo_5.jpg" alt="启动Hexo服务器"></p>
<p>至此，Hexo在本地已经搭建起来了，下一步需要对hexo进行适当配置。</p>
<h2 id="Hexo的配置"><a href="#Hexo的配置" class="headerlink" title="Hexo的配置"></a>Hexo的配置</h2><h3 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a>目录和文件</h3><p>安装完成的Hexo的目录结构如下图<br><img src="/images/hexo_6.jpg" alt="Hexo的目录结构"><br>其中：<br>    source ：为资源文件夹，用于存放用户资源的地方。<br>    source/_post ：为文件箱。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件/ 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。<br>    themes ：为主题文件夹。Hexo会根据主题来生成静态页面。<br>    _config.yml ：为全局的配置文件，每次更改要重启服务。  </p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>在_config.yml 中只需修改site部分和url部分即可，其他保持默认：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Site 站点配置</span></div><div class="line"><span class="symbol">title:</span> Hexo-demo <span class="meta">#网站标题</span></div><div class="line"><span class="symbol">subtitle:</span> hexo is simple <span class="keyword">and</span> easy to study <span class="meta">#网站副标题</span></div><div class="line"><span class="symbol">description:</span> this is hexo-demo <span class="meta">#网栈描述</span></div><div class="line"><span class="symbol">author:</span> pomy <span class="meta">#你的名字</span></div><div class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Hans <span class="meta">#网站使用的语言</span></div><div class="line"><span class="symbol">timezone:</span> Asia/Shanghai <span class="meta">#网站时区</span></div><div class="line"></div><div class="line"><span class="meta"># URL</span></div><div class="line"><span class="meta">## If your site is put in a subdirectory, </span></div><div class="line"><span class="meta">## set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="symbol">url:</span> https://aiolos123.github.io/  <span class="meta">#网址</span></div><div class="line"><span class="symbol">root:</span> / <span class="meta">#网站根目录</span></div><div class="line"><span class="symbol">permalink:</span> :year/:month/:day/:title/ <span class="meta">#永久链接格式</span></div><div class="line"><span class="symbol">permalink_defaults:</span> <span class="meta">#永久链接中各部分的默认值</span></div></pre></td></tr></table></figure></p>
<p><strong>修改全局配置文件时，注意缩进，同时注意冒号后面要有一个空格。</strong></p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>见第6章  《更改主题》</p>
<h2 id="Hexo的基本使用"><a href="#Hexo的基本使用" class="headerlink" title="Hexo的基本使用"></a>Hexo的基本使用</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>通过 new 命令新建一篇文章：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt; </div><div class="line"><span class="comment">//其中layout是可选参数，默认值为post。</span></div><div class="line"><span class="comment">//或hexo n</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/hexo_7.jpg" alt="新建文章"><br>新建的文件则会保存到source/_post目录下。打开后即可编辑<br><img src="/images/hexo_8.jpg" alt="编辑文章"><br>编辑完成后，启动服务器，便能看到刚刚发表的文章<br><img src="/images/hexo_9.jpg" alt="查看文章"></p>
<p>下一步需要将其部署到github上。</p>
<h2 id="github-创建博客"><a href="#github-创建博客" class="headerlink" title="github 创建博客"></a>github 创建博客</h2><p>以下内容参考自 <a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="external">http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html</a></p>
<h3 id="创建页面仓库"><a href="#创建页面仓库" class="headerlink" title="创建页面仓库"></a>创建页面仓库</h3><p>登录github后(没有账号的请自行注册，本文略)，点击右上角的new repository新建仓库。<br><strong>注：这个仓库的名字必须与你的账号对应，格式: github账号.github.io</strong><br>输入基本信息，然后点击创建仓库。操作过程如下图(图片来源于<a href="http://www.jianshu.com/p/701b1095da11" target="_blank" rel="external">http://www.jianshu.com/p/701b1095da11</a>)<br><img src="/images/hexo_10.jpg" alt="新建仓库"></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在刚刚创建的Repository下，找到http clone url，如下图：<br><img src="/images/hexo_11.jpg" alt=""><br>将其中的url地址复制到全局配置文件的deploy项的repository后<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">deploy:</span></div><div class="line"><span class="symbol">  type:</span> git</div><div class="line"><span class="symbol">  repository:</span> <span class="meta">#上述复制的url</span></div><div class="line"><span class="symbol">  branch:</span> master</div></pre></td></tr></table></figure></p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>以下内容参考自 <a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="external">http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html</a></p>
<h4 id="使用Git-Bash生成ssh-key，命令如下"><a href="#使用Git-Bash生成ssh-key，命令如下" class="headerlink" title="使用Git Bash生成ssh key，命令如下"></a>使用Git Bash生成ssh key，命令如下</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">cd</span> <span class="regexp">~  #保证当前路径在”~”下</span></div><div class="line">ssh-keygen -t rsa -C <span class="string">"xxxxxx<span class="variable">@yy</span>.com"</span>  <span class="comment">#建议填写自己真实有效的邮箱地址</span></div></pre></td></tr></table></figure>
<p>执行过程如下图(填写密码处直接回车)：<br><img src="/images/hexo_12.jpg" alt="生成ssh key"></p>
<h4 id="添加ssh-key到GItHub"><a href="#添加ssh-key到GItHub" class="headerlink" title="添加ssh key到GItHub"></a>添加ssh key到GItHub</h4><p>登录GitHub系统；点击右上角账号头像的“▼”→Settings→SSH kyes→Add SSH key。<br><img src="/images/hexo_13.jpg" alt="添加ssh key到GItHub"></p>
<p>打开c:/Users/xxxx_000/.ssh/目录下的id_rsa.pub文件，全选复制公钥内容。将公钥粘贴到GitHub中Add an SSH key的key输入框，Title自定义，最后点击“Add Key”。</p>
<h4 id="配置账户"><a href="#配置账户" class="headerlink" title="配置账户"></a>配置账户</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> user.name “your_username”  <span class="meta">#设置用户名</span></div><div class="line">git config --<span class="keyword">global</span> user.email “your_registered_github_Email”  <span class="meta">#设置邮箱地址(建议用注册giuhub的邮箱)</span></div></pre></td></tr></table></figure>
<h4 id="测试ssh-keys是否设置成功"><a href="#测试ssh-keys是否设置成功" class="headerlink" title="测试ssh keys是否设置成功"></a>测试ssh keys是否设置成功</h4><p>输入如下命令<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/hexo_14.jpg" alt="配置账户"><br>如上图，如果出现Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 这句话，说明设置成功。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>最后一步就是部署博客到github上</p>
<h3 id="静态化"><a href="#静态化" class="headerlink" title="静态化"></a>静态化</h3><p>在部署之前，需要通过命令把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。<br>使用的命令为：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;hexo <span class="keyword">generate</span></div><div class="line"><span class="comment">//或hexo g</span></div></pre></td></tr></table></figure></p>
<p>在当前目录下，会生成一个public的目录，里面包括了所有静态化的文件。</p>
<p><img src="/images/hexo_15.jpg" alt="静态化文件"></p>
<h3 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h3><p>生成静态文件之后，如果要发布到github，还需要安装 hexo-deployer-git<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git -S</div></pre></td></tr></table></figure></p>
<p>执行过程如下图：<br><img src="/images/hexo_16.jpg" alt="安装deploygit"><br><strong>强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy文件夹</strong>，命名如下：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo clean</span></div></pre></td></tr></table></figure></p>
<p>然后，使用如下命令进行部署<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy  <span class="comment">//或hexo d</span></div></pre></td></tr></table></figure></p>
<p>执行过程如下图<br><img src="/images/hexo_17.jpg" alt="部署"></p>
<p>然后，在github上便能看到刚刚部署的静态web网站：<br><img src="/images/hexo_18.jpg" alt="部署成功"><br>现在，我们的博客就已经完全搭建起来了，在浏览器输入博客地址，即可查看。</p>
<h3 id="后期维护"><a href="#后期维护" class="headerlink" title="后期维护"></a>后期维护</h3><p>每次修改本地文件后，需要键入hexo generate才能保存。每次使用命令时，都要在Hexo目录下。每次想要上传文件到Github时，就应该先键入hexo generate保存之后，再键入hexo deploy。大概成功之后是酱紫的：<br><img src="/images/hexo_19.jpg" alt="部署成功"></p>
<h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>如果觉得默认的主题不好，可自己更换一个主题，步骤如下。</p>
<h3 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h3><p>本人选用next主题，故参考如下地址内容即可<br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a> </p>
<p>安装完成的next主题如下：<br><img src="/images/hexo_20.jpg" alt="安装完成的next主题"></p>
<h4 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h4><p>更改主题配置文件中的 highlight_theme 字段，将其值设定成你所喜爱的高亮主题。NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Code Highlight theme</span></div><div class="line"><span class="symbol">highlight_theme:</span> normal</div></pre></td></tr></table></figure></p>
<h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h4><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。配置如下：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Han</div></pre></td></tr></table></figure></p>
<h3 id="集成第三方服务"><a href="#集成第三方服务" class="headerlink" title="集成第三方服务"></a>集成第三方服务</h3><h4 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h4><p>在 站点配置文件 中新增 duoshuo_shortname 字段，值设置成多说域名的第一个.前的值。<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">duoshuo_shortname:</span> iissnan-notes</div></pre></td></tr></table></figure></p>
<h4 id="本地检索"><a href="#本地检索" class="headerlink" title="本地检索"></a>本地检索</h4><p>安装 hexo-generator-search，在站点的根目录下执行以下命令：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install hexo-generator-<span class="keyword">search</span> --<span class="keyword">save</span></div></pre></td></tr></table></figure></p>
<p>编辑 站点配置文件，新增以下内容到任意位置：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.<span class="keyword">xml</span></div><div class="line">  <span class="title">field</span>: post</div></pre></td></tr></table></figure></p>
<p>更多next主题内容请参考：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
<h2 id="hexo文章中插入图片"><a href="#hexo文章中插入图片" class="headerlink" title="hexo文章中插入图片"></a>hexo文章中插入图片</h2><p>在hexo中使用markdown写文章，插入图片有两种方式：<br>1、使用本地路径：在hexo/source目录下新建一个images文件夹，将图片放入该文件夹下，插入图片时链接即为<code>/images/图片名称</code></p>
<p>2、使用图床上传图片  <a href="http://tuchuang.org/" target="_blank" rel="external">http://tuchuang.org/</a></p>
]]></content>
    </entry>
    
  
  
</search>
