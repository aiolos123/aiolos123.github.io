<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[SSM-01-在IntelliJIDEA中创建基于Maven构建的Web项目]]></title>
      <url>https://aiolos123.github.io/2017/03/02/SSM-01-%E5%9C%A8IntelliJIDEA%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%9F%BA%E4%BA%8EMaven%E6%9E%84%E5%BB%BA%E7%9A%84Web%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>本文以图文形式介绍如何使用IntelliJ IDEA创建基于Maven构建的Web项目的过程<br><a id="more"></a></p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><pre><code>IntelliJ IDEA: 2016.3.4 Ultimate
JDK: 1.8.0_20
Maven: 3.3.9
</code></pre><p>开发环境的下载及配置请自行百度</p>
<h2 id="基于Maven构建的Web项目的步骤"><a href="#基于Maven构建的Web项目的步骤" class="headerlink" title="基于Maven构建的Web项目的步骤"></a>基于Maven构建的Web项目的步骤</h2><p>1、如果是第一次打开软件直接点击 Create New Project ，如果之前已经打开过项目了，需要点击菜单中 File → New Project … 如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-1.jpg" alt=""><br>2、选择Maven，配置jdk、选中Create from archetype,从列表中选择web app骨架，如下图，再点击 Next：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-2.jpg" alt=""><br>3、编辑 GroupId、ArtifactId即包名、模块名 ，点击Next 如下：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-3.jpg" alt=""><br>4、选择本地安装的Maven即其配置，确认信息正确后点击Next 如下：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-4.jpg" alt=""><br>注：为了加快maven的构建，可添加本地的archetypeCatalog=local<br>5、输入项目名称和路径，点击 Finish 按钮即可生成项目，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-5.jpg" alt=""><br>6、待maven下载导入成功后，生成的项目结构如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-6.jpg" alt=""><br>至此，项目已经创建完成，下面开始配置 Tomcat服务</p>
<h2 id="配置Tomcat服务"><a href="#配置Tomcat服务" class="headerlink" title="配置Tomcat服务"></a>配置Tomcat服务</h2><p>7、点击工具栏中的向下箭头的图标（如下图 红框标注）或者点击菜单栏中的 Run → Edit Configurations…  如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-7.jpg" alt=""><br>8、在Edit Configurations界面，点击左上角红色标注的 + 按钮，选择 Tomcat Server → Local  如下图:<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-8.jpg" alt=""><br>9、在该配置页面，输入名称（随便取比如 tomcat8）、配置tomcat 本地环境以及相应端口后，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-9.jpg" alt=""><br>10、再点击 页签 Deployment，点击 + 选择 Artifact …，选择需要发布的应用，点击 OK 按钮，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-10.jpg" alt=""><br>11、编辑 Application Context 的名称(一般建议与项目名相同)，点击OK按钮即完成Tomcat 配置。<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-11.jpg" alt=""></p>
<h2 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h2><p>12、双击打开 index.jsp 并编辑，点击下图中标注的绿色启动按钮，即可发布相关应用：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-12.jpg" alt=""><br>13、启动正常应该看到如下信息：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-13.jpg" alt=""><br>14、启动后会自动跳转到浏览器,看到如下内容：<br><img src="http://ocej2soxx.bkt.clouddn.com/SSM-01-14.jpg" alt=""><br>到此已经完成了项目创建、Tomcat配置、项目发布等过程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2017个人成长计划]]></title>
      <url>https://aiolos123.github.io/2017/01/07/2017%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p>一直以来，心中都有一个编程大神梦，但无法静下心来研究、学习的毛病，使得自己浪费了太多的时间、又一事无成。2017年，决定从头开始，为了心中的梦想，启程！<br><a id="more"></a></p>
<h2 id="博客上写什么"><a href="#博客上写什么" class="headerlink" title="博客上写什么"></a>博客上写什么</h2><p>虽然过去基本上也是天天在学习，可是在博客上只是记录一下别人讲解的内容，从未总结出自己的东西。所以虽写的东西很多，可真正掌握的知识很少！</p>
<hr>
<p>从这篇博客开始，为自己定一个小目标：</p>
<pre><code>学别人的知识，写自己的总结
</code></pre><h2 id="座右铭"><a href="#座右铭" class="headerlink" title="座右铭"></a>座右铭</h2><ul>
<li>正确的方向、高效的努力</li>
</ul>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>手出好程序</li>
<li>脑出好算法</li>
<li>成为开发界的神</li>
</ul>
<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ul>
<li>Java Web知识：到2017/7/1，半年时间内熟练掌握JavaWeb知识、SSM框架</li>
<li>Java Web项目：到2017/12/31，利用SSM开发项目来巩固、理解学到的知识</li>
<li>博客：在博客上编写个人原创学习总结</li>
</ul>
<h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><p>进入一个新技术领域的学习路径都类似的：</p>
<pre><code>掌握用法--&gt;深入理解--&gt;不断实践--&gt;反复总结--&gt;再次深入理解与实践、总结
</code></pre><p>1.初学搜集资料（搜索引擎，在线书店，各种博客），有多少消化多少，不必太在意资料是不是最优最好，方法是不是所谓”合理“，自己能学进去就好<br>2.一旦理解领域基础，就要开始试验，专心一个平台，用具体结果印证所学概念<br>3.进入熟悉阶段以后，可以继续深入学核心概念和工具，这时候继续搜集资料，但在选定话题内<br>4.“熟悉”是一个漫长的过程，这时候把能看的书都看了，一下子看不完的，比如数学，放着需要的时候补<br>5.然后把知识和实践拓宽到这个领域的整个生态，获得真正“全面”的认识</p>
<h2 id="我的学习记录"><a href="#我的学习记录" class="headerlink" title="我的学习记录"></a>我的学习记录</h2><p>待更新…</p>
<p>目前阶段：2-试验阶段</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何使用hexo搭建github博客]]></title>
      <url>https://aiolos123.github.io/2016/08/21/how-to-deploy-github-blog-with-hexo/</url>
      <content type="html"><![CDATA[<p>作为本人在github上的第一篇文档，本文详细讲解一下我是如何利用hexo在github上搭建博客的。算是送给自己的一份special gift。<br><a id="more"></a></p>
<p>特别感谢如下博客提供的帮助，为我解决了许多问题：<br><a href="http://www.tuicool.com/articles/ueI7naV" target="_blank" rel="external">http://www.tuicool.com/articles/ueI7naV</a></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="全局安装Hexo"><a href="#全局安装Hexo" class="headerlink" title="全局安装Hexo"></a>全局安装Hexo</h3><p>Hexo是基于Node的，所以首先要安装Node(安装过程略)，然后再全局安装Hexo，即加-g参数，安装命令如下：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install hexo-<span class="keyword">cli</span> -g</div></pre></td></tr></table></figure>
<p>本人系统的node版本和hexo安装过程截图如下：<br><img src="http://ocej2soxx.bkt.clouddn.com/g1.jpg" alt="node版本和hexo安装过程图"></p>
<h3 id="校验hexo是否安装成功"><a href="#校验hexo是否安装成功" class="headerlink" title="校验hexo是否安装成功"></a>校验hexo是否安装成功</h3><p>安装完成后，通过如下命令查看是否安装成功</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="built_in">version</span></div></pre></td></tr></table></figure>
<p>执行过程如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g2.jpg" alt="查看hexo是否安装成功图"></p>
<h3 id="创建Hexo项目"><a href="#创建Hexo项目" class="headerlink" title="创建Hexo项目"></a>创建Hexo项目</h3><p>安装好后，我们就可以使用Hexo创建项目了。进入到一个目录后，执行如下命令<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo init <span class="string">[目标文件夹名]</span></div></pre></td></tr></table></figure></p>
<p>Hexo即会自动在目标文件夹内建立网站所需要的所有文件。执行过程如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g3.jpg" alt="Hexo创建项目过程图"></p>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>切换到该目录，运行如下命名安装依赖包<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm <span class="keyword">install</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g4.jpg" alt="安装依赖包"></p>
<h3 id="启动Hexo服务器，本地查看"><a href="#启动Hexo服务器，本地查看" class="headerlink" title="启动Hexo服务器，本地查看"></a>启动Hexo服务器，本地查看</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="keyword">server</span>  <span class="comment">//或者hexo s</span></div></pre></td></tr></table></figure>
<p>打开浏览器，输入 http:localhost:4000 回车就看到如下界面<br><img src="http://ocej2soxx.bkt.clouddn.com/g5.jpg" alt="启动Hexo服务器"></p>
<p>至此，Hexo在本地已经搭建起来了，下一步需要对hexo进行适当配置。</p>
<h2 id="Hexo的配置"><a href="#Hexo的配置" class="headerlink" title="Hexo的配置"></a>Hexo的配置</h2><h3 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a>目录和文件</h3><p>安装完成的Hexo的目录结构如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/g6.jpg" alt="Hexo的目录结构"><br>其中：<br>    source ：为资源文件夹，用于存放用户资源的地方。<br>    source/_post ：为文件箱。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件/ 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。<br>    themes ：为主题文件夹。Hexo会根据主题来生成静态页面。<br>    _config.yml ：为全局的配置文件，每次更改要重启服务。  </p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>在_config.yml 中只需修改site部分和url部分即可，其他保持默认：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Site 站点配置</span></div><div class="line"><span class="symbol">title:</span> Hexo-demo <span class="meta">#网站标题</span></div><div class="line"><span class="symbol">subtitle:</span> hexo is simple <span class="keyword">and</span> easy to study <span class="meta">#网站副标题</span></div><div class="line"><span class="symbol">description:</span> this is hexo-demo <span class="meta">#网栈描述</span></div><div class="line"><span class="symbol">author:</span> pomy <span class="meta">#你的名字</span></div><div class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Hans <span class="meta">#网站使用的语言</span></div><div class="line"><span class="symbol">timezone:</span> Asia/Shanghai <span class="meta">#网站时区</span></div><div class="line"></div><div class="line"><span class="meta"># URL</span></div><div class="line"><span class="meta">## If your site is put in a subdirectory, </span></div><div class="line"><span class="meta">## set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="symbol">url:</span> https://aiolos123.github.io/  <span class="meta">#网址</span></div><div class="line"><span class="symbol">root:</span> / <span class="meta">#网站根目录</span></div><div class="line"><span class="symbol">permalink:</span> :year/:month/:day/:title/ <span class="meta">#永久链接格式</span></div><div class="line"><span class="symbol">permalink_defaults:</span> <span class="meta">#永久链接中各部分的默认值</span></div></pre></td></tr></table></figure></p>
<p><strong>修改全局配置文件时，注意缩进，同时注意冒号后面要有一个空格。</strong></p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>见第6章  《更改主题》</p>
<h2 id="Hexo的基本使用"><a href="#Hexo的基本使用" class="headerlink" title="Hexo的基本使用"></a>Hexo的基本使用</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>通过 new 命令新建一篇文章：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt; </div><div class="line"><span class="comment">//其中layout是可选参数，默认值为post。</span></div><div class="line"><span class="comment">//或hexo n</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g7.jpg" alt="新建文章"><br>新建的文件则会保存到source/_post目录下。打开后即可编辑<br><img src="http://ocej2soxx.bkt.clouddn.com/g8.jpg" alt="编辑文章"><br>编辑完成后，启动服务器，便能看到刚刚发表的文章<br><img src="http://ocej2soxx.bkt.clouddn.com/g9.jpg" alt="查看文章"></p>
<p>下一步需要将其部署到github上。</p>
<h2 id="github-创建博客"><a href="#github-创建博客" class="headerlink" title="github 创建博客"></a>github 创建博客</h2><p>以下内容参考自 <a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="external">http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html</a></p>
<h3 id="创建页面仓库"><a href="#创建页面仓库" class="headerlink" title="创建页面仓库"></a>创建页面仓库</h3><p>登录github后(没有账号的请自行注册，本文略)，点击右上角的new repository新建仓库。<br><strong>注：这个仓库的名字必须与你的账号对应，格式: github账号.github.io</strong><br>输入基本信息，然后点击创建仓库。操作过程如下图(图片来源于<a href="http://www.jianshu.com/p/701b1095da11" target="_blank" rel="external">http://www.jianshu.com/p/701b1095da11</a>)<br><img src="http://ocej2soxx.bkt.clouddn.com/g10.jpg" alt="新建仓库"></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在刚刚创建的Repository下，找到http clone url，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g11.jpg" alt=""><br>将其中的url地址复制到全局配置文件的deploy项的repository后<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">deploy:</span></div><div class="line"><span class="symbol">  type:</span> git</div><div class="line"><span class="symbol">  repository:</span> <span class="meta">#上述复制的url</span></div><div class="line"><span class="symbol">  branch:</span> master</div></pre></td></tr></table></figure></p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>以下内容参考自 <a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="external">http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html</a></p>
<h4 id="使用Git-Bash生成ssh-key，命令如下"><a href="#使用Git-Bash生成ssh-key，命令如下" class="headerlink" title="使用Git Bash生成ssh key，命令如下"></a>使用Git Bash生成ssh key，命令如下</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">cd</span> <span class="regexp">~  #保证当前路径在”~”下</span></div><div class="line">ssh-keygen -t rsa -C <span class="string">"xxxxxx<span class="variable">@yy</span>.com"</span>  <span class="comment">#建议填写自己真实有效的邮箱地址</span></div></pre></td></tr></table></figure>
<p>执行过程如下图(填写密码处直接回车)：<br><img src="http://ocej2soxx.bkt.clouddn.com/g12.jpg" alt="生成ssh key"></p>
<h4 id="添加ssh-key到GItHub"><a href="#添加ssh-key到GItHub" class="headerlink" title="添加ssh key到GItHub"></a>添加ssh key到GItHub</h4><p>登录GitHub系统；点击右上角账号头像的“▼”→Settings→SSH kyes→Add SSH key。<br><img src="http://ocej2soxx.bkt.clouddn.com/g13.jpg" alt="添加ssh key到GItHub"></p>
<p>打开c:/Users/xxxx_000/.ssh/目录下的id_rsa.pub文件，全选复制公钥内容。将公钥粘贴到GitHub中Add an SSH key的key输入框，Title自定义，最后点击“Add Key”。</p>
<h4 id="配置账户"><a href="#配置账户" class="headerlink" title="配置账户"></a>配置账户</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> user.name “your_username”  <span class="meta">#设置用户名</span></div><div class="line">git config --<span class="keyword">global</span> user.email “your_registered_github_Email”  <span class="meta">#设置邮箱地址(建议用注册giuhub的邮箱)</span></div></pre></td></tr></table></figure>
<h4 id="测试ssh-keys是否设置成功"><a href="#测试ssh-keys是否设置成功" class="headerlink" title="测试ssh keys是否设置成功"></a>测试ssh keys是否设置成功</h4><p>输入如下命令<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g14.jpg" alt="配置账户"><br>如上图，如果出现Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 这句话，说明设置成功。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>最后一步就是部署博客到github上</p>
<h3 id="静态化"><a href="#静态化" class="headerlink" title="静态化"></a>静态化</h3><p>在部署之前，需要通过命令把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。<br>使用的命令为：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;hexo <span class="keyword">generate</span></div><div class="line"><span class="comment">//或hexo g</span></div></pre></td></tr></table></figure></p>
<p>在当前目录下，会生成一个public的目录，里面包括了所有静态化的文件。</p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g15.jpg" alt="静态化文件"></p>
<h3 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h3><p>生成静态文件之后，如果要发布到github，还需要安装 hexo-deployer-git<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git -S</div></pre></td></tr></table></figure></p>
<p>执行过程如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g16.jpg" alt="安装deploygit"><br><strong>强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy文件夹</strong>，命名如下：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo clean</span></div></pre></td></tr></table></figure></p>
<p>然后，使用如下命令进行部署<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy  <span class="comment">//或hexo d</span></div></pre></td></tr></table></figure></p>
<p>执行过程如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/g17.jpg" alt="部署"></p>
<p>然后，在github上便能看到刚刚部署的静态web网站：<br><img src="http://ocej2soxx.bkt.clouddn.com/g18.jpg" alt="部署成功"><br>现在，我们的博客就已经完全搭建起来了，在浏览器输入博客地址，即可查看。</p>
<h3 id="后期维护"><a href="#后期维护" class="headerlink" title="后期维护"></a>后期维护</h3><p>每次修改本地文件后，需要键入hexo generate才能保存。每次使用命令时，都要在Hexo目录下。每次想要上传文件到Github时，就应该先键入hexo generate保存之后，再键入hexo deploy。大概成功之后是酱紫的：<br><img src="http://ocej2soxx.bkt.clouddn.com/g19.jpg" alt="部署成功"></p>
<h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>如果觉得默认的主题不好，可自己更换一个主题，步骤如下。</p>
<h3 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h3><p>本人选用next主题，故参考如下地址内容即可<br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a> </p>
<p>安装完成的next主题如下：<br><img src="http://ocej2soxx.bkt.clouddn.com/g20.jpg" alt="安装完成的next主题"></p>
<h4 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h4><p>更改主题配置文件中的 highlight_theme 字段，将其值设定成你所喜爱的高亮主题。NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Code Highlight theme</span></div><div class="line"><span class="symbol">highlight_theme:</span> normal</div></pre></td></tr></table></figure></p>
<h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h4><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。配置如下：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Han</div></pre></td></tr></table></figure></p>
<h3 id="集成第三方服务"><a href="#集成第三方服务" class="headerlink" title="集成第三方服务"></a>集成第三方服务</h3><h4 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h4><p>在 站点配置文件 中新增 duoshuo_shortname 字段，值设置成多说域名的第一个.前的值。<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">duoshuo_shortname:</span> iissnan-notes</div></pre></td></tr></table></figure></p>
<h4 id="本地检索"><a href="#本地检索" class="headerlink" title="本地检索"></a>本地检索</h4><p>安装 hexo-generator-search，在站点的根目录下执行以下命令：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install hexo-generator-<span class="keyword">search</span> --<span class="keyword">save</span></div></pre></td></tr></table></figure></p>
<p>编辑 站点配置文件，新增以下内容到任意位置：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.<span class="keyword">xml</span></div><div class="line">  <span class="title">field</span>: post</div></pre></td></tr></table></figure></p>
<p>更多next主题内容请参考：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>上传图片使用：图床  <a href="http://tuchuang.org/" target="_blank" rel="external">http://tuchuang.org/</a></p>
]]></content>
    </entry>
    
  
  
</search>
