<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[android入门四]]></title>
      <url>https://aiolos123.github.io/2016/09/14/learn-android-step-by-step-four/</url>
      <content type="html"><![CDATA[<p>本文为android入门的第三课，学习了Android开发中常用的调试方式，对话框、提示菜单、动画效果的相关知识。<br>学习来源：<a href="http://www.imooc.com/learn/142" target="_blank" rel="external">http://www.imooc.com/learn/142</a><br><a id="more"></a></p>
<h2 id="使用Debug方式调试程序"><a href="#使用Debug方式调试程序" class="headerlink" title="使用Debug方式调试程序"></a>使用Debug方式调试程序</h2><p>Debug调试作用：可以快速准确定位到错误问题的位置，以及它的调用关系。</p>
<p>Debug调试过程：<br>1、双击行号添加断点<br>2、开始Debug程序，通过Debug As运行程序<br>3、程序运行到断点位置会自动停止到断点代码处<br>    Debug界面：<br>        1、程序调用栈————后进先出<br>        2、变量值窗口————查看变量的当前值<br>        3、程序窗口————鼠标放到变量上可显示该变量的当前值<br>4、开始追踪程序</p>
<pre><code>F6：逐行追踪
F5：进入方法
F7：跳出方法
F8：下一个断点或结束Debug
</code></pre><p>5、退出Debug模式<br>    点击IDE菜单图标Disconnect，可退出Debug模式</p>
<h2 id="使用LogCat方式调试程序"><a href="#使用LogCat方式调试程序" class="headerlink" title="使用LogCat方式调试程序"></a>使用LogCat方式调试程序</h2><p>LogCat是用来获取系统日志信息的工具，可以得到的信息包括：<br>Dalvik虚拟机信息、进程信息、Android运行时信息，以及应用程序信息。</p>
<p>与Debug调试的区别：<br>1、Debug一般用于相对比较复杂的问题；LogCat用于相对容易追踪的问题；<br>2、Debug是重量级调试方式；LogCat是轻便简洁的调试方式。</p>
<p>LogCat窗口介绍：<br>    左侧————日志的过滤器，默认仅有all messages一个过滤器，输出所有日志信息；但可以点击绿色的”+”来添加自定义的过滤器。<br>        Filter Name:  随意命名<br>        by Log Tag:   根据Tag名称过滤，一般都是通过tag过滤<br>        by Log Message:  根据日志信息过滤<br>        by PID:   根据PID过滤<br>        by Application Name:  根据应用程序包名过滤，也使用的较多<br>        by Log Level:  根据日志级别过滤<br>    右侧————是输出的log信息,包括Level(日志级别)、Time(日志输出时间)、PID(进程ID)、TID(线程ID)、Application(日志所属的应用程序包名)、Tag(日志标签)、Text(日志信息内容)<br>        右侧窗口的下拉菜单————筛选显示日志的级别，只显示比其级别高的日志</p>
<p>Log日志级别:<br>    Log.v(tag,msg);  //verbose模式，打印最详细的日志，输出颜色为黑色<br>    Log.d(tag,msg);  //debug级别的日志，颜色为蓝色<br>    Log.i(tag,msg);  //info级别的日志，颜色为绿色<br>    Log.w(tag,msg);  //warn级别的日志，颜色为橙色————需要查看原因了<br>    Log.e(tag,msg);  //error级别的日志，颜色为红色————需要查看原因了</p>
<p>错误信息的级别最高，其次是警告信息，然后是通知信息及Debug信息，最低是详细信息<br>从日志的输出数量来算：error、warn、info、debug、verbose数量从少到多</p>
<pre><code>tag是用来标记Log信息的源头；msg是这条Log的内容
</code></pre><p>LogCat调试过程：<br>    1、显示LogCat窗口<br>    Window菜单–&gt;Show View–&gt;Other –&gt;Android–&gt;LogCat，点击OK<br>    2、如果日志的级别是warn或者error时，就需要查看错误原因了。其他级别的日志可忽略。<br>双击log日志的特定信息，即可定位到程序的对应行上。<br><strong>查看log日志，从上向下看</strong></p>
<p>3、在程序中添加程序日志方法，来对程序进行简单的追踪。<br>    Log.v(“标签”,”log日志信息”)<br>    Log.d(“标签”,”log日志信息”)<br>    Log.i(“标签”,”log日志信息”)<br>    Log.w(“标签”,”log日志信息”)<br>    Log.e(“标签”,”log日志信息”)</p>
<p>4、筛选log日志<br>在LogCat窗口的左侧，可以添加自定义筛选日志的过滤器，然后选中该过滤器，即可查看到相关过滤后的日志信息</p>
<h2 id="使用Toast动态显示信息"><a href="#使用Toast动态显示信息" class="headerlink" title="使用Toast动态显示信息"></a>使用Toast动态显示信息</h2><p>Toast是一种提供给用户简洁提示信息的视图。<br>作用：在不影响用户使用程序的基础上，向用户输出提示信息。<br>    Toast视图以浮于应用程序之上的形式呈现给用户，Toast提示界面不获取焦点，<br>    所以不影响用户的操作。Toast提示就是在不影响用户使用程序的同时，给用户提供<br>    某些提示信息。如删除成功、保存成功的提示框。</p>
<h3 id="Toast的常规用法"><a href="#Toast的常规用法" class="headerlink" title="Toast的常规用法"></a>Toast的常规用法</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.main</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//Android提供了Toast类可以创建和显示Toast信息</span></div><div class="line"></div><div class="line">        <span class="comment">//通过Toast.makeText(context,text,duration)方法返回Toast对象</span></div><div class="line">        Toast toast = Toast<span class="selector-class">.makeText</span>(this, <span class="string">"显示默认Toast"</span>, Toast.LENGTH_SHORT);</div><div class="line">        </div><div class="line">        <span class="comment">//也可调用R.string中的内容为提示信息</span></div><div class="line">        <span class="comment">//Toast.makeText(this, R.string.app_name, Toast.LENGTH_SHORT).show();</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置toast的自定义位置</span></div><div class="line">        <span class="comment">//gravity参数表示位置</span></div><div class="line">        <span class="comment">//xOffset、yOffset为相对于当前位置的偏移量</span></div><div class="line">        toast<span class="selector-class">.setGravity</span>(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//设置提示内容</span></div><div class="line">        toast<span class="selector-class">.setText</span>(<span class="string">"改变提示内容"</span>);</div><div class="line">        <span class="comment">//设置持续时间</span></div><div class="line">        toast<span class="selector-class">.setDuration</span>(<span class="number">1000</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//设置带图片的Toast</span></div><div class="line">            <span class="comment">//a、通过toast.getView()获取toast的布局，并强制转换为LinearLayout类型</span></div><div class="line">        LinearLayout toast_layout = (LinearLayout)toast<span class="selector-class">.getView</span>();</div><div class="line">            <span class="comment">//b、定义ImageView对象添加到toast布局中</span></div><div class="line">        ImageView iv = new ImageView(this);</div><div class="line">        iv<span class="selector-class">.setImageResource</span>(R.drawable.ic_launcher);</div><div class="line">        toast_layout<span class="selector-class">.addView</span>(iv,<span class="number">0</span>);<span class="comment">//图片位于文字上方</span></div><div class="line">        </div><div class="line">        <span class="comment">//显示Toast</span></div><div class="line">        toast<span class="selector-class">.show</span>();</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="完全自定义Toast"><a href="#完全自定义Toast" class="headerlink" title="完全自定义Toast"></a>完全自定义Toast</h3><p>1、自定义Toast布局文件，如命名为tst_layout.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"30dp"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"这是自定义的Toast"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"内容部分，可以随便写"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中，使用自定义Toast<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.main);</div><div class="line">        </div><div class="line">        <span class="comment">//完全自定义的Toast的步骤</span></div><div class="line">        <span class="comment">//1、创建Toast对象</span></div><div class="line">        <span class="type">Toast</span> to = <span class="keyword">new</span> <span class="type">Toast</span>(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//2、获取自定义的toast布局视图</span></div><div class="line">        <span class="type">LayoutInflater</span> infl = <span class="type">LayoutInflater</span>.from(<span class="keyword">this</span>);</div><div class="line">        <span class="type">View</span> tst_view = infl.inflate(<span class="type">R</span>.layout.tst_layout, <span class="literal">null</span>);</div><div class="line">        <span class="comment">//3、设置自定义的toast视图</span></div><div class="line">        to.setView(tst_view);</div><div class="line">        <span class="comment">//4、显示Toast</span></div><div class="line">        to.show();</div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用AlertDialog实现提示框"><a href="#使用AlertDialog实现提示框" class="headerlink" title="使用AlertDialog实现提示框"></a>使用AlertDialog实现提示框</h2><p>Dialog对话框是在当前界面弹出的一个小窗口，用于显示重要提示信息————提示用户输入信息，确认信息，或者显示某种状态，如下载进度，退出提示等等。一般情况下，用户要与对话框进行交互，然后返回到被遮盖的界面以继续运行当前的应用程序。</p>
<p>5种常见的Dialog对话框<br>    1、确认对话框<br>    2、单项按钮对话框<br>    3、多选按钮对话框<br>    4、列表对话框<br>    5、自定义对话框</p>
<p>AlertDialog.Builder的常用方法</p>
<pre><code>要创建一个AlertDialog，就要用到AlertDialog.Builder对象的create()方法

AlertDialog.Builder对象的其他常用方法：
    setTitle   为对话框设置标题
    setIcon    为对话框设置图标
    setMessage  为对话框设置内容
    setView     为对话框设置自定义布局视图
    setItems    为对话框设置要显示的一个list，一般用于显示几个命令时
    setMultiChoiceItems  为对话框设置显示一系列的复选框
    setSingleChoiceItems  为对话框设置单选按钮

    setNeutralButton   为对话框设置普通按钮
    setPositiveButton  为对话框设置确认按钮
    setNegativeButton  为对话框设置取消按钮
</code></pre><h3 id="确认对话框"><a href="#确认对话框" class="headerlink" title="确认对话框"></a>确认对话框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Button showDialog;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        showDialog = (Button)findViewById(R.id.showDialog);</div><div class="line">        </div><div class="line">        showDialog.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">//调用创建并显示确认对话框方法</span></div><div class="line">                showConfirmDialog();</div><div class="line"></div><div class="line">                <span class="comment">//调用创建并显示单选对话框方法</span></div><div class="line">                <span class="comment">//showSingleChoiceDialog();</span></div><div class="line">                <span class="comment">//调用创建并显示多选对话框方法</span></div><div class="line">                <span class="comment">//showMultiChoicesDialog();</span></div><div class="line">                <span class="comment">//调用创建并显示列表对话框方法</span></div><div class="line">                <span class="comment">//showListDialog();</span></div><div class="line">                <span class="comment">//调用创建并显示自定义对话框方法</span></div><div class="line">                showCustomDialog();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//创建并显示确认对话框</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showConfirmDialog</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">//1、创建对话框</span></div><div class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//2、设置对话框的样式和内容</span></div><div class="line">        <span class="comment">//设置标题</span></div><div class="line">        builder.setTitle(<span class="string">"确认对话框"</span>);</div><div class="line">        <span class="comment">//设置图标</span></div><div class="line">        builder.setIcon(R.drawable.ic_launcher);</div><div class="line">        <span class="comment">//设置提示内容</span></div><div class="line">        builder.setMessage(<span class="string">"确认对话框的提示内容"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//4、设置取消按钮</span></div><div class="line">        builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"点击了取消按钮"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//3、设置确认按钮</span></div><div class="line">        builder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"点击了确认按钮"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//5、获取确认对话框</span></div><div class="line">        AlertDialog dialog = builder.create();</div><div class="line">        <span class="comment">//6、显示确认对话框</span></div><div class="line">        dialog.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="单选对话框"><a href="#单选对话框" class="headerlink" title="单选对话框"></a>单选对话框</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、全局变量---声明单选的项目</span></div><div class="line"><span class="keyword">private</span> String[] single_list = &#123;<span class="string">"男"</span>,<span class="string">"女"</span>,<span class="string">"女博士"</span>,<span class="string">"程序员"</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">//创建并显示单选对话框</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">showSingleChoiceDialog</span><span class="params">()</span></span>&#123;</div><div class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//2、设置对话框的样式和内容</span></div><div class="line">    <span class="comment">//设置标题</span></div><div class="line">    builder.setTitle(<span class="string">"单选对话框-请选择性别"</span>);</div><div class="line">    <span class="comment">//设置图标</span></div><div class="line">    builder.setIcon(R.drawable.ic_launcher);</div><div class="line">    </div><div class="line">    <span class="comment">//3、设置单选对话框</span></div><div class="line">    builder.setSingleChoiceItems(single_list, <span class="number">0</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            <span class="comment">//which 选中哪一项</span></div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"已选中"</span>+single_list[which],Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);<span class="comment">//参数的0表示默认选中第一项</span></div><div class="line">    </div><div class="line">    <span class="comment">//4、获取对话框</span></div><div class="line">    AlertDialog dialog = builder.create();</div><div class="line">    </div><div class="line">    <span class="comment">//5、显示对话框</span></div><div class="line">    dialog.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多选按钮对话框"><a href="#多选按钮对话框" class="headerlink" title="多选按钮对话框"></a>多选按钮对话框</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、全局变量---声明多选项目</span></div><div class="line"><span class="keyword">private</span> String[] multi_list = &#123;<span class="string">"足球"</span>,<span class="string">"篮球"</span>,<span class="string">"乒乓球"</span>,<span class="string">"羽毛球"</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">//创建并显示多选对话框</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">showMultiChoicesDialog</span><span class="params">()</span></span>&#123;</div><div class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//2、设置对话框的样式和内容</span></div><div class="line">    <span class="comment">//设置标题</span></div><div class="line">    builder.setTitle(<span class="string">"多选对话框-请选择爱好"</span>);</div><div class="line">    <span class="comment">//设置图标</span></div><div class="line">    builder.setIcon(R.drawable.ic_launcher);</div><div class="line">    </div><div class="line">    <span class="comment">//3、设置多选对话框</span></div><div class="line">    builder.setMultiChoiceItems(multi_list, <span class="keyword">null</span>, <span class="keyword">new</span> OnMultiChoiceClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</div><div class="line">            <span class="comment">//which  数组下标</span></div><div class="line">            <span class="comment">//isChecked  是否选中</span></div><div class="line">            <span class="keyword">if</span>(isChecked)&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"喜欢"</span>+multi_list[which],Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"不喜欢"</span>+multi_list[which],Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);<span class="comment">//参数null表示默认没有选中项</span></div><div class="line">    </div><div class="line">    <span class="comment">//4、设置取消按钮</span></div><div class="line">    builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            dialog.dismiss();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">//5、获取对话框</span></div><div class="line">    AlertDialog dialog = builder.create();</div><div class="line">    </div><div class="line">    <span class="comment">//6、显示对话框</span></div><div class="line">    dialog.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="列表对话框"><a href="#列表对话框" class="headerlink" title="列表对话框"></a>列表对话框</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明列表项</span></div><div class="line"><span class="keyword">private</span> String[] list_items = &#123;<span class="string">"项目经理"</span>,<span class="string">"美工"</span>,<span class="string">"策划"</span>,<span class="string">"程序员"</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">//创建并显示列表对话框</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">showListDialog</span><span class="params">()</span></span>&#123;</div><div class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//2、设置对话框的样式和内容</span></div><div class="line">    <span class="comment">//设置标题</span></div><div class="line">    builder.setTitle(<span class="string">"列表对话框-请选择部门"</span>);</div><div class="line">    <span class="comment">//设置图标</span></div><div class="line">    builder.setIcon(R.drawable.ic_launcher);</div><div class="line">    </div><div class="line">    <span class="comment">//3、设置列表对话框</span></div><div class="line">    builder.setItems(list_items, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"我动了"</span>+list_items[which],Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">//4、设置取消按钮</span></div><div class="line">    builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            dialog.dismiss();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">//5、获取对话框</span></div><div class="line">    AlertDialog dialog = builder.create();</div><div class="line">    </div><div class="line">    <span class="comment">//6、显示对话框</span></div><div class="line">    dialog.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义对话框"><a href="#自定义对话框" class="headerlink" title="自定义对话框"></a>自定义对话框</h3><p>1、创建自定义对话框的布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span> </span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"输入内容"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"提交"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/custom"</span>/&gt;</div><div class="line">       </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line">     <span class="tag">&lt;<span class="name">ImageView</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中使用自定义对话框<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建并显示自定义对话框</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">showCustomDialog</span><span class="params">()</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//1、通过LayoutInflater获取自定义对话框的布局</span></div><div class="line">    LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</div><div class="line">    View view = inflater.inflate(R.layout.custom_dialog, <span class="keyword">null</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//2、设置对话框的样式和内容</span></div><div class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">//设置标题</span></div><div class="line">    builder.setTitle(<span class="string">"自定义对话框"</span>);</div><div class="line">    <span class="comment">//设置图标</span></div><div class="line">    builder.setIcon(R.drawable.ic_launcher);</div><div class="line">    </div><div class="line">    <span class="comment">//3、设置自定义布局视图</span></div><div class="line">    builder.setView(view);</div><div class="line"></div><div class="line">    <span class="comment">//4、设置取消按钮</span></div><div class="line">    builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">            <span class="comment">//关闭对话框</span></div><div class="line">            dialog.dismiss(); </div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">//5、获取对话框</span></div><div class="line">    AlertDialog dialog = builder.create();</div><div class="line">    </div><div class="line">    <span class="comment">//6、显示对话框</span></div><div class="line">    dialog.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用Notification实现状态通知栏的通知"><a href="#使用Notification实现状态通知栏的通知" class="headerlink" title="使用Notification实现状态通知栏的通知"></a>使用Notification实现状态通知栏的通知</h2><p>1、Notification通知栏通知：<br>    Notification是显示在手机状态栏的消息(手机状态栏位于手机最顶端)，<br>代表一种全局效果的通知。</p>
<p>2、通知栏的显示内容：<br>    图标<br>    标题<br>    内容<br>    时间<br>    点击后的响应</p>
<p>3、如何实现通知栏通知<br>主要用到两个类：<br>    NotificationManager————管理通知，控制通知的显示与取消，主要有如下俩个方法<br>        显示通知栏  notify(id,notification)<br>        取消通知栏  cancle(id)<br>    Notification————设置通知的显示内容及点击后的响应、设置声音提示、指示灯、以及震动效果</p>
<p>主要步骤：<br>    获取NotificationManager对象用于控制通知的显示与取消<br>    构造Notification对象并设置显示内容，还可以设置声音提示、指示灯、以及震动效果。</p>
<p>4、具体代码示例<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>&#123;</span></div><div class="line">    </div><div class="line">    <span class="comment">//10、声明通知控制类</span></div><div class="line">    <span class="keyword">private</span> NotificationManager manager;</div><div class="line">    <span class="comment">//声明notification的ID,默认为0</span></div><div class="line">    <span class="keyword">int</span> notification_id;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//11、获取通知控制类，NotificationManager是系统常用服务</span></div><div class="line">        manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line">        <span class="comment">//为Button对象绑定事件监听器</span></div><div class="line">        findViewById(R.id.send).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        findViewById(R.id.cancle).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//实现事件监听器</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onClick(View v) &#123;</div><div class="line">        <span class="keyword">switch</span>(v.getId())&#123;</div><div class="line">            <span class="comment">//发送通知按钮被点击</span></div><div class="line">            <span class="keyword">case</span> R.id.<span class="string">send:</span>&#123;</div><div class="line">                sendNotification();</div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;</div><div class="line">            <span class="comment">//取消通知按钮被点击</span></div><div class="line">            <span class="keyword">case</span> R.id.<span class="string">cancle:</span>&#123;</div><div class="line">                <span class="comment">//13、通过NotificationManager取消已发送的通知</span></div><div class="line">                manager.cancel(notification_id);</div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//构造Notification并发送到通知栏</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> sendNotification() &#123;</div><div class="line">        <span class="comment">//1、构造Notification对象</span></div><div class="line">        Builder builder = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//2、设置在手机状态栏的图标</span></div><div class="line">        builder.setSmallIcon(R.drawable.ic_launcher);</div><div class="line">        <span class="comment">//3、设置在手机状态栏的提示</span></div><div class="line">        builder.setTicker(<span class="string">"hello"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//4、设置在通知栏的通知时间</span></div><div class="line">        builder.setWhen(System.currentTimeMillis());</div><div class="line">        <span class="comment">//5、设置在通知栏的通知标题</span></div><div class="line">        builder.setContentTitle(<span class="string">"通知栏通知"</span>);</div><div class="line">        <span class="comment">//6、设置在通知栏的通知内容</span></div><div class="line">        builder.setContentText(<span class="string">"我来自火星"</span>);</div><div class="line">        <span class="comment">//7、设置在通知栏的点击响应intent</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MainActivity.<span class="keyword">class</span>);<span class="comment">//点击通知启动该MainActivity类</span></div><div class="line">        PendingIntent  pintent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, <span class="number">0</span>);</div><div class="line">        builder.setContentIntent(pintent);</div><div class="line">        <span class="comment">//8、设置声音提示、指示灯、震动效果</span></div><div class="line">        <span class="comment">//设置指示灯或震动效果都需要在Manifest.xml中配置相关权限</span></div><div class="line">        <span class="comment">//&lt;uses-permission android:name="android.permission.FLASHLIGHT"/&gt;</span></div><div class="line">        <span class="comment">//&lt;uses-permission android:name="android.permission.VIBRATE"/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">//builder.setDefaults(Notification.DEFAULT_SOUND);</span></div><div class="line">        <span class="comment">//builder.setDefaults(Notification.DEFAULT_LIGHTS);//指示灯</span></div><div class="line">        <span class="comment">//builder.setDefaults(Notification.DEFAULT_VIBRATE);//震动效果</span></div><div class="line">        <span class="comment">//设置声音提示、指示灯、震动效果的以上三局代码也可以使用如下语句实现</span></div><div class="line">        builder.setDefaults(Notification.DEFAULT_ALL);</div><div class="line">        </div><div class="line">        <span class="comment">//通知消息会在被点击后自动消失</span></div><div class="line">        <span class="comment">//builder.setAutoCancel(true); </span></div><div class="line">        </div><div class="line">        <span class="comment">//9、获取Notification对象</span></div><div class="line">        <span class="comment">//安卓4.1及以上使用如下代码获取Notification对象</span></div><div class="line">        Notification notifi = builder.build();</div><div class="line">        <span class="comment">//安卓4.1以下使用如下代码获取Notification对象</span></div><div class="line">        <span class="comment">//Notification notifi = builder.getNotification();</span></div><div class="line">        <span class="comment">//12、通过NotificationManager显示通知</span></div><div class="line">        manager.notify(notification_id,notifi);</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用OptionsMenu实现选项菜单"><a href="#使用OptionsMenu实现选项菜单" class="headerlink" title="使用OptionsMenu实现选项菜单"></a>使用OptionsMenu实现选项菜单</h2><p>安卓中有三种类型的菜单：<br>    OptionsMenu 选项菜单 ————按menu物理按键弹出的菜单<br>    ContextMenu 上下文菜单<br>    SubMenu 子菜单</p>
<p>实现选项菜单的步骤：<br>    1、创建选项菜单————在Activity中重写onCreateOptionsMenu()<br>    2、设置菜单项————在onCreateOptionsMenu()中完成<br>         设置菜单项的2种方法：<br>                通过用menuadd()动态添加菜单项<br>                用xml设置菜单项， 通过MenuInflater.infalte()添加<br>    3、设置菜单项点击事件监听器————重写onOptionsItemSelected() </p>
<h3 id="通过xml配置OptionsMenu选项菜单的示例"><a href="#通过xml配置OptionsMenu选项菜单的示例" class="headerlink" title="通过xml配置OptionsMenu选项菜单的示例"></a>通过xml配置OptionsMenu选项菜单的示例</h3><p>1、在选项菜单布局xml文件中配置菜单项，保存该文件到/res/menu/main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;menu xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    tools:context=<span class="string">"com.example.howtouseoptionsmenu.MainActivity"</span> &gt;</div><div class="line"></div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/action_settings"</span></div><div class="line">        android:orderInCategory=<span class="string">"100"</span></div><div class="line">        android:showAsAction=<span class="string">"never"</span></div><div class="line">        android:title=<span class="string">"@string/action_settings"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/menu1"</span></div><div class="line">        android:orderInCategory=<span class="string">"100"</span></div><div class="line">        android:showAsAction=<span class="string">"never"</span></div><div class="line">        android:title=<span class="string">"菜单一"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/menu2"</span></div><div class="line">        android:orderInCategory=<span class="string">"100"</span></div><div class="line">        android:showAsAction=<span class="string">"never"</span></div><div class="line">        android:title=<span class="string">"菜单二"</span>/&gt;</div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中使用xml布局文件<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//1、重写onCreateOptionsMenu()方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        <span class="comment">//2、通过inflate()配置OptionsMenu的菜单项</span></div><div class="line">        getMenuInflater()<span class="selector-class">.inflate</span>(R.menu.main, menu);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//3、重写OptionsMenu菜单项点击事件监听器</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">        <span class="comment">//参数item为点击的菜单项</span></div><div class="line">        <span class="selector-tag">switch</span> (item.getItemId()) &#123;</div><div class="line">        case R<span class="selector-class">.id</span><span class="selector-class">.menu1</span>:</div><div class="line">            <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"点击了菜单一"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">            break;</div><div class="line"></div><div class="line">        case R<span class="selector-class">.id</span><span class="selector-class">.menu2</span>:</div><div class="line">            <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"点击了菜单二"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        return super.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="动态添加OptionsMenu选项菜单的示例"><a href="#动态添加OptionsMenu选项菜单的示例" class="headerlink" title="动态添加OptionsMenu选项菜单的示例"></a>动态添加OptionsMenu选项菜单的示例</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//1、重写onCreateOptionsMenu()方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        <span class="comment">//2、通过inflate()配置OptionsMenu的菜单项</span></div><div class="line">        <span class="comment">//getMenuInflater().inflate(R.menu.main, menu);</span></div><div class="line">        </div><div class="line">        <span class="comment">//2、通过用menuadd()动态添加菜单项</span></div><div class="line">        <span class="comment">//menu.add(菜单分组ID, 菜单项ID, 菜单项的排序, 菜单项的名称);</span></div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="string">"菜单一"</span>);</div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="string">"菜单二"</span>);</div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">102</span>, <span class="number">1</span>, <span class="string">"菜单三"</span>);</div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">103</span>, <span class="number">1</span>, <span class="string">"菜单四"</span>);</div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">104</span>, <span class="number">1</span>, <span class="string">"菜单五"</span>);</div><div class="line">        menu.add(<span class="number">1</span>, <span class="number">105</span>, <span class="number">1</span>, <span class="string">"菜单六"</span>);</div><div class="line">        MenuItem item = menu.add(<span class="number">1</span>, <span class="number">106</span>, <span class="number">1</span>, <span class="string">"菜单七"</span>);</div><div class="line">        item.setTitle(<span class="string">"菜单last"</span>);<span class="comment">//设置菜单项名称</span></div><div class="line">        item.setIcon(R.drawable.ic_launcher);<span class="comment">//仅在API&lt;11 上有效</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//3、重写菜单项点击事件</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理动态添加的菜单项</span></div><div class="line">        <span class="keyword">case</span> <span class="number">100</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击了动态添加菜单一"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">101</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击了动态添加菜单二"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">102</span>:</div><div class="line">            //实现点击菜单项从MainActivity页面跳转到另一个页面SecondActivity</div><div class="line">            //SecondActivity中定义了跳转后的页面视图及使用到的布局xml文件</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,SecondActivity.class);</div><div class="line">            item.setIntent(intent);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用ContextMenu实现上下文菜单"><a href="#使用ContextMenu实现上下文菜单" class="headerlink" title="使用ContextMenu实现上下文菜单"></a>使用ContextMenu实现上下文菜单</h2><p>ContextMenu————长按时弹出的菜单</p>
<p>ContextMenu的组成：<br>    标题及标题图标<br>    菜单项<br>    菜单项点击响应事件</p>
<p>实现上下文菜单的步骤：<br>    1、给View注册上下文菜单————registerForContextMenu()<br>    2、为上下文菜单添加菜单项————重写onCreateContextMenu()<br>        添加菜单项的2种方式：<br>            通过代码动态添加菜单项<br>            通过加载xml文件中的菜单项<br>    3、设置菜单点击响应事件—————重写onContextItemSelected()</p>
<p>实现上下文菜单的代码示例<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        showListView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置ListView的显示内容</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">showListView</span><span class="params">()</span> </span>&#123;</div><div class="line">        ListView lv = (ListView)findViewById(R.id.lv);</div><div class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;</div><div class="line">            (<span class="keyword">this</span>, android.R.layout.simple_list_item_1,getData());</div><div class="line">        </div><div class="line">        lv.setAdapter(adapter);</div><div class="line">        </div><div class="line">        <span class="comment">//为listview设置上下文菜单，长按某个listview的item弹出上下文菜单</span></div><div class="line">        <span class="comment">//1、为view注册上下文菜单</span></div><div class="line">        <span class="keyword">this</span>.registerForContextMenu(lv);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//2、重写onCreateContextMenu()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreateContextMenu</span><span class="params">(ContextMenu menu, View v,</span></span></div><div class="line">            ContextMenuInfo menuInfo) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreateContextMenu(menu, v, menuInfo);</div><div class="line">        </div><div class="line">        <span class="comment">//2.1、设置上下文菜单menu显示的内容</span></div><div class="line">        menu.setHeaderTitle(<span class="string">"文件操作"</span>);</div><div class="line">        menu.setHeaderIcon(R.drawable.ic_launcher);</div><div class="line">        </div><div class="line">        <span class="comment">//2.2、为上下文菜单添加菜单项</span></div><div class="line">        <span class="comment">//动态添加菜单项</span></div><div class="line">        <span class="comment">//menu.add(分组ID, 菜单项ID, 排列顺序, 菜单项名称)</span></div><div class="line">        menu.add(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">"复制"</span>);</div><div class="line">        menu.add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">"粘贴"</span>);</div><div class="line">        menu.add(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">"剪切"</span>);</div><div class="line">        menu.add(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="string">"重命名"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//静态添加菜单项</span></div><div class="line">        <span class="comment">//首先在/res/menu/main.xml中设置菜单项</span></div><div class="line">        <span class="comment">//然后使用inflater添加xml文件</span></div><div class="line"><span class="comment">//      //MenuInflater inflater = getMenuInflater();</span></div><div class="line"><span class="comment">//      //inflater.inflate(R.menu.main,menu);</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//3、设置菜单项点击响应事件————重写onContextItemSelected()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onContextItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击复制"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击粘贴"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击剪切"</span>, Toast.LENGTH_SHORT).show();       </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"重命名"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onContextItemSelected</span><span class="params">(item)</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//构造ListView显示的数据</span></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; getData()&#123;</div><div class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">            list.add(<span class="string">"文件"</span>+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用SubMenu为选项菜单添加子菜单"><a href="#使用SubMenu为选项菜单添加子菜单" class="headerlink" title="使用SubMenu为选项菜单添加子菜单"></a>使用SubMenu为选项菜单添加子菜单</h2><p>子菜单：<br>    把功能相近的菜单分组显示</p>
<h3 id="动态添加submenu子菜单项"><a href="#动态添加submenu子菜单项" class="headerlink" title="动态添加submenu子菜单项"></a>动态添加submenu子菜单项</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//重写onCreateOptionsMenu()方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line"></div><div class="line">        <span class="comment">//1、添加子菜单</span></div><div class="line">        SubMenu file = menu<span class="selector-class">.addSubMenu</span>(<span class="string">"文件"</span>);</div><div class="line">        SubMenu edit = menu<span class="selector-class">.addSubMenu</span>(<span class="string">"编辑"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//2、为子菜单添加菜单项</span></div><div class="line">        file<span class="selector-class">.setHeaderTitle</span>(<span class="string">"文件操作"</span>);<span class="comment">//子菜单标题</span></div><div class="line">        file<span class="selector-class">.setHeaderIcon</span>(R.drawable.ic_launcher);<span class="comment">//子菜单图标</span></div><div class="line">        file<span class="selector-class">.add</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">"新建"</span>);</div><div class="line">        file<span class="selector-class">.add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">"打开"</span>);</div><div class="line">        file<span class="selector-class">.add</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">"保存"</span>);</div><div class="line">        </div><div class="line">        edit<span class="selector-class">.setHeaderTitle</span>(<span class="string">"编辑操作"</span>);</div><div class="line">        edit<span class="selector-class">.setHeaderIcon</span>(R.drawable.ic_launcher);</div><div class="line">        edit<span class="selector-class">.add</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">"复制"</span>);</div><div class="line">        edit<span class="selector-class">.add</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">"粘贴"</span>);</div><div class="line">        edit<span class="selector-class">.add</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">"剪切"</span>);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//3、重写onOptionsItemSelected()方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">        <span class="comment">//判断分组id</span></div><div class="line">        <span class="selector-tag">if</span>(item.getGroupId() == <span class="number">1</span>)&#123;</div><div class="line">            <span class="selector-tag">switch</span> (item.getItemId()) &#123;</div><div class="line">            case <span class="attribute">1</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击新建"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line"></div><div class="line">            case <span class="attribute">2</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击打开"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            case <span class="attribute">3</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击保存"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="selector-tag">else</span> <span class="selector-tag">if</span>(item.getGroupId() == <span class="number">2</span>)&#123;</div><div class="line">            <span class="selector-tag">switch</span> (item.getItemId()) &#123;</div><div class="line">            case <span class="attribute">1</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击复制"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line"></div><div class="line">            case <span class="attribute">2</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击粘贴"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            case <span class="attribute">3</span>:</div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击剪切"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return super<span class="selector-class">.onOptionsItemSelected</span>(item);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="静态添加submenu子菜单项"><a href="#静态添加submenu子菜单项" class="headerlink" title="静态添加submenu子菜单项"></a>静态添加submenu子菜单项</h3><p>1、在xml文件中配置子菜单，在/res/menu/main.xml中编辑如下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.example.howtousesubmenu_40.MainActivity"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"文件"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 子菜单 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/new_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"新建"</span>/&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/open_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"打开"</span>/&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/save_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"保存"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"编辑"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 子菜单 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/copy_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"复制"</span>/&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/parse_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"粘贴"</span>/&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span> </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/cut_file"</span></div><div class="line">                <span class="attr">android:showAsAction</span>=<span class="string">"never"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"剪切"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中静态添加submenu子菜单项<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//重写onCreateOptionsMenu()方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        <span class="comment">//1、静态添加菜单项</span></div><div class="line">        getMenuInflater()<span class="selector-class">.inflate</span>(R.menu.main, menu);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//重写onOptionsItemSelected()</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">        <span class="selector-tag">switch</span> (item.getItemId()) &#123;</div><div class="line">            case R<span class="selector-class">.id</span><span class="selector-class">.copy_file</span>:</div><div class="line">                <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"点击复制"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">                break;</div><div class="line"></div><div class="line">            case R<span class="selector-class">.id</span><span class="selector-class">.parse_file</span>:</div><div class="line">                <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"点击粘贴"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">                break;</div><div class="line">            case R<span class="selector-class">.id</span><span class="selector-class">.cut_file</span>:</div><div class="line">                <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"点击剪切"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        return super.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="注意实现"><a href="#注意实现" class="headerlink" title="注意实现"></a>注意实现</h2><p>1、ContextMenu与OptionsMenu的区别<br>    OptionsMenu对应的是activity，一个Activity只能拥有一个选项菜单；<br>    ContextMenu对应的是View，每个View都可以设置上下文菜单；一般情况下，<br>    ContextMenu常用于ListView或GridView</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android入门三]]></title>
      <url>https://aiolos123.github.io/2016/09/12/learn-android-step-by-step-three/</url>
      <content type="html"><![CDATA[<p>本文为android入门的第二课的第二部分，学习了android高级控件、View视图的相关知识。<br>学习来源：<a href="http://www.imooc.com/learn/107" target="_blank" rel="external">http://www.imooc.com/learn/107</a><br><a id="more"></a></p>
<h2 id="Fragment基础"><a href="#Fragment基础" class="headerlink" title="Fragment基础"></a>Fragment基础</h2><p>android3.0引入Fragment的概念，主要目的是用在大屏幕设备上，如平板电脑，支持更加动态和灵活的UI设计。————类似于iframe</p>
<pre><code>1、Fragment可以作为Activity界面的一部分组成出现；
2、可以在一个Activity中同时出现多个Fragment，并且一个Fragment也可以在多个
Activity中使用；
3、在Activity运行过程中，可以添加、移除或替换Fragment；
4、Fragment可以响应自己的输入事件，并且有自己的生命周期，它们的生命周期会受宿主Activity的生命周期影响；
</code></pre><h3 id="Fragment设计哲学"><a href="#Fragment设计哲学" class="headerlink" title="Fragment设计哲学"></a>Fragment设计哲学</h3><p>Fragment在应用中是一个模块化和可重用的组件，因为Fragment定义了它自己的布局，以及通过使用它自己的生命周期回调方法定义了自己的行为，你可以将Fragment包含到多个Activity中。</p>
<h3 id="加载Fragment的两种方式"><a href="#加载Fragment的两种方式" class="headerlink" title="加载Fragment的两种方式"></a>加载Fragment的两种方式</h3><pre><code>静态加载和动态加载
</code></pre><h3 id="静态加载Fragment的四个步骤"><a href="#静态加载Fragment的四个步骤" class="headerlink" title="静态加载Fragment的四个步骤"></a>静态加载Fragment的四个步骤</h3><p>1、创建一个包含Fragment组件的布局文件<br>命名为main.xml<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        &lt;!<span class="attr">--</span>静态加载<span class="attr">Fragment</span>必须声明<span class="attr">fragment</span>的唯一<span class="attr">ID</span>或<span class="attr">tag--</span>&gt;</div><div class="line">        android:id="@+id/fragment"</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        <span class="comment">&lt;!--指定到自定义的Fragment子类--&gt;</span></div><div class="line">        android:name="com.example.testdemo.MyFragment"</div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、创建一个fragment布局文件<br>同普通的activity布局文件一样，命名为fragment.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span> </div><div class="line">        <span class="attr">...</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_fg"</span> </div><div class="line">        <span class="attr">...</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、创建继承自Fragment或其子类的java类<br>命名为：MyFragment.java<br>全路径为：com.example.testdemo.MyFragment————将在包含了Fragment组件的布局文件main.xml中用到该路径<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.testdemo;</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//自定义Fragment的子类的作用是——通过onCreateView()</span></div><div class="line">    <span class="comment">//实现将fragment布局文件fragment.xml转换成View对象</span></div><div class="line">    <span class="comment">//并完成其组件的初始化工作</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</div><div class="line">            <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//通过inflater.inflate()方法将fragment布局文件——fragment.xml转换成View对象</span></div><div class="line">        <span class="comment">//inflater.inflate(resource,root,attactToRoot)三个参数的含义：</span></div><div class="line">        <span class="comment">//resource: 需要加载的fragment布局文件</span></div><div class="line">        <span class="comment">//root: 加载fragment布局文件的父ViewGroup，以实现将fragment添加到activity中</span></div><div class="line">        <span class="comment">//attactToRoot:false表示不返回父ViewGroup;true表示返回父ViewGroup</span></div><div class="line">        <span class="type">View</span> view = inflater.inflate(<span class="type">R</span>.layout.fragment, container,<span class="literal">false</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//在fragment中使用findViewById()一定要加上view.</span></div><div class="line">        <span class="comment">//因为fragment的布局文件是保存到view对象中的</span></div><div class="line">        <span class="type">TextView</span> text= (<span class="type">TextView</span>)view.findViewById(<span class="type">R</span>.id.tv);</div><div class="line">        text.setText(<span class="string">"静态加载fragment"</span>);</div><div class="line">        <span class="keyword">return</span> view; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在Activity中使用fragment中的组件<br>可以直接在Activity中使用fragment中的组件，如同定义在activity布局文件中一样。</p>
<p>因为：setContentView()方法在加载包含Fragment组件的布局文件main.xml时，<br>会通过层层查找，查找到fragment布局文件fragment.xml中的所有组件。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">TextView</span> tv;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.main);</div><div class="line">        </div><div class="line">        <span class="comment">//在Activity中使用fragment中的组件id为tv的TextView</span></div><div class="line">        tv = (<span class="type">TextView</span>)findViewById(<span class="type">R</span>.id.tv);</div><div class="line">        <span class="comment">//在Activity中使用fragment中的组件id为btn_fg的Button</span></div><div class="line">        <span class="type">Button</span> btn = (<span class="type">Button</span>)findViewById(<span class="type">R</span>.id.btn_fg);</div><div class="line">        btn.setText(<span class="string">"改变"</span>);</div><div class="line">        <span class="comment">//改变fragment中textview中的值</span></div><div class="line">        btn.setOnClickListener(<span class="keyword">new</span> <span class="type">OnClickListener</span>() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            public void onClick(<span class="type">View</span> v) &#123;</div><div class="line">                tv.setText(<span class="string">"TextView被改变了"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：<br>1、onCreateView()方法<br>    Fragment第一次绘制它的用户界面时，系统会调用此方法，为了绘制Fragment的UI，<br>    此方法必须返回一个View；如果不需要显示UI，返回null即可。<br>2、在Activity的layout文件中声明Fragment组件，需要特别注意的是<fragment>标签中的android:name属性需要指定为一个Fragment的子类<br>3、标识Fragment的方法<br>    android:id  属性提供一个唯一ID<br>    android:tag 属性提供一个唯一字符串<br>4、静态加载Fragment必须要在fragment标签中编写唯一标识id或tag，否则程序会报错崩溃。<br>5、自定义的Fragment子类的作用是——通过onCreateView()实现将fragment布局文件转换成View对象，并完成组件的初始化工作。</fragment></p>
<h3 id="动态加载Fragment的四个步骤"><a href="#动态加载Fragment的四个步骤" class="headerlink" title="动态加载Fragment的四个步骤"></a>动态加载Fragment的四个步骤</h3><p>编写代码将Fragment添加到一个Activity layout中</p>
<p>1、编写fragment布局xml文件<br>命名为fragment.xml，内容同静态加载中的fragment.xml<br>2、创建继承自Fragment或其子类的java类<br>命名为DyncFragment.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//动态加载Fragment</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DyncFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</div><div class="line">            <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        <span class="type">View</span> view = inflater.inflate(<span class="type">R</span>.layout.fragment, container,<span class="literal">false</span>);</div><div class="line">        <span class="type">TextView</span> tv = (<span class="type">TextView</span>)view.findViewById(<span class="type">R</span>.id.tv);</div><div class="line">        tv.setText(<span class="string">"动态加载Fragment"</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、编写用于动态加载Fragment的父View容器的布局文件<br>命名为main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 用于动态加载Fragment的父View容器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/dync"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>4、在Activity中动态加载fragment<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.main);</div><div class="line">        </div><div class="line">        <span class="comment">//实例化自定义Fragment子类</span></div><div class="line">        <span class="type">DyncFragment</span> dyncFrag = <span class="keyword">new</span> <span class="type">DyncFragment</span>();</div><div class="line">        <span class="comment">//获取FragmentManager对象</span></div><div class="line">        <span class="type">FragmentManager</span> fmanager = getFragmentManager();</div><div class="line">        <span class="comment">//获取开启事务的对象</span></div><div class="line">        <span class="type">FragmentTransaction</span> trans =  fmanager.beginTransaction();</div><div class="line">        </div><div class="line">        <span class="comment">//使用add()动态加载Fragment，实现添加一个Fragment(指定要添加的fragment对象和插入的View)</span></div><div class="line">        <span class="comment">//与之类似的还有remove()、replace()方法</span></div><div class="line">        </div><div class="line">        <span class="comment">//add()方法需要2个参数：</span></div><div class="line">        <span class="comment">//第一个参数表示要将Fragment对象加载到哪个父布局id中</span></div><div class="line">        <span class="comment">//第二个参数表示将要加载的Fragment对象</span></div><div class="line">        trans.add(<span class="type">R</span>.id.dync, dyncFrag);<span class="comment">//dync的ID为main.xml中的LineaLayout</span></div><div class="line">        <span class="comment">//还可以进行其他操作，如</span></div><div class="line">        <span class="comment">//trans.replace(...);</span></div><div class="line">        <span class="comment">//trans.remove(...);</span></div><div class="line">        <span class="comment">//添加回退功能</span></div><div class="line">        trans.addToBackStack(<span class="literal">null</span>);</div><div class="line">        <span class="comment">//提交事务</span></div><div class="line">        trans.commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注：<strong>处理Fragment事务————类似与数据库的事务</strong></p>
<pre><code>根据用户的交互情况，对Fragment进行添加、移除、替换，以及执行其他动作，提交给Activity的每一套变化被称为一个事务

//获取Fragment事务
FragmentManager fmanager = getFragmentManager();
FragmentTransaction transaciton = fmanager.beginTransaction();

每一个事务都是同时执行一套变化，可以在一个事务中设置你所有想执行的变化，
包括add()、remove()、replace()，然后提交给Activity时必须调用commit()方法。

如果允许用户通过按下back物理按键返回到前一个Fragment状态，调用commit()之前可以加入addToBackStack()方法。
</code></pre><h3 id="Fragment生命周期"><a href="#Fragment生命周期" class="headerlink" title="Fragment生命周期"></a>Fragment生命周期</h3><p>Fragment可以响应自己的输入事件，并且有自己的生命周期，它们的生命周期会受宿主Activity的生命周期影响；</p>
<p>Activity生命周期的每个状态下都会对应一个或多个Fragment的回调函数，如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/Fragment_callback.jpg" alt="Activity生命周期的每个状态下对应的Fragment的回调函数"></p>
<h4 id="Fragment生命周期各方法详解"><a href="#Fragment生命周期各方法详解" class="headerlink" title="Fragment生命周期各方法详解"></a>Fragment生命周期各方法详解</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">FragmentLife</span> <span class="selector-tag">extends</span> <span class="selector-tag">Fragment</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//Fragment生命周期的第一个方法</span></div><div class="line">    <span class="comment">//当Fragment被添加到Activity时会回调该方法，</span></div><div class="line">    <span class="comment">//并且这个方法只调用一次</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onAttach(Activity activity) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onAttach</span>(activity);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"///////启动Fragment开始/////////////////////////////////"</span>);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onAttach()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//在创建Fragment时会回调该方法，并且这个方法只调用一次</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onCreate()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//每次创建Fragment，绘制Fragment的View组件时回调该方法</span></div><div class="line">    <span class="comment">//这个访问的作用是为Fragment绑定一个布局文件，然后转换成View对象返回</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        View view = inflater<span class="selector-class">.inflate</span>(R.layout.fragment, container,false);</div><div class="line">        TextView tv=(TextView)view<span class="selector-class">.findViewById</span>(R.id.tv);</div><div class="line">        tv<span class="selector-class">.setText</span>(<span class="string">"第一个Fragment"</span>);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onCreateView()"</span>);</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="comment">//当Fragment所在的Activity启动完成后回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onActivityCreated(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onActivityCreated</span>(savedInstanceState);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onActivityCreated()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//启动Fragment时回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onStart() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onStart</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onStart()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//恢复Fragment时回调该方法</span></div><div class="line">    <span class="comment">//调用onStart()方法后一定会调用onResume()方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onResume() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onResume</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onResume()"</span>);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"///////启动Fragment结束/////////////////////////////////"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//暂停Fragment时回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onPause() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onPause</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"///////停止Fragment开始/////////////////////////////////"</span>);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onPause()"</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//停止Fragment时回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onStop() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onStop</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onStop()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//销毁Fragment所包含的View组件时回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onDestroyView() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onDestroyView</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onDestroyView()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//销毁Fragment时回调该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onDestroy() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onDestroy</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onDestroy()"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//Fragment从Activity中删除时回调该方法，并且这个方法只调用一次</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onDetach() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        super<span class="selector-class">.onDetach</span>();</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"FragmentLife——————onDetach()"</span>);</div><div class="line">        Log<span class="selector-class">.i</span>(<span class="string">"Main"</span>,<span class="string">"///////关闭Fragment结束/////////////////////////////////"</span>);</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Fragment生命周期各方法执行顺序"><a href="#Fragment生命周期各方法执行顺序" class="headerlink" title="Fragment生命周期各方法执行顺序"></a>Fragment生命周期各方法执行顺序</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、启动Fragment</span></div><div class="line">        <span class="function"><span class="title">onAttach</span>()--&gt;</span><span class="function"><span class="title">onCreate</span>()--&gt;</span><span class="function"><span class="title">onCreateView</span>()--&gt;</span>onActivityCreated()</div><div class="line">        --&gt;<span class="function"><span class="title">onStart</span>()--&gt;</span>onResume()</div><div class="line"><span class="comment">//2、屏幕锁屏</span></div><div class="line">        <span class="function"><span class="title">onPause</span>()--&gt;</span>onStop()</div><div class="line"><span class="comment">//3、屏幕解锁</span></div><div class="line">        <span class="function"><span class="title">onStart</span>()--&gt;</span>onResume()</div><div class="line"><span class="comment">//4、从第一个Fragment切换到第二个Fragment</span></div><div class="line">        第一个F<span class="function"><span class="title">ragment</span>停止：onPause()--&gt;</span><span class="function"><span class="title">onStop</span>()--&gt;</span>onDestroyView()</div><div class="line">        --&gt;<span class="function"><span class="title">onDestroy</span>()--&gt;</span>onDetach()</div><div class="line">        第二个F<span class="function"><span class="title">ragment</span>启动：onAttach()--&gt;</span><span class="function"><span class="title">onCreate</span>()--&gt;</span>onCreateView()</div><div class="line">        --&gt;<span class="function"><span class="title">onActivityCreated</span>()--&gt;</span><span class="function"><span class="title">onStart</span>()--&gt;</span>onResume()</div><div class="line"><span class="comment">//5、从启动到销毁Fragment全过程</span></div><div class="line">        <span class="function"><span class="title">onAttach</span>()--&gt;</span><span class="function"><span class="title">onCreate</span>()--&gt;</span><span class="function"><span class="title">onCreateView</span>()--&gt;</span><span class="function"><span class="title">onActivityCreated</span>()--&gt;</span><span class="function"><span class="title">onStart</span>()--&gt;</span>onResume()</div><div class="line">        --&gt;<span class="function"><span class="title">onPause</span>()--&gt;</span><span class="function"><span class="title">onStop</span>()--&gt;</span><span class="function"><span class="title">onDestroyView</span>()--&gt;</span><span class="function"><span class="title">onDestroy</span>()--&gt;</span>onDetach()</div></pre></td></tr></table></figure>
<h3 id="Fragment与Activity通信"><a href="#Fragment与Activity通信" class="headerlink" title="Fragment与Activity通信"></a>Fragment与Activity通信</h3><p>1、在Fragment中，可调用getActivity()方法获取它所在的宿主Activity<br>2、在Activity中，可调用FragmentManager的findFragmentById()或findFragmentByTag()方法获取静态加载的Fragment</p>
<h4 id="Activity向Fragment传递数据——动态加载fragment"><a href="#Activity向Fragment传递数据——动态加载fragment" class="headerlink" title="Activity向Fragment传递数据——动态加载fragment"></a>Activity向Fragment传递数据——动态加载fragment</h4><p>1、在Activity中向Fragment传递数据<br>思路:在Activity中创建Bundle数据包，并调用Fragment的setArguments(Bundle bundle)方法传递数据包到Fragment中。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span>&#123;</div><div class="line">    </div><div class="line">    private EditText et;</div><div class="line">    private Button send;</div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.main4</span>);</div><div class="line">        </div><div class="line">        </div><div class="line">        et = (EditText) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.et</span>);</div><div class="line">        send = (Button) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.send</span>);</div><div class="line">        </div><div class="line">        <span class="selector-tag">send</span><span class="selector-class">.setOnClickListener</span>(new OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                String txt = et<span class="selector-class">.getText</span>()<span class="selector-class">.toString</span>();</div><div class="line">                </div><div class="line">                <span class="comment">//在Activity中向Fragment传递数据的步骤</span></div><div class="line"></div><div class="line">                <span class="comment">//1、实例化自定义Fragment类对象</span></div><div class="line">                AcceptActivityFragment aaf = new AcceptActivityFragment();</div><div class="line">                <span class="comment">//2、初始化Bundle对象，并添加数据</span></div><div class="line">                Bundle bundle = new Bundle();</div><div class="line">                bundle<span class="selector-class">.putString</span>(<span class="string">"name"</span>,txt);</div><div class="line">                <span class="comment">//3、向自定义Fragment类对象传递数据包</span></div><div class="line">                aaf<span class="selector-class">.setArguments</span>(bundle);</div><div class="line">                </div><div class="line">                <span class="comment">//4、动态加载自定义Fragment</span></div><div class="line">                FragmentManager fm = getFragmentManager();</div><div class="line">                FragmentTransaction ft = fm<span class="selector-class">.beginTransaction</span>();</div><div class="line">                ft<span class="selector-class">.add</span>(R.id.layout, aaf, <span class="string">"AcceptActivityFragment"</span>);</div><div class="line">                ft<span class="selector-class">.commit</span>();</div><div class="line">                </div><div class="line">                Toast<span class="selector-class">.makeText</span>(MainActivity4.this,<span class="string">"Activity向Fragment发送数据"</span>+txt,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在Fragment中接收Activity传递过来的数据<br>思路：在Fragment中通过getArguments()方法获取传递过来的Bundle数据包对象，再调用Bundle对象的get(key)方法获取数据内容<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AcceptActivityFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</div><div class="line">            <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="type">View</span> view = inflater.inflate(<span class="type">R</span>.layout.fragment, container,<span class="literal">false</span>);</div><div class="line">        <span class="type">TextView</span> tv=(<span class="type">TextView</span>)view.findViewById(<span class="type">R</span>.id.tv);</div><div class="line">        </div><div class="line">        <span class="comment">//在Fragment中接收Activity传递过来的数据的步骤</span></div><div class="line">        <span class="comment">//1、使用getArguments()方法获取传递过来的数据包</span></div><div class="line">        <span class="type">Bundle</span> bun =  getArguments();</div><div class="line">        <span class="comment">//2、调用Bundle的get(key)方法获取数据内容</span></div><div class="line">        <span class="type">String</span>  txt = bun.get(<span class="string">"name"</span>)+<span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="comment">//上述1、2两步可合并为下面的写法</span></div><div class="line">        <span class="comment">//String  txt = getArguments().get("name")+"";</span></div><div class="line">        </div><div class="line">        tv.setText(txt);</div><div class="line">        <span class="type">Toast</span>.makeText(getActivity(),<span class="string">"Fragment已成功接收到"</span>+txt,<span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).show();</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="Activity向Fragment传递数据——静态加载fragment"><a href="#Activity向Fragment传递数据——静态加载fragment" class="headerlink" title="Activity向Fragment传递数据——静态加载fragment"></a>Activity向Fragment传递数据——静态加载fragment</h4><p>1、静态加载fragment，显示Activity向Fragment传递数据,<br>首先需要在布局文件中声明一个fragment组件，布局文件命名为main4.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">        <span class="attr">...</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/send"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 静态加载Fragment --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/frag"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"MyFragment2"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在Activity中向Fragment传递数据<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.main4);</div><div class="line"></div><div class="line">        <span class="comment">//1、静态加载fragment</span></div><div class="line">        <span class="type">FragmentManager</span> fm = getFragmentManager();</div><div class="line">        <span class="type">Fragment</span> frag = fm.findFragmentById(<span class="type">R</span>.id.frag);</div><div class="line">        </div><div class="line">        <span class="comment">//2、将通过findFragmentById()方法获取到的对象转换为MyFragment2类型</span></div><div class="line">        <span class="type">MyFragment2</span> myFrag = (<span class="type">MyFragment2</span>)frag;</div><div class="line"></div><div class="line">        <span class="comment">//3、通过Fragment子类的set方法，在Activity中向Fragment传递数据</span></div><div class="line">        myFrag.setAaa(<span class="string">"fragment静态传值"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在Fragment中接收Activity传递过来的数据<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class MyFragment2 extends Fragment&#123;</div><div class="line">    </div><div class="line">    private Button btn;</div><div class="line">    <span class="regexp">//</span><span class="number">1</span>、定义用于Activity向Fragment传值的变量及其get、set方法</div><div class="line">    private String aaa;</div><div class="line">    public String getAaa() &#123;</div><div class="line">        return aaa;</div><div class="line">    &#125;</div><div class="line">    public void setAaa(String aaa) &#123;</div><div class="line">        this.aaa = aaa;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        View view = inflater.inflate(R.layout.fragment, container,false);</div><div class="line">        </div><div class="line">        btn = (Button) view.findViewById(R.id.btn_fg);</div><div class="line">        btn.setText(<span class="string">"获取内容"</span>);</div><div class="line">        btn.setOnClickListener(new OnClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span><span class="regexp">/问题：为什么getAaa()在此处执行时无法获取到值/</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        </div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                <span class="regexp">//</span><span class="number">2</span>、在Fragment中接收Activity传递过来的数据</div><div class="line">                String val = getAaa();</div><div class="line">                Toast.makeText(getActivity(),<span class="string">"value="</span>+val,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        return view;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Fragment向Activity传递数据"><a href="#Fragment向Activity传递数据" class="headerlink" title="Fragment向Activity传递数据"></a>Fragment向Activity传递数据</h4><p>1、在Fragment中向Activity传递数据<br>思路:需要在Fragment中定义一个内部回调接口，这样Fragment可调用该回调方法将数据传递给Activity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String code = <span class="string">"Thank you,Activity!"</span>;</div><div class="line">    <span class="comment">//2、声明MyListener接口的对象</span></div><div class="line">    <span class="keyword">public</span> MyListener listener; </div><div class="line">    </div><div class="line">    <span class="comment">//1、声明一个内部接口MyListener</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyListener</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thank</span><span class="params">(String code)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Fragment生命周期的第一个方法，当Fragment被添加到Activity时会回调该方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        <span class="comment">//3、将宿主Activity对象传递给listener对象</span></div><div class="line">        listener=(MyListener)activity;</div><div class="line">        <span class="keyword">super</span>.onAttach(activity);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        View view = inflater.inflate(R.layout.fragment, container,<span class="keyword">false</span>);</div><div class="line">        </div><div class="line">        Toast.makeText(getActivity(),<span class="string">"向Activity发送数据"</span>+code,Toast.LENGTH_SHORT).show();</div><div class="line"></div><div class="line">        <span class="comment">//4、宿主activity对象(因第3步的赋值操作)直接调用接口方法，将数据传递给Activity</span></div><div class="line">        listener.thank(code);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;   </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在Activity中接收Fragment传递过来的数据<br>思路：让包含该Fragment的Activity实现该回调接口<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、让包含该Fragment的Activity实现该回调接口</span></div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> <span class="selector-tag">implements</span> <span class="selector-tag">MyListener</span>&#123;</div><div class="line">    </div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.main4</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//动态加载Fragment</span></div><div class="line">        MyFragment dyncFrag = new MyFragment();</div><div class="line">        FragmentManager fmanager = getFragmentManager();</div><div class="line">        FragmentTransaction trans =  fmanager<span class="selector-class">.beginTransaction</span>();</div><div class="line"></div><div class="line">        trans<span class="selector-class">.add</span>(R.id.dync, dyncFrag);</div><div class="line">        trans<span class="selector-class">.addToBackStack</span>(null);</div><div class="line">        trans<span class="selector-class">.commit</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//2、重写接口实现方法，获取Fragment传递过来的数据</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void thank(String code) &#123;</div><div class="line">        Toast<span class="selector-class">.makeText</span>(MainActivity.this,<span class="string">"已成功接收到Fragment传递过来的"</span>+code,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用ViewPager实现视图左右滑动的页卡效果"><a href="#使用ViewPager实现视图左右滑动的页卡效果" class="headerlink" title="使用ViewPager实现视图左右滑动的页卡效果"></a>使用ViewPager实现视图左右滑动的页卡效果</h2><p>本质：ViewPager是存放View对象或Fragment对象的容器，常用于导航</p>
<p>一些用法：加载显示的页卡时把布局文件转换为View对象的2种方式<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将layout布局转换为View对象的2种方式</span></div><div class="line"><span class="comment">//第一种方法</span></div><div class="line">LayoutInflater lf = getLayoutInflater().<span class="keyword">from</span>(<span class="keyword">this</span>);</div><div class="line">lf.inflate(resource,root);</div><div class="line"><span class="comment">//第二种方法</span></div><div class="line">View.inflate(context,resource,root);</div></pre></td></tr></table></figure></p>
<p>一些用法：为ViewPager配置适配器<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">一类数据源为<span class="keyword">View</span>集合，另一类数据源为Fragment集合</div><div class="line"><span class="comment">//</span></div><div class="line">PagerAdapter 数据源： <span class="keyword">List</span>&lt;<span class="keyword">View</span>&gt;</div><div class="line"><span class="comment">//</span></div><div class="line">FragmentPagerAdapter 数据源： <span class="keyword">List</span>&lt;Fragment&gt;</div><div class="line"><span class="comment">//</span></div><div class="line">FragmentStatePagerAdapter 数据源： <span class="keyword">List</span>&lt;Fragment&gt;</div></pre></td></tr></table></figure></p>
<h3 id="使用ViewPager的步骤——使用View对象作为ViewPager的数据源"><a href="#使用ViewPager的步骤——使用View对象作为ViewPager的数据源" class="headerlink" title="使用ViewPager的步骤——使用View对象作为ViewPager的数据源"></a>使用ViewPager的步骤——使用View对象作为ViewPager的数据源</h3><p>1、在xml布局文件中声明ViewPager控件，命名为main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--在布局文件中声明ViewPager控件与之前的控件不同，</span></div><div class="line">        它是android.support.v4兼容包下的一个控件--&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/vp"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、声明4个用于左右滑动的视图布局文件<br>命名为view.xml,view2.xml,view3.xml,view4.xml<br>内容类似普通布局文件<br>3、自定义PagerAdapter适配器子类MyPagerAdapter<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.view.PagerAdapter;</div><div class="line"><span class="comment">//自定义PagerAdapter适配器子类MyPagerAdapter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//声明存储数据源的对象</span></div><div class="line">    <span class="keyword">private</span> List&lt;View&gt; viewList;</div><div class="line">    </div><div class="line">    <span class="comment">//定义适配器的构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPagerAdapter</span><span class="params">(List&lt;View&gt; viewList)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.viewList = viewList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回所有页卡的总数量</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> viewList.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//判断当前View视图对象是否由Object产生</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View arg0, Object arg1)</span> </span>&#123;</div><div class="line">        <span class="comment">//官方写法</span></div><div class="line">        <span class="keyword">return</span> arg0==arg1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//增加必须实现的方法——instantiateItem</span></div><div class="line">    <span class="comment">//作用是实例化一个页卡</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">//将view对象添加到ViewGroup中</span></div><div class="line">        <span class="comment">//position为当前view在viewList中的位置</span></div><div class="line">        container.addView(viewList.get(position));</div><div class="line">        <span class="function"><span class="keyword">return</span> viewList.<span class="title">get</span><span class="params">(position)</span></span>;<span class="comment">//返回viewList中当前的view对象</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//增加必须实现的方法——destroyItem</span></div><div class="line">    <span class="comment">//作用是销毁一个页卡</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">        <span class="comment">//从ViewGroup中移除一个view对象</span></div><div class="line">        <span class="comment">//position为当前view在viewList中的位置</span></div><div class="line">        container.removeView(viewList.get(position));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在MainActivity中配置PagerAdapter适配器，实现4个view视图可以左右滑动的效果<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.view.<span class="type">ViewPager</span>;</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//声明List&lt;View&gt;对象，用于存储ViewPager的数据源</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">View</span>&gt; viewList;</div><div class="line">    <span class="keyword">private</span> <span class="type">ViewPager</span> vp;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//1、编写布局文件，声明android.support.v4.view.ViewPager控件</span></div><div class="line">        setContentView(<span class="type">R</span>.layout.main);</div><div class="line">        </div><div class="line">        <span class="comment">//2、初始化viewList和viewPager对象</span></div><div class="line">        viewList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">View</span>&gt;();</div><div class="line">        vp =  (<span class="type">ViewPager</span>) findViewById(<span class="type">R</span>.id.vp);</div><div class="line">        </div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 将View对象作为ViewPager的数据源</div><div class="line">         */</div><div class="line">        </div><div class="line">        <span class="comment">//3、把布局文件转换为View对象——使用第二种方法</span></div><div class="line">        <span class="comment">//View.inflate(上下文,布局文件ID,父组件)</span></div><div class="line">        <span class="type">View</span> v1 = <span class="type">View</span>.inflate(<span class="keyword">this</span>,<span class="type">R</span>.layout.view,<span class="literal">null</span>);</div><div class="line">        <span class="type">View</span> v2 = <span class="type">View</span>.inflate(<span class="keyword">this</span>,<span class="type">R</span>.layout.view2,<span class="literal">null</span>);</div><div class="line">        <span class="type">View</span> v3 = <span class="type">View</span>.inflate(<span class="keyword">this</span>,<span class="type">R</span>.layout.view3,<span class="literal">null</span>);</div><div class="line">        <span class="type">View</span> v4 = <span class="type">View</span>.inflate(<span class="keyword">this</span>,<span class="type">R</span>.layout.view4,<span class="literal">null</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//4、将View对象存储到List集合中，作为ViewPager的数据源</span></div><div class="line">        viewList.add(v1);</div><div class="line">        viewList.add(v2);</div><div class="line">        viewList.add(v3);</div><div class="line">        viewList.add(v4);</div><div class="line">        </div><div class="line">        <span class="comment">//5、自定义PagerAdapter适配器子类MyPagerAdapter</span></div><div class="line">        </div><div class="line">        <span class="comment">//6、实例化PagerAdapter适配器子类MyPagerAdapter对象</span></div><div class="line">        <span class="type">MyPagerAdapter</span> ad = <span class="keyword">new</span> <span class="type">MyPagerAdapter</span>(viewList);</div><div class="line">        </div><div class="line">        <span class="comment">//7、为ViewPager加载适配器</span></div><div class="line">        vp.setAdapter(ad);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用PagerTabStrip和PagerTitleStrip实现页卡标题效果"><a href="#使用PagerTabStrip和PagerTitleStrip实现页卡标题效果" class="headerlink" title="使用PagerTabStrip和PagerTitleStrip实现页卡标题效果"></a>使用PagerTabStrip和PagerTitleStrip实现页卡标题效果</h3><p>仅需稍稍修改上一节中的部分内容，即可实现页卡标题效果，具体修改如下：<br>1、在main.xml布局文件中的ViewPager控件中声明PagerTabStrip和PagerTitleStrip子控件<br>PagerTabStrip和PagerTitleStrip都是ViewPager控件的子控件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout ...&gt;</div><div class="line"></div><div class="line">    &lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span></div><div class="line">        ...同上一节中的的属性设置&gt;</div><div class="line">        </div><div class="line">        &lt;!-- PagerTabStrip是ViewPager的子控件 --&gt;</div><div class="line">        &lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.PagerTabStrip</span></div><div class="line">            android:id=<span class="string">"@+id/tab"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_gravity=<span class="string">"top"</span>&gt;</div><div class="line">        &lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.PagerTabStrip</span>&gt;</div><div class="line">        </div><div class="line">        &lt;!-- PagerTitleStrip是ViewPager的子控件，与 PagerTabStrip不可同时出现,本例是为了说明用法，才放于同一布局文件中--&gt;</div><div class="line">        &lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.PagerTitleStrip</span></div><div class="line">            android:id=<span class="string">"@+id/tab"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_gravity=<span class="string">"bottom"</span>&gt;</div><div class="line">        &lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.PagerTitleStrip</span>&gt;</div><div class="line"></div><div class="line">    &lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span>&gt;</div><div class="line">        </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>2、同上一节<br>3、在自定义PagerAdapter适配器子类MyPagerAdapter新增加如下代码<br>其他代码同上一节<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//声明页卡标题对象</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">String</span>&gt; titleList;</div><div class="line">    </div><div class="line">    <span class="comment">//创建该适配器二个参数的构造方法</span></div><div class="line">    public <span class="type">MyPagerAdapter</span>(<span class="type">List</span>&lt;<span class="type">View</span>&gt; viewList,<span class="type">List</span>&lt;<span class="type">String</span>&gt; titleList)&#123;</div><div class="line">        <span class="keyword">this</span>.viewList = viewList;</div><div class="line">        <span class="keyword">this</span>.titleList = titleList;</div><div class="line">    </div><div class="line">    <span class="comment">//实现页卡标题效果时必须实现的方法——getPageTitle</span></div><div class="line">    <span class="comment">//用于返回ViewPager的页卡标题信息</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">CharSequence</span> getPageTitle(int position) &#123;</div><div class="line">        <span class="comment">//position为当前页卡标题在titleList中的位置</span></div><div class="line">        <span class="keyword">return</span> titleList.get(position);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在MainActivity中新增如下代码<br>其他代码同上一节<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.view.<span class="type">PagerTabStrip</span>;</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//同上一节，代码省略</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">PagerTabStrip</span> tab;</div><div class="line">    <span class="comment">//标题集合</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">String</span>&gt; titleList;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//1、编写布局文件，声明android.support.v4.view.ViewPager控件</span></div><div class="line">        <span class="comment">//同上一节，代码省略</span></div><div class="line">        </div><div class="line">        <span class="comment">//2、初始化viewList和viewPager对象</span></div><div class="line">        <span class="comment">//同上一节，代码省略</span></div><div class="line">        <span class="comment">//初始化PagerTabStrip对象</span></div><div class="line">        tab = (<span class="type">PagerTabStrip</span>)findViewById(<span class="type">R</span>.id.tab);</div><div class="line"></div><div class="line">        <span class="comment">//3、把布局文件转换为View对象</span></div><div class="line">        <span class="comment">//同上一节，代码省略</span></div><div class="line">        </div><div class="line">        <span class="comment">//4、将View对象存储到List集合中，作为ViewPager的数据源</span></div><div class="line">        <span class="comment">//同上一节，代码省略</span></div><div class="line">        </div><div class="line">        <span class="comment">//为PagerTabStrip设置一些显示效果</span></div><div class="line">        tab.setBackgroundColor(<span class="type">Color</span>.<span class="type">YELLOW</span>);</div><div class="line">        tab.setTextColor(<span class="type">Color</span>.<span class="type">RED</span>);</div><div class="line">        tab.setDrawFullUnderline(<span class="literal">false</span>);<span class="comment">//去掉长分隔线</span></div><div class="line">        tab.setTabIndicatorColor(<span class="type">Color</span>.<span class="type">GREEN</span>);<span class="comment">//更改短分隔线的颜色</span></div><div class="line">        <span class="comment">//为ViewPager页卡设置标题</span></div><div class="line">        titleList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;();</div><div class="line">        titleList.add(<span class="string">"首页"</span>);</div><div class="line">        titleList.add(<span class="string">"要闻"</span>);</div><div class="line">        titleList.add(<span class="string">"图片"</span>);</div><div class="line">        titleList.add(<span class="string">"活动"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//5、自定义PagerAdapter适配器子类MyPagerAdapter</span></div><div class="line">        </div><div class="line">        <span class="comment">//6、实例化PagerAdapter适配器子类MyPagerAdapter对象</span></div><div class="line">        <span class="comment">//使用MyPagerAdapter的第二个构成方法</span></div><div class="line">        <span class="type">MyPagerAdapter</span> ad = <span class="keyword">new</span> <span class="type">MyPagerAdapter</span>(viewList,titleList);</div><div class="line">        </div><div class="line">        <span class="comment">//7、为ViewPager加载适配器</span></div><div class="line">        <span class="comment">//同上一节，代码省略</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、使用PagerTitleStrip控件时，只需在上一步的基础上，修改一下tab对象的类型为PagerTitleStrip即可，具体修改如下：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//private PagerTabStrip <span class="built_in">tab</span>;</div><div class="line">private PagerTitleStrip <span class="built_in">tab</span>;</div><div class="line"></div><div class="line">//<span class="built_in">tab</span> = (PagerTabStrip)findViewById(R.id.<span class="built_in">tab</span>);</div><div class="line"><span class="built_in">tab</span> = (PagerTitleStrip)findViewById(R.id.<span class="built_in">tab</span>);</div><div class="line"></div><div class="line">//<span class="built_in">tab</span>.setDrawFullUnderline(<span class="literal">false</span>);//去掉长分隔线</div><div class="line">//<span class="built_in">tab</span>.setTabIndicatorColor(Color.GREEN);//更改短分隔线的颜色</div></pre></td></tr></table></figure></p>
<h3 id="使用ViewPager的步骤——使用FragmentPagerAdapter的子类适配器"><a href="#使用ViewPager的步骤——使用FragmentPagerAdapter的子类适配器" class="headerlink" title="使用ViewPager的步骤——使用FragmentPagerAdapter的子类适配器"></a>使用ViewPager的步骤——使用FragmentPagerAdapter的子类适配器</h3><p>注: 使用的Fragment及FragmentPagerAdapter、FragmentStatePagerAdapter等全部都是android.support.v4包中的，为了保持与Fragment的兼容性</p>
<p>1、在xml布局文件中声明ViewPager控件，命名为main.xml<br>内容与“使用ViewPager的步骤——使用View对象作为ViewPager的数据源”中的main.xml完全相同<br>2、声明4个用于左右滑动的视图布局文件<br>内容与“使用ViewPager的步骤——使用View对象作为ViewPager的数据源”中的view.xml,view2.xml,view3.xml,view4.xml完全相同<br>3、创建四个类MyFragment1、MyFragment2、MyFragment3、MyFragment4，均继承自<br>android.support.v4.app.Fragment<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为在3.0以下使用fragment，导入并继承自android.support.v4.app.Fragment</span></div><div class="line"><span class="keyword">import</span> android.support.v4.app.<span class="type">Fragment</span>;</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyFragment3</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</div><div class="line">            <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">return</span> inflater.inflate(<span class="type">R</span>.layout.view, container, <span class="literal">false</span>);</div><div class="line">        <span class="comment">//其他三个android.support.v4.app.Fragment子类引用的布局文件为</span></div><div class="line">        <span class="comment">//R.layout.view2，R.layout.view3，R.layout.view4</span></div><div class="line">        <span class="comment">//其他完全相同</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、自定义FragmentPagerAdapter的子类MyFragmentPagerAdapter<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class="line"></div><div class="line"><span class="comment">//自定义FragmentPagerAdapter的子类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragmentPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//fragment数据源</span></div><div class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; fragList;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; titleList;</div><div class="line">    <span class="comment">//构造函数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFragmentPagerAdapter</span><span class="params">(FragmentManager fm,List&lt;Fragment&gt; fragList,List&lt;String&gt; titleList)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        <span class="keyword">this</span>.fragList = fragList;</div><div class="line">        <span class="keyword">this</span>.titleList = titleList;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//返回当前fragment对象</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> arg0)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="function"><span class="keyword">return</span> fragList.<span class="title">get</span><span class="params">(arg0)</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="function"><span class="keyword">return</span> fragList.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//获取页卡标题的方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="function"><span class="keyword">return</span> titleList.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、在MainActivity中配置MyFragmentPagerAdapter<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.graphics.<span class="type">Color</span>;</div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.<span class="type">Fragment</span>;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.<span class="type">FragmentActivity</span>;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.<span class="type">PagerTabStrip</span>;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.<span class="type">ViewPager</span>;</div><div class="line"><span class="keyword">import</span> android.view.<span class="type">View</span>;</div><div class="line"></div><div class="line"><span class="comment">//为了配合v4.Fragment的兼容性,MainActivity需要继承自android.support.v4.app.FragmentActivity</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">ViewPager</span> vp;</div><div class="line">    <span class="keyword">private</span> <span class="type">PagerTabStrip</span> tab;</div><div class="line">    <span class="comment">//标题集合</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">String</span>&gt; titleList;</div><div class="line">    </div><div class="line">    <span class="comment">//使用List&lt;Fragment&gt;对象，用于存储ViewPager的数据源</span></div><div class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">Fragment</span>&gt; fragList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//1、编写布局文件，声明android.support.v4.view.ViewPager控件</span></div><div class="line">        setContentView(<span class="type">R</span>.layout.main);</div><div class="line">        </div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 使用Fragment作为ViewPager的数据源</div><div class="line">         * */</div><div class="line"></div><div class="line">        <span class="comment">//2、初始化fragList和viewPager对象</span></div><div class="line">        fragList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">Fragment</span>&gt;();</div><div class="line">        vp =  (<span class="type">ViewPager</span>) findViewById(<span class="type">R</span>.id.vp);</div><div class="line">        tab = (<span class="type">PagerTabStrip</span>)findViewById(<span class="type">R</span>.id.tab);     </div><div class="line">        </div><div class="line">        <span class="comment">//为PagerTabStrip设置一些显示效果</span></div><div class="line">        tab.setBackgroundColor(<span class="type">Color</span>.<span class="type">YELLOW</span>);</div><div class="line">        tab.setTextColor(<span class="type">Color</span>.<span class="type">RED</span>);</div><div class="line">        tab.setDrawFullUnderline(<span class="literal">false</span>);<span class="comment">//去掉长分隔线</span></div><div class="line">        tab.setTabIndicatorColor(<span class="type">Color</span>.<span class="type">GREEN</span>);<span class="comment">//更改短分隔线的颜色</span></div><div class="line">        <span class="comment">//为ViewPager页卡设置标题</span></div><div class="line">        titleList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;();</div><div class="line">        titleList.add(<span class="string">"首页"</span>);</div><div class="line">        titleList.add(<span class="string">"要闻"</span>);</div><div class="line">        titleList.add(<span class="string">"图片"</span>);</div><div class="line">        titleList.add(<span class="string">"活动"</span>);</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//3、将View对象存储到fragList集合中，作为ViewPager的数据源</span></div><div class="line">        fragList.add(<span class="keyword">new</span> <span class="type">MyFragment1</span>());</div><div class="line">        fragList.add(<span class="keyword">new</span> <span class="type">MyFragment2</span>());</div><div class="line">        fragList.add(<span class="keyword">new</span> <span class="type">MyFragment3</span>());</div><div class="line">        fragList.add(<span class="keyword">new</span> <span class="type">MyFragment4</span>());</div><div class="line">        <span class="comment">//4、自定义FragmentPagerAdapter的子类数据适配器MyFragmentPagerAdapter</span></div><div class="line">        </div><div class="line">        <span class="comment">//5、配置MyFragmentPagerAdapter适配器</span></div><div class="line">        <span class="comment">//为了配合v4.Fragment的兼容性,使用getSupportFragmentManager()</span></div><div class="line">        <span class="type">MyFragmentPagerAdapter</span> fpd = <span class="keyword">new</span> <span class="type">MyFragmentPagerAdapter</span>(getSupportFragmentManager(),fragList,titleList);</div><div class="line">        <span class="comment">//6、加载MyFragmentPagerAdapter适配器对象</span></div><div class="line">        vp.setAdapter(fpd);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用ViewPager的步骤——使用FragmentStatePagerAdapter的子类适配器"><a href="#使用ViewPager的步骤——使用FragmentStatePagerAdapter的子类适配器" class="headerlink" title="使用ViewPager的步骤——使用FragmentStatePagerAdapter的子类适配器"></a>使用ViewPager的步骤——使用FragmentStatePagerAdapter的子类适配器</h3><p>使用FragmentStatePagerAdapter适配器与使用FragmentPagerAdapter适配器大同小异，仅需做二处修改，具体修改如下：<br>1、前三步与“使用ViewPager的步骤——使用FragmentPagerAdapter的子类适配器”一节的前三步一样<br>2、自定义FragmentStatePagerAdapter的子类MyFragmentStatePagerAdapter<br>新增instantiateItem和destroyItem方法，不需要重写<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v4.app.<span class="type">FragmentStatePagerAdapter</span>;</div><div class="line"></div><div class="line"><span class="comment">//自定义FragmentStatePagerAdapter的子类</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyFragmentStatePagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentStatePagerAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//其他代码同上一节的MyFragmentPagerAdapter</span></div><div class="line">    </div><div class="line">    <span class="comment">//新增instantiateItem方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">Object</span> instantiateItem(<span class="type">ViewGroup</span> arg0, int arg1) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.instantiateItem(arg0, arg1);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//新增destroyItem方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void destroyItem(<span class="type">ViewGroup</span> container, int position, <span class="type">Object</span> <span class="class"><span class="keyword">object</span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.destroyItem(container, position, <span class="class"><span class="keyword">object</span>)</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在MainActivity中配置MyFragmentStatePagerAdapter<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//其他代码同上一节的MainActivity</span></div><div class="line"></div><div class="line"><span class="comment">//4、配置MyFragmentStatePagerAdapter适配器</span></div><div class="line"><span class="type">MyFragmentStatePagerAdapter</span> fpd = <span class="function"><span class="keyword">new</span> <span class="title">MyFragmentStatePagerAdapter</span>(getSupportFragmentManager(),<span class="title">fragList</span>,<span class="title">titleList</span>);</span></div><div class="line"><span class="comment">//5、加载适配器</span></div><div class="line"><span class="title">vp</span>.<span class="title">setAdapter</span>(fpd);</div></pre></td></tr></table></figure></p>
<h3 id="ViewPager监听器OnPageChangeListener的用法"><a href="#ViewPager监听器OnPageChangeListener的用法" class="headerlink" title="ViewPager监听器OnPageChangeListener的用法"></a>ViewPager监听器OnPageChangeListener的用法</h3><p>onPageChangeListener()————用来监控ViewPager滑动到第几页<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span><span class="selector-class">.OnPageChangeListener</span>;</div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">FragmentActivity</span> <span class="selector-tag">implements</span> <span class="selector-tag">OnPageChangeListener</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//其他代码同上一节的MainActivity</span></div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        </div><div class="line">        <span class="comment">//其他代码同上一节的MainActivity</span></div><div class="line"></div><div class="line">        <span class="comment">//加载监听器</span></div><div class="line">        vp<span class="selector-class">.setOnPageChangeListener</span>(this);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onPageScrollStateChanged(int arg0) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onPageScrolled(int arg0, float arg1, int arg2) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//OnPageChangeListener接口中最常用的是该方法</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onPageSelected(int position) &#123;</div><div class="line">        <span class="comment">//position从0开始计数</span></div><div class="line">        Toast<span class="selector-class">.makeText</span>(this, <span class="string">"当前是第"</span>+position+<span class="string">"个页面"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用ViewFlipper实现屏幕自动切换动画效果"><a href="#使用ViewFlipper实现屏幕自动切换动画效果" class="headerlink" title="使用ViewFlipper实现屏幕自动切换动画效果"></a>使用ViewFlipper实现屏幕自动切换动画效果</h2><p>本质：ViewFlipper是Android系统自带的一个多页面管理控件，可以实现子界面的自动切换。</p>
<p>在ViewFlipper中导入子控件的两种方式——————静态导入与动态导入</p>
<p>1、静态导入(使用较少)<br>在layout布局文件是ViewFlipper中直接声明子控件<br>2、动态导入————使用addView()方法(使用较多)<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">flipper</span> = (ViewFlipper) findViewById(R.id.flipper)<span class="comment">;</span></div><div class="line">flipper.addView(R.drawable.pic1)<span class="comment">;</span></div><div class="line">flipper.addView(R.drawable.pic2)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>ViewFlipper的常用方法<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">setInAnimation</span><span class="params">()</span></span>  设置Vieww进入屏幕时使用的动画</div><div class="line">setOutAnimation   设置Vieww退出屏幕时使用的动画</div><div class="line"><span class="function"><span class="title">showNext</span><span class="params">()</span></span>        调用该函数来显示ViewFlipper里面的下一个View</div><div class="line"><span class="function"><span class="title">showPrevious</span><span class="params">()</span></span>    调用该函数来显示ViewFlipper里面的上一个View</div><div class="line"><span class="function"><span class="title">setFilpInterval</span><span class="params">()</span></span> 设置View之间切换的时间间隔</div><div class="line"><span class="function"><span class="title">startFlipping</span><span class="params">()</span></span>   使用上面设置的时间间隔来开始切换所有的View，切换会循环进行</div><div class="line"><span class="function"><span class="title">stopFlipping</span><span class="params">()</span></span>    停止View切换</div></pre></td></tr></table></figure></p>
<h3 id="使用ViewFlipper实现屏幕自动切换动画效果的步骤"><a href="#使用ViewFlipper实现屏幕自动切换动画效果的步骤" class="headerlink" title="使用ViewFlipper实现屏幕自动切换动画效果的步骤"></a>使用ViewFlipper实现屏幕自动切换动画效果的步骤</h3><p>1、在布局文件中声明ViewFlipper控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ViewFlipper</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/flipper"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        &gt;<span class="tag">&lt;/<span class="name">ViewFlipper</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中实现屏幕自动切换动画效果<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">ViewFlipper</span> vf;</div><div class="line">    <span class="comment">//子view的资源id数组</span></div><div class="line">    <span class="keyword">private</span> int[]resId = &#123;<span class="type">R</span>.drawable.pic1,<span class="type">R</span>.drawable.pic2,<span class="type">R</span>.drawable.pic3,<span class="type">R</span>.drawable.pic4&#125;;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//动态导入的方式为ViewFlipper加入子View</span></div><div class="line">        </div><div class="line">        <span class="comment">//1、初始化ViewFlipper对象</span></div><div class="line">        vf = (<span class="type">ViewFlipper</span>) findViewById(<span class="type">R</span>.id.flipper);</div><div class="line">        </div><div class="line">        <span class="comment">//2、遍历子view的资源id数组</span></div><div class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;resId.length;i++)&#123;</div><div class="line">            </div><div class="line">            <span class="comment">//3、动态导入的方式为ViewFlipper加入子View</span></div><div class="line">            vf.addView(getImageView(resId[i]));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//5、为ViewFlipper设置自动切换动画效果</span></div><div class="line">        vf.setInAnimation(<span class="keyword">this</span>,<span class="type">R</span>.anim.left_in);<span class="comment">//left_in为自定义的动画效果</span></div><div class="line">        vf.setOutAnimation(<span class="keyword">this</span>, <span class="type">R</span>.anim.left_out);<span class="comment">//left_out为自定义的动画效果</span></div><div class="line">        vf.setFlipInterval(<span class="number">3000</span>);<span class="comment">//设置视图切换时间间隔</span></div><div class="line">        vf.startFlipping();<span class="comment">//开始播放动画</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//4、实现通过子view的资源id数组索引来获取子view对象</span></div><div class="line">    <span class="keyword">private</span> <span class="type">ImageView</span> getImageView(int resId) &#123;</div><div class="line">        <span class="type">ImageView</span> iv = <span class="keyword">new</span> <span class="type">ImageView</span>(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//下面的方法无法显示全屏显示图片的效果</span></div><div class="line">        <span class="comment">//iv.setImageResource(resId);</span></div><div class="line">        </div><div class="line">        <span class="comment">//全屏显示图片</span></div><div class="line">        iv.setBackgroundResource(resId);</div><div class="line">        <span class="keyword">return</span> iv;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="支持手势滑动的ViewFlipper"><a href="#支持手势滑动的ViewFlipper" class="headerlink" title="支持手势滑动的ViewFlipper"></a>支持手势滑动的ViewFlipper</h3><p>只要是在MainActivity中添加支持手势的函数onTouchEvent,该函数监控手势滑动的事件处理，具体代码如下<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ViewFlipper vf;</div><div class="line">    <span class="comment">//子view的资源id数组</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[]resId = &#123;R.drawable.pic1,R.drawable.pic2,R.drawable.pic3,R.drawable.pic4&#125;;</div><div class="line">   </div><div class="line">    <span class="comment">//记录手指落下的x轴位置</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> startX;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//动态导入的方式为ViewFlipper加入子View</span></div><div class="line">        </div><div class="line">        <span class="comment">//1、初始化ViewFlipper对象</span></div><div class="line">        vf = (ViewFlipper) findViewById(R.id.flipper);</div><div class="line">        </div><div class="line">        <span class="comment">//2、遍历子view的资源id数组</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;resId.length;i++)&#123;</div><div class="line">            <span class="comment">//3、动态导入的方式为ViewFlipper加入子View</span></div><div class="line">            vf.addView(getImageView(resId[i]));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//4、实现通过子view的资源id数组索引来获取子view对象</span></div><div class="line">    <span class="keyword">private</span> <span class="function">ImageView <span class="title">getImageView</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">        ImageView iv = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//下面的方法无法显示全屏显示图片的效果</span></div><div class="line">        <span class="comment">//iv.setImageResource(resId);</span></div><div class="line">        </div><div class="line">        <span class="comment">//全屏显示图片</span></div><div class="line">        iv.setBackgroundResource(resId);</div><div class="line">        <span class="keyword">return</span> iv;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//5、为ViewFlipper设置根据手势切换动画效果</span></div><div class="line">    <span class="comment">//添加支持手势的函数onTouchEvent,该函数监控手势滑动的事件处理</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        </div><div class="line">        <span class="keyword">switch</span>(event.getAction())&#123;</div><div class="line">            <span class="comment">//手指落下</span></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:&#123;</div><div class="line">                startX = event.getX();<span class="comment">//获取X轴的位置</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//手指滑动</span></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:&#123;</div><div class="line">                <span class="comment">//向右滑动,查看前一页</span></div><div class="line">                <span class="keyword">if</span>(event.getX()-startX&gt;<span class="number">100</span>)&#123;</div><div class="line">                    vf.setInAnimation(<span class="keyword">this</span>, R.anim.left_in);</div><div class="line">                    vf.setInAnimation(<span class="keyword">this</span>, R.anim.left_out);</div><div class="line">                    vf.showPrevious();<span class="comment">//显示前一页</span></div><div class="line">                &#125;</div><div class="line">                <span class="comment">//向左滑动,显示后一页</span></div><div class="line">                <span class="keyword">if</span>(startX-event.getX()&gt;<span class="number">100</span>)&#123;</div><div class="line">                    vf.setInAnimation(<span class="keyword">this</span>, R.anim.right_in);</div><div class="line">                    vf.setInAnimation(<span class="keyword">this</span>, R.anim.right_out);</div><div class="line">                    vf.showNext();<span class="comment">//显示后一页</span></div><div class="line">                &#125;</div><div class="line">                <span class="comment">//其他情况认为是微小滑动，不执行操作</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//手指离开屏幕</span></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:&#123;</div><div class="line">                <span class="comment">//不需要执行任何操作</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTouchEvent</span><span class="params">(event)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用ScrollView实现滚动效果"><a href="#使用ScrollView实现滚动效果" class="headerlink" title="使用ScrollView实现滚动效果"></a>使用ScrollView实现滚动效果</h2><p>ScrollView(滚动视图)是指当屏幕拥有很多内容，一屏显示不完时，需要通过滚动来显示完成的视图</p>
<p>ScrollView的2个分类：<br>    HorizontalScrollView ———— 水平滚动视图<br>    ScrollView ———— 垂直滚动视图</p>
<p>隐藏ScrollView的滚动条方法<br>    标签属性：android:scrollbars=”none”<br>    代码设置：<br>        setHorizontalScrollBarEnabled(false); //隐藏水平ScrollView<br>        setVerticalScrollBarEnabled(false); //隐藏垂直ScrollView</p>
<h3 id="使用ScrollView可以实现滚动效果的步骤"><a href="#使用ScrollView可以实现滚动效果的步骤" class="headerlink" title="使用ScrollView可以实现滚动效果的步骤"></a>使用ScrollView可以实现滚动效果的步骤</h3><p>1、在布局文件中声明ScrollView控件，将将要滚动的视图如TextView作为其子控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/scroll"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:scrollbars</span>=<span class="string">"none"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中使用ScrollView实现滚动效果<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>&#123;</span></div><div class="line">    </div><div class="line">    <span class="keyword">private</span> TextView tv;</div><div class="line">    <span class="keyword">private</span> Button up,down;</div><div class="line">    <span class="keyword">private</span> ScrollView scroll;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//1、获取将要滚动的视图如TextView</span></div><div class="line">        tv = (TextView) findViewById(R.id.tv);</div><div class="line">        <span class="comment">//2、设置长文本</span></div><div class="line">        tv.setText(getResources().getString(R.string.longCon));</div><div class="line">        <span class="comment">//getResources().getString(R.string.longCon)的作用是</span></div><div class="line">        <span class="comment">//获取res文件夹下的string.xml文件中的longCon标签的内容</span></div><div class="line"></div><div class="line">        <span class="comment">//3、为ScrollView设置监听器setOnTouchListener()</span></div><div class="line">        <span class="comment">//判断ScrollView滑动到底部的公式:视图的总高度&lt;=一屏幕的高度+滚动条滚动的距离</span></div><div class="line">        scroll.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="keyword">boolean</span> onTouch(View v, MotionEvent event) &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">switch</span>(event.getAction())&#123;</div><div class="line">                    <span class="keyword">case</span> MotionEvent.<span class="string">ACTION_UP:</span>&#123;</div><div class="line">                        <span class="comment">//手指落下事件，本例中不做处理</span></div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">case</span> MotionEvent.<span class="string">ACTION_DOWN:</span>&#123;</div><div class="line">                        <span class="comment">//手指离开事件，本例中不做处理</span></div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//手指移动事件</span></div><div class="line">                    <span class="keyword">case</span> MotionEvent.<span class="string">ACTION_MOVE:</span>&#123;</div><div class="line">                        <span class="comment">/*</span></div><div class="line">                         * 1、getScrollY()——————滚动条滑动的距离</div><div class="line">                         * 2、getMeasuredHeight()————视图的总高度(包括屏幕外的部分)</div><div class="line">                         * 3、getHeight()————一屏幕的高度</div><div class="line">                         * </div><div class="line">                         */</div><div class="line">                        </div><div class="line">                        <span class="comment">//处于顶部状态</span></div><div class="line">                        <span class="keyword">if</span>(scroll.getScrollY()&lt;=<span class="number">0</span>)&#123;</div><div class="line">                            Log.i(<span class="string">"Main"</span>,<span class="string">"处于顶部"</span>);</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        <span class="comment">//底部状态</span></div><div class="line">                        <span class="comment">//TextView的总高度&lt;=一屏幕的高度+滚动条滚动的距离</span></div><div class="line">                        <span class="keyword">if</span>(scroll.getChildAt(<span class="number">0</span>).getMeasuredHeight()&lt;=scroll.getHeight()+scroll.getScrollY())&#123;</div><div class="line">                            Log.i(<span class="string">"Main"</span>,<span class="string">"滑到底部"</span>);</div><div class="line">                            Log.i(<span class="string">"Main"</span>,<span class="string">"scroll.getChildAt(0).getMeasuredHeight()="</span>+scroll.getChildAt(<span class="number">0</span>).getMeasuredHeight());</div><div class="line">                            Log.i(<span class="string">"Main"</span>,<span class="string">"scroll.getHeight()="</span>+scroll.getHeight());</div><div class="line">                            Log.i(<span class="string">"Main"</span>,<span class="string">"scroll.getScrollY()="</span>+scroll.getScrollY());</div><div class="line">                            </div><div class="line">                            <span class="comment">//追加文本</span></div><div class="line">                            tv.append(<span class="string">"这是一段追加文本"</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//为button添加click事件监听器，说明scrollTo与scrollBy的区别</span></div><div class="line">        up = (Button) findViewById(R.id.up);</div><div class="line">        down = (Button) findViewById(R.id.down);</div><div class="line">        </div><div class="line">        up.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        down.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onClick(View v) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">switch</span>(v.getId())&#123;</div><div class="line">            <span class="comment">//scrollTo()————参考滚动条最开始的位置，只能滚动一次</span></div><div class="line">            <span class="comment">//scrollBy()————相对滚动条前一次的位置进行滚动，可以实现持续滚动</span></div><div class="line">            <span class="keyword">case</span> R.id.<span class="string">up:</span>&#123;</div><div class="line">                scroll.scrollTo(<span class="number">0</span>,<span class="number">-30</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> R.id.<span class="string">down:</span>&#123;</div><div class="line">                scroll.scrollBy(<span class="number">0</span>,<span class="number">30</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用Gallery和ImageSwitcher制作图片浏览器"><a href="#使用Gallery和ImageSwitcher制作图片浏览器" class="headerlink" title="使用Gallery和ImageSwitcher制作图片浏览器"></a>使用Gallery和ImageSwitcher制作图片浏览器</h2><p>Gallery: android提供的一种可通过手机触摸来移动图片，产生图片滚动效果，还可以响应其他事件。</p>
<p>通过Gallery在UI上实现缩略图浏览器，通过ImageSwitcher显示预览大图。</p>
<p>1、在布局文件中声明了Gallery控件和ImageSwitcher控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Gallery</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/gallery"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageSwitcher</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgsw"</span>&gt;<span class="tag">&lt;/<span class="name">ImageSwitcher</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、编写继承自BaseAdapter的自定义适配器MyImageAdapter<br>BaseAdapter中重要方法<br>    public int getCount()  ————返回已定义的数据源的总数量<br>    public Obejct getItem(int position)<br>    public long getItem(int position)<br>            ————告诉适配器取得目前容器中的数据ID和对象<br>    public View getView(int position,View convertView,ViewGroup parent)<br>            ————取得目前欲显示的图像View，传入数组ID值使之读取与成像</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImageAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//数据源</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[]res;</div><div class="line">    <span class="comment">//上下文</span></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="comment">//定义构造方法，传递数据源</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyImageAdapter</span><span class="params">(<span class="keyword">int</span>[] res,Context context)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.res = res;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回已定义的数据源的总数量</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//返回res.length无法实现图片无限循环滚动显示</span></div><div class="line">        <span class="comment">//return res.length;</span></div><div class="line">        <span class="comment">//为实现图片无限循环滚动显示，需返回最大值</span></div><div class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//告诉适配器取得目前容器中的数据对象</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> res[position];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//告诉适配器取得目前容器中的数据ID</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> position;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//取得目前欲显示的图像View，传入数组ID值使之读取与成像</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        </div><div class="line">        ImageView img = <span class="keyword">new</span> ImageView(context);</div><div class="line">        <span class="comment">//直接取数据源的下标，无法实现图片无限循环滚动显示</span></div><div class="line">        <span class="comment">//img.setBackgroundResource(res[position]);</span></div><div class="line">        <span class="comment">//为实现图片无限循环滚动显示，需进行取余操作，因position因getCount()返回无限大，res.length为12</span></div><div class="line">        img.setBackgroundResource(res[position%res.length]);</div><div class="line">        <span class="comment">//设置图片在Gallery中缩略图的大小为200*150</span></div><div class="line">        img.setLayoutParams(<span class="keyword">new</span> Gallery.LayoutParams(<span class="number">200</span>, <span class="number">150</span>));</div><div class="line">        <span class="comment">//设置image的缩略模式</span></div><div class="line">        img.setScaleType(ScaleType.FIT_XY);</div><div class="line">        <span class="keyword">return</span> img;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、在MainActivity中实现手机触摸移动图片、大图预览效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">ViewFactory</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//官方建议使用HorizontalScrollView或android.support.v4.view.ViewPager替换Gallery</span></div><div class="line">    <span class="keyword">private</span> Gallery gall;</div><div class="line">    <span class="keyword">private</span> ImageSwitcher imgsw;</div><div class="line"></div><div class="line">    <span class="comment">//2、定义图片资源数据源</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] imgsId = &#123;R.drawable.item1,R.drawable.item2,R.drawable.item3,</div><div class="line">            R.drawable.item4,R.drawable.item5,R.drawable.item6,R.drawable.item7,</div><div class="line">            R.drawable.item8,R.drawable.item9,R.drawable.item10,</div><div class="line">            R.drawable.item11,R.drawable.item12&#125;;</div><div class="line"></div><div class="line">    <span class="comment">//声明自定义的适配器对象</span></div><div class="line">    <span class="keyword">private</span> MyImageAdapter adapter;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//1、初始化Gallery和ImageSwitcher对象</span></div><div class="line">        gall = (Gallery) findViewById(R.id.gallery);</div><div class="line">        imgsw = (ImageSwitcher) findViewById(R.id.imgsw);</div><div class="line">        </div><div class="line">        <span class="comment">//3、为Gallery对象加载自定义适配器</span></div><div class="line">        adapter = <span class="keyword">new</span> MyImageAdapter(imgsId,<span class="keyword">this</span>);</div><div class="line">        gall.setAdapter(adapter);</div><div class="line">        </div><div class="line">        <span class="comment">//4、为ImageSwitcher对象设置监听器，显示大图预览</span></div><div class="line">        imgsw.setFactory(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//为ImageSwitcher对象设置动画效果</span></div><div class="line">        imgsw.setInAnimation(AnimationUtils.loadAnimation(<span class="keyword">this</span>, android.R.anim.fade_in));</div><div class="line">        imgsw.setOutAnimation(AnimationUtils.loadAnimation(<span class="keyword">this</span>, android.R.anim.fade_out));</div><div class="line"></div><div class="line">        <span class="comment">//6、为Gallery设置监听器onItemSelected,实现大图预览当前选中的图片</span></div><div class="line">        gall.setOnItemSelectedListener(<span class="keyword">new</span> OnItemSelectedListener() &#123;</div><div class="line">            </div><div class="line">            <span class="comment">//7、在Gallery对象中选中图片，利用ImageSwitcher实现显示大图预览</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; parent, View view,</span></span></div><div class="line">                    <span class="keyword">int</span> position, <span class="keyword">long</span> id) &#123;</div><div class="line">                <span class="comment">//8、为ImageSwitcher对象加载图像资源</span></div><div class="line">                imgsw.setBackgroundResource(imgsId[position%imgsId.length]);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; parent)</span> </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;);  </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//5、为ImageSwitcher对象定义监听器的实现</span></div><div class="line">    <span class="comment">//ImageSwitcher粗略的理解就是ImageView的选择器，它需要实现ViewFactory接口</span></div><div class="line">    <span class="comment">//一般情况下，让该ViewFactory接口的makeView()方法返回ImageView对象</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">makeView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        ImageView img = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//按比例缩放图片，并居中显示</span></div><div class="line">        img.setScaleType(ScaleType.FIT_CENTER);</div><div class="line">        <span class="keyword">return</span> img;</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用SeekBar制作可拖动的进度条"><a href="#使用SeekBar制作可拖动的进度条" class="headerlink" title="使用SeekBar制作可拖动的进度条"></a>使用SeekBar制作可拖动的进度条</h2><p>SeekBar可以通过滑块的位置来标识数值，而且允许用户拖动滑块来改变进度值的大小</p>
<p>SeekBar的主要属性和方法<br>    setMax        设置SeekBar的最大数值<br>    setProgress   设置SeekBar当前的数值<br>    setSecondaryProgress 设置SeekBar的第二数值，即当前拖动条推荐的数值</p>
<p>SeekBar是ProgressBar的子类</p>
<p>SeekBar的事件<br>    由于拖动条可以被用户控制，所有需要对其进行事件监听，这就需要实现SeekBar.OnSeekBarChangeListener接口。此接口共需要监听三个事件，分别是：<br>        数值改变————onProgressChanged<br>        开始拖动————onStartTrackingTouch<br>        停止拖动————onStopTrackingTouch</p>
<h3 id="自定义SeekBar进度条样式————与ProgressBar类似"><a href="#自定义SeekBar进度条样式————与ProgressBar类似" class="headerlink" title="自定义SeekBar进度条样式————与ProgressBar类似"></a>自定义SeekBar进度条样式————与ProgressBar类似</h3><pre><code>查看SeekBar默认的样式style=&quot;@android:style/Widget.SeekBar&quot;
</code></pre><p>修改自定义SeekBar进度条样式的步骤<br>1、在drawable中编写thumb.xml文件,代码如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/select"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span> <span class="attr">android:state_window_focused</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/select"</span> <span class="attr">android:state_focused</span>=<span class="string">"true"</span> <span class="attr">android:state_window_focused</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/select"</span> <span class="attr">android:state_selected</span>=<span class="string">"true"</span> <span class="attr">android:state_window_focused</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/normal"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在主布局文件中修改SeekBar的如下属性即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;SeekBar</div><div class="line">    ...</div><div class="line">    <span class="comment">//改变进度条的样式</span></div><div class="line">    android:progressDrawable = <span class="string">"@drawable/seekbar_img"</span></div><div class="line">    <span class="comment">//改变滑块的样式</span></div><div class="line">    android:thumb = <span class="string">"@drawable/thumb"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">SeekBar</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="使用SeekBar制作可拖动的进度条的步骤"><a href="#使用SeekBar制作可拖动的进度条的步骤" class="headerlink" title="使用SeekBar制作可拖动的进度条的步骤"></a>使用SeekBar制作可拖动的进度条的步骤</h3><p>1、在布局文件中声明SeekBar控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- </span></div><div class="line">            android:max="100"  //最大进度值</div><div class="line">            android:progress="50"  //当前进度值</div><div class="line">     --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">SeekBar</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/seekbar"</span></div><div class="line">        <span class="attr">android:max</span>=<span class="string">"100"</span></div><div class="line">        <span class="attr">android:progress</span>=<span class="string">"50"</span>/&gt;</div><div class="line">    </div><div class="line">     <span class="comment">&lt;!--用于显示进度值的2个TextView--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">         <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">         <span class="attr">android:id</span>=<span class="string">"@+id/tv1"</span>/&gt;</div><div class="line">     </div><div class="line">     <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">         <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">         <span class="attr">android:id</span>=<span class="string">"@+id/tv2"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在MainActivity中使用SeekBar<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> &#123;</div><div class="line"></div><div class="line">    private SeekBar sb;</div><div class="line">    private TextView tv1,tv2;</div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//1、初始化</span></div><div class="line">        sb = (SeekBar) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.seekbar</span>);</div><div class="line">        tv1 = (TextView) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.tv1</span>);</div><div class="line">        tv2 = (TextView) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.tv2</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//2、绑定事件监听器</span></div><div class="line">        <span class="selector-tag">sb</span><span class="selector-class">.setOnSeekBarChangeListener</span>(new OnSeekBarChangeListener() &#123;</div><div class="line">            </div><div class="line">            <span class="comment">//停止拖动时调用该方法</span></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void onStopTrackingTouch(SeekBar seekBar) &#123;</div><div class="line">                tv1<span class="selector-class">.setText</span>(<span class="string">"停止拖动"</span>);</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//开始拖动时调用该方法</span></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void onStartTrackingTouch(SeekBar seekBar) &#123;</div><div class="line">                tv1<span class="selector-class">.setText</span>(<span class="string">"开始拖动"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//数值改变时调用该方法</span></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void onProgressChanged(SeekBar seekBar, int progress,</div><div class="line">                    boolean fromUser) &#123;</div><div class="line">                tv1<span class="selector-class">.setText</span>(<span class="string">"正在拖动"</span>);</div><div class="line">                <span class="comment">//显示当前数值</span></div><div class="line">                tv2<span class="selector-class">.setText</span>(<span class="string">"当前数值为"</span>+progress);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Android布局优化"><a href="#Android布局优化" class="headerlink" title="Android布局优化"></a>Android布局优化</h2><h3 id="推荐使用布局"><a href="#推荐使用布局" class="headerlink" title="推荐使用布局"></a>推荐使用布局</h3><p>一、Android五种常用布局<br>|    布局名称     |    特点| 使用频率|<br>| :——-:|:——–:|:——–:|:————–|<br>|    LinearLayout    |线性  垂直 水平|  4|<br>|    RelativeLayout  |最灵活的   相对定位|  5(最多)|<br> |   TableLayout     |行列，建议使用GridView代替|  2|<br>|    AbsoluteLayout  |不建议使用，兼容性差|      1(最少)|<br>|    FrameLayout     |布局叠加时使用，且该布局下的组件也都会叠加显示|  3|</p>
<p>二、Android布局原则</p>
<pre><code>1、尽量多使用LinearLayout和RelativeLayout，不要使用AbsoluteLayout。
2、在布局层次一样的情况下，建议使用LinearLayout代替RelativeLayout，
   因为LinearLayout性能稍高一点。
3、将可复用的组件抽取出来并通过include标签使用。
4、使用ViewStub标签来加载一些不常用的布局。
5、使用merge标签减少布局的嵌套层次。
</code></pre><h3 id="布局优化之include"><a href="#布局优化之include" class="headerlink" title="布局优化之include"></a>布局优化之include</h3><p>作用：将共用的组件抽取出来单独放到一个xml文件中，然后使用include标签导入共用布局<br>效果：提高UI的制作和复用效率，也能保证制作的UI布局更加规整和易维护；</p>
<p>使用inculde进行布局优化的步骤:</p>
<p>1、定义共用组件，如命名为common_title.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#000000"</span> </div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"10dp"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 公共标题组件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/ret"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"返回"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span></div><div class="line">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/title"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"布局优化"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fun"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"功能"</span></div><div class="line">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、使用include标签导入共用布局到主布局文件中,如命名为main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 导入通用标题部分 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> </span></div><div class="line">        <span class="attr">layout</span>=<span class="string">"@layout/common_title"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 正文部分 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"正文内容"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、在MainActivity中，可以使用所有组件<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//导入主布局文件</span></div><div class="line">setContentView(R.<span class="keyword">layout</span>.main);</div><div class="line"></div><div class="line"><span class="comment">//使用include标签导入到主布局文件中的布局，就如同主布局文件中声明的一样</span></div><div class="line"><span class="comment">//所以可以直接在MainActivity中使用common_title.xml文件中的组件</span></div><div class="line">TextView tv = (TextView)findViewById(R.id.ret)</div></pre></td></tr></table></figure></p>
<h3 id="布局优化之merge"><a href="#布局优化之merge" class="headerlink" title="布局优化之merge"></a>布局优化之merge</h3><p>作用：合并UI布局，使用该标签能降低UI布局的嵌套层次</p>
<p>使用场景一：布局根结点是FrameLayout且不需要设置background或padding等属性，可以用merge代替<br>使用场景二：某布局作为子布局被其他布局include时，使用merge当作该布局的顶节点，这样在被引入时顶节点会自动被忽略</p>
<p>使用merge进行布局优化的步骤:<br>1、定义共用布局，如命名为common_progress.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line"><span class="comment">&lt;!-- 在merge的第一种使用场景中，该merge节点是替换自没有background或padding等属性的FrameLayout布局根结点 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 在merge的第二种使用场景中，该merge节点将被忽略 --&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 公共环形进度条组件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wait"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"请稍后..."</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、使用include标签导入到主布局文件中,如命名为main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 导入通用标题部分 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> </span></div><div class="line">        <span class="attr">layout</span>=<span class="string">"@layout/common_title"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 正文部分 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"正文内容"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"18sp"</span>/&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- merge使用场景二：某布局(如common_progress.xml)作为子布局被其他布局</span></div><div class="line">             (如当前布局文件activity_main.xml)include时，</div><div class="line">              使用merge当作该布局的顶节点，这样在被引入时顶节点会自动被忽略</div><div class="line">              (即自动忽略了common_progress.xml中的&lt;merge ...&gt;这个节点) --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> </span></div><div class="line">            <span class="attr">layout</span>=<span class="string">"@layout/common_progress"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、在MainActivity中，可以使用所有组件<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//导入主布局文件</span></div><div class="line">setContentView(R.layout.main);</div><div class="line"></div><div class="line"><span class="comment">//使用include标签导入到主布局文件中的布局，就如同主布局文件中声明的一样</span></div><div class="line"><span class="comment">//所以可以直接在MainActivity中使用common_progress.xml文件中的组件</span></div><div class="line">TextView <span class="built_in">wait</span> = (TextView)findViewById(R.id.<span class="built_in">wait</span>);</div><div class="line"><span class="built_in">wait</span>.setText(<span class="string">"waiting"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="布局优化之viewStub惰性加载"><a href="#布局优化之viewStub惰性加载" class="headerlink" title="布局优化之viewStub惰性加载"></a>布局优化之viewStub惰性加载</h3><p>作用：Viewstub标签同include标签一样可以用来引入一个外部布局；<br>    不同的是，Viewstub引入的布局默认不会扩张(即默认不加载外部布局文件)，既不会占用显示<br>    也不会占用位置，从而在解析layout时节省cpu和内存。</p>
<p><strong>viewStub默认不加载外部布局文件，而由人为控制何时加载————惰性加载</strong></p>
<p>使用viewStub进行布局优化的步骤:<br>1、定义惰性加载布局，如命名为common_text.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/common_text"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"隐藏内容"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、使用ViewStub标签加载外部布局common_text.xml到主布局文件中,如命名为main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/show"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"显示隐藏外部布局"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 使用ViewStub惰性加载外部布局common_text.xml --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ViewStub</span> </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/stub"</span></div><div class="line">        <span class="attr">android:layout</span>=<span class="string">"@layout/common_text"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、在MainActivity中，惰性加载外部布局<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">TextView</span> commonText;</div><div class="line">    <span class="keyword">private</span> <span class="type">Button</span> show;</div><div class="line">    <span class="keyword">private</span> <span class="type">ViewStub</span> stub;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        </div><div class="line">        stub = (<span class="type">ViewStub</span>) findViewById(<span class="type">R</span>.id.stub);</div><div class="line">        show = (<span class="type">Button</span>)findViewById(<span class="type">R</span>.id.show);</div><div class="line">        </div><div class="line">        <span class="comment">//默认不加载外部布局文件，只有在点击按钮后才开始加载外部布局</span></div><div class="line">        show.setOnClickListener(<span class="keyword">new</span> <span class="type">OnClickListener</span>() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            public void onClick(<span class="type">View</span> v) &#123;</div><div class="line">                <span class="comment">//惰性加载加载布局，连续第二次点击按钮就会报错</span></div><div class="line">                <span class="comment">//stub.inflate();</span></div><div class="line">                <span class="comment">//惰性加载加载布局，连续多次点击按钮也会正常显示</span></div><div class="line">                stub.setVisibility(stub.<span class="type">VISIBLE</span>);</div><div class="line">                <span class="comment">//调用惰性加载布局文件中组件</span></div><div class="line">                commonText = (<span class="type">TextView</span>)findViewById(<span class="type">R</span>.id.common_text);</div><div class="line">                commonText.setText(<span class="string">"显示内容"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、android模拟器中的所有文件路径：<br>apk存在于Window-show view-Other-Android-File Explorer<br>2、在布局文件中声明ViewPager控件与之前的控件不同，它是android.support.v4兼容包下的一个控件<br>3、android.support.v4是谷歌为了解决当前android版本碎片化而提供的兼容性jar包，位于libs文件夹下。<br>4、android.support.v4主要目的是解决向下兼容性问题，使得高版本的控件在低版本系统中仍然可以正常使用。<br>5、PagerTabStrip和PagerTitleStrip都是ViewPager控件的子控件，二者不可以同时出现。<br>6、FragmentStatePagerAdapter与FragmentPagerAdapter适配器的区别：<br>FragmentPagerAdapter不会自动的创建和销毁页卡，一次性加载所有页卡；在页卡较少时可以使用该适配器。<br>FragmentStatePagerAdapter是自动的创建和销毁页卡，而不是一次性加载所有页卡；<br>PagerAdapter是自动的创建和销毁页卡，而不是一次性加载所有页卡；默认一次加载三个页卡。<br>7、ViewFlipper与ViewPager的用法区别：<br>通过手势的左右滑动切换视图，建议使用ViewPager；<br>ViewFlipper优点是实现子界面的自动切换；<br>8、控制scrollView视图的滚动条的位置scrollTo()与scrollBy()方法的区别：<br>scrollTo()————参考滚动条最开始的位置，只能滚动一次；<br>scrollBy()————相对滚动条前一次的位置进行滚动，可以实现持续滚动<br>9、ImageSwitcher和ImageView功能类似，都可以用于显示图片，区别在于ImageSwitcher的效果更炫，它可以指定图片切换时的动画效果<br>10、如果ctrl+左键无法打开资源文件时，可以使用如下方式查看：<br>..\sdk\platforms\android-19\data\res\drawable\资源名.xml<br>11、布局的嵌套层次：通过布局文件的outline可以查看布局的嵌套层次————每缩进一层，即是一个嵌套层次。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android入门二]]></title>
      <url>https://aiolos123.github.io/2016/09/06/learn-android-step-by-step-two/</url>
      <content type="html"><![CDATA[<p>本文为android入门的第二课的第一部分，学习了android高级控件、View视图的相关知识。<br>学习来源：<a href="http://www.imooc.com/learn/107" target="_blank" rel="external">http://www.imooc.com/learn/107</a><br><a id="more"></a></p>
<h2 id="AndroidManifest-xml配置文件"><a href="#AndroidManifest-xml配置文件" class="headerlink" title="AndroidManifest.xml配置文件"></a>AndroidManifest.xml配置文件</h2><p>本质：AndroidManifest.xml是整个应用的主配置清单文件。<br>包含：该应用的包名、版本号、组件、权限等信息。<br>作用：记录该应用的相关的配置信息</p>
<h3 id="AndroidManifest-xml三类常用标签"><a href="#AndroidManifest-xml三类常用标签" class="headerlink" title="AndroidManifest.xml三类常用标签"></a>AndroidManifest.xml三类常用标签</h3><h4 id="全局标签-包名、版本信息、android版本"><a href="#全局标签-包名、版本信息、android版本" class="headerlink" title="全局标签(包名、版本信息、android版本)"></a>全局标签(包名、版本信息、android版本)</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?</span>xml <span class="built_in">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></div><div class="line">&lt;manifest xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">   <span class="comment"> //应用的包名以及版本信息管理</span></div><div class="line">    package=<span class="string">"com.example.manifest21app"</span></div><div class="line">    android:versionCode=<span class="string">"1"</span></div><div class="line">    android:versionName=<span class="string">"1.0"</span> &gt;</div><div class="line">    </div><div class="line">   <span class="comment"> //控制android版本信息，支持的最低版本、期望的系统版本</span></div><div class="line">    &lt;uses-sdk</div><div class="line">        android:minSdkVersion=<span class="string">"8"</span></div><div class="line">        android:targetSdkVersion=<span class="string">"19"</span> /&gt;</div><div class="line">   <span class="comment"> //组件标签</span></div><div class="line">    ...</div><div class="line">   <span class="comment"> //权限标签</span></div><div class="line">    ...</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
<h4 id="组件标签-四大组件的声明和配置"><a href="#组件标签-四大组件的声明和配置" class="headerlink" title="组件标签(四大组件的声明和配置)"></a>组件标签(四大组件的声明和配置)</h4><p>使用application标签包裹，一个清单文件中只能包含一个application标签。<br>在其内部可以包含各种组件，如android的四大组件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">...</span>/&gt;</span></div><div class="line"></div><div class="line">    //组件标签</div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span>  //应用全局的图标</div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>  //应用全局的标题</div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>  //应用全局的主题样式</div><div class="line">    &gt;</div><div class="line">        //注册activity组件</div><div class="line">        //所有activity组件都必须在该配置文件中进行注册，否则程序会崩溃</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            //<span class="attr">activity</span>的唯一标识：使用包名<span class="attr">.</span>类名的命名方式</div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app.MainActivity"</span></div><div class="line">            //<span class="attr">activity</span>的标题</div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                //应用的主入口配置，一个android应用只有一个主入口配置</div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 注册其他组件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app.OtherActivity"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                //申明自身的标识</div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"aaa.bbb.ccc"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">service</span> </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app.BaseService"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">receiver</span> </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app.BaseReceiver"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"example.app.install"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">provider</span> </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.manifest21app.BaseProvider"</span></div><div class="line">            <span class="attr">android:authorities</span>=<span class="string">"aaa.bbb.ccc.ddd"</span>&gt;<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="权限标签-申请和定义权限的配置"><a href="#权限标签-申请和定义权限的配置" class="headerlink" title="权限标签(申请和定义权限的配置)"></a>权限标签(申请和定义权限的配置)</h4><h5 id="系统权限的使用"><a href="#系统权限的使用" class="headerlink" title="系统权限的使用"></a>系统权限的使用</h5><p>添加系统权限的步骤</p>
<pre><code>打开AndroidManifest.xml--&gt;Permissions选项卡--&gt;add--&gt;Uses permission--&gt;OK--&gt;Name下拉列表

使用&lt;user-permission&gt;申请系统权限
声明了哪些是由你选择的权限，而这些权限是应用程序正常秩序所必需的。
在安装程序时，你设定的所有权限将会告诉给用户，由他们来决定同意与否
</code></pre><p>代码示例如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">...</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--申请系统权限--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH"</span> <span class="attr">android:maxSdkVersion</span>=<span class="string">"16"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="自定义权限的使用"><a href="#自定义权限的使用" class="headerlink" title="自定义权限的使用"></a>自定义权限的使用</h5><pre><code>自定义权限可以自定义命名，来保护android的某些重要组件。
防止其他应用随意访问这些组件。
</code></pre><p>代码示例如下<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用permission声明自定义权限eee.fff.ggg</span></div><div class="line">&lt;permission</div><div class="line">    android:<span class="built_in">name</span>=<span class="string">"eee.fff.ggg"</span></div><div class="line">    android:maxSdkVersion=<span class="string">"16"</span>/&gt;</div><div class="line">&lt;activity </div><div class="line">            <span class="comment">//在将要使用的activity中使用android:permission属性来注册自定义权限eee.fff.ggg</span></div><div class="line">            <span class="comment">//注意：声明和使用的权限的名称必须一致。</span></div><div class="line">            android:permission=<span class="string">"eee.fff.ggg"</span></div><div class="line">            android:<span class="built_in">name</span>=<span class="string">"com.example.manifest21app.OtherActivity"</span>&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;<span class="built_in">action</span> android:<span class="built_in">name</span>=<span class="string">"aaa.bbb.ccc"</span>/&gt;</div><div class="line">                &lt;category android:<span class="built_in">name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line"></div><div class="line"><span class="comment">//这样就实现了保护android的这个activity组件。</span></div><div class="line"><span class="comment">//想使用该组件，必须使用如下方法，否则程序会崩溃</span></div><div class="line"><span class="comment">//在其他应用程序中，使用uses-permission标签申请自定义权限eee.fff.ggg，以使用该activity组件</span></div><div class="line"></div><div class="line">&lt;uses-permission </div><div class="line">        android:<span class="built_in">name</span>=<span class="string">"eee.fff.ggg"</span></div><div class="line">        android:maxSdkVersion=<span class="string">"16"</span>/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><pre><code>作用：把复杂的数据源(如数组、链表、数据库、集合等)填充到指定的视图界面上。
意义：数据适配器是连接数据源和视图界面的桥梁。
</code></pre><h3 id="使用适配器的三个步骤"><a href="#使用适配器的三个步骤" class="headerlink" title="使用适配器的三个步骤"></a>使用适配器的三个步骤</h3><pre><code>1、新建适配器
2、添加数据源到适配器
3、视图加载适配器
</code></pre><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><pre><code>作用：android提供很多种事件监听器，主要是为了响应某个动作(动作的发起者可能是用户也可能是android系统本身)。
通过监听这种动作行为，执行特定程序代码来完成需要的功能
意义：监听器是程序和用户(或系统)交互的桥梁。
本质：每个监听器都是一个接口
</code></pre><h3 id="使用监听器的二个步骤"><a href="#使用监听器的二个步骤" class="headerlink" title="使用监听器的二个步骤"></a>使用监听器的二个步骤</h3><pre><code>1、为视图直接设置监听器
2、在监听器的实现方法中补充需要的代码
</code></pre><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><pre><code>熟练运用OnScrollListener、OnItemClickListener两种监听器
熟练运用适配器数据的刷新NotifyDataChanged
</code></pre><h3 id="ListView是什么"><a href="#ListView是什么" class="headerlink" title="ListView是什么"></a>ListView是什么</h3><pre><code>作用：android系统中显示列表的控件
组成：每一个ListView都可以包含很多个列表项
类比: 类似于html中的ul，其中包含的列表项相当于li
</code></pre><h3 id="ListView下常用的两种适配器"><a href="#ListView下常用的两种适配器" class="headerlink" title="ListView下常用的两种适配器"></a>ListView下常用的两种适配器</h3><pre><code>ArrayAdapter(数组适配器):  用于绑定格式单一的数据；数据源可以是集合或数组。
SimpleAdapter(简单适配器): 用于绑定格式复杂的数据；数据源只能是特定泛型的集合。
</code></pre><h3 id="使用ListView的五个步骤"><a href="#使用ListView的五个步骤" class="headerlink" title="使用ListView的五个步骤"></a>使用ListView的五个步骤</h3><pre><code>1、初始化ListView视图对象
2、新建适配器
3、创建数据源并添加到适配器
4、ListView视图加载适配器
5、为ListView配置事件监听器
</code></pre><h3 id="ArrayAdapter的代码示例如下"><a href="#ArrayAdapter的代码示例如下" class="headerlink" title="ArrayAdapter的代码示例如下"></a>ArrayAdapter的代码示例如下</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ListView lv;</div><div class="line"><span class="keyword">private</span> ArrayAdapter&lt;<span class="keyword">String</span>&gt;arr_adapter;</div><div class="line"></div><div class="line">@Override</div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.main);</div><div class="line">    <span class="comment">//一、数组适配器的使用步骤</span></div><div class="line">    lv = (ListView)findViewById(R.id.lv);</div><div class="line">    <span class="comment">//1、新建数组适配器 - new</span></div><div class="line">    <span class="comment">//以数组为数据源的数组适配器的构造方法：</span></div><div class="line">    <span class="comment">//ArrayAdapter&lt;String&gt;(当前Activity上下文-即this本身, 当前ListView加载的每一个列表项所对应的布局文件, 数组数据源)</span></div><div class="line">    <span class="comment">//2、添加数据源到适配器</span></div><div class="line">    <span class="keyword">String</span>[]arr_data = &#123;<span class="string">"X课网1"</span>,<span class="string">"X课网2"</span>,<span class="string">"X课网3"</span>,<span class="string">"X课网4"</span>&#125;;</div><div class="line">    arr_adapter=<span class="keyword">new</span> ArrayAdapter&lt;<span class="keyword">String</span>&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, arr_data);</div><div class="line">    <span class="comment">//3、ListView视图加载适配器</span></div><div class="line">    lv.setAdapter(arr_adapter);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SimpleAdapter的代码示例如下"><a href="#SimpleAdapter的代码示例如下" class="headerlink" title="SimpleAdapter的代码示例如下"></a>SimpleAdapter的代码示例如下</h3><p>简单适配器的构造方法中的参数较多，注意与布局文件的ID的对应关系。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ListView lv;</div><div class="line"><span class="keyword">private</span> SimpleAdapter sim_adapter;</div><div class="line"><span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;&gt;dataList;</div><div class="line"></div><div class="line">@Override</div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.main);</div><div class="line">    </div><div class="line">    <span class="comment">//二、简单适配器的使用步骤</span></div><div class="line">    <span class="comment">//1、新建适配器</span></div><div class="line">    <span class="comment">//简单适配器的唯一一个构造方法:</span></div><div class="line">    <span class="comment">/* SimpleAdapter(context, data, resource, from, to)</span></div><div class="line">    * 其参数含义如下：</div><div class="line">    * context : 指当前Activity上下文--即this本身</div><div class="line">    * data: 数据源，是特定泛型的集合(List&lt;? extends Map&lt;String, ?&gt;&gt; data)</div><div class="line">    *       即一个由Map所组成的list集合</div><div class="line">    *       每一个Map都对应ListView中的一个列表项</div><div class="line">    *       每一个Map(键值对)中的键必须包含在from参数中</div><div class="line">    * resource: 列表项的布局文件ID</div><div class="line">    * from: 记录Map中的键的数组</div><div class="line">    * to: 绑定数据视图xml文件中的控件ID数组，与from成对应关系——即数组的第一个元素对应from数组的第一个元素</div><div class="line">    * </div><div class="line">    */</div><div class="line">    sim_adapter=<span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>, getData(), R.layout.item, <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"pic"</span>,<span class="string">"text"</span>&#125;, <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;R.id.pic,R.id.<span class="built_in">text</span>&#125;);</div><div class="line">    </div><div class="line">    <span class="comment">//如本例中</span></div><div class="line">    <span class="comment">//R.layout.item(即item.xml文件)就是列表项的布局文件的ID</span></div><div class="line">    <span class="comment">//to就是item.xml文件中的控件ID数组——new int[]&#123;R.id.pic,R.id.text&#125;</span></div><div class="line">    <span class="comment">//from就是记录Map中的键的数组——new String[]&#123;"pic","text"&#125;</span></div><div class="line">    <span class="comment">//data数据源就是生成数据源的getData()</span></div><div class="line">    <span class="comment">//3、ListView视图加载适配器</span></div><div class="line">    lv.setAdapter(sim_adapter);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//生成数据源</span></div><div class="line"><span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;&gt; getData()&#123;</div><div class="line">    <span class="comment">//每次新建一个Map,并保存到List集合中</span></div><div class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;<span class="built_in">map</span> =<span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;();</div><div class="line">        <span class="comment">//动态填充图片和文字内容</span></div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"pic"</span>,R.drawable.ic_launcher);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"text"</span>,<span class="string">"慕课网"</span>+i);</div><div class="line">        dataList.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dataList;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>item.xml列表项布局文件如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 图片在左，文字在右 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/pic"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#000000"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Demo"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="监听ListView列表项点击事件"><a href="#监听ListView列表项点击事件" class="headerlink" title="监听ListView列表项点击事件"></a>监听ListView列表项点击事件</h3><p>onItemClickListener: 处理ListView视图中单个条目的点击事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnItemClickListener</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ListView lv;</div><div class="line">    <span class="keyword">private</span> ArrayAdapter&lt;String&gt;arr_adapter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        lv = (ListView)findViewById(R.id.lv);</div><div class="line"></div><div class="line">        String[]arr_data = &#123;<span class="string">"X课网1"</span>,<span class="string">"X课网2"</span>,<span class="string">"X课网3"</span>,<span class="string">"X课网4"</span>&#125;;</div><div class="line">        arr_adapter=<span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, arr_data);</div><div class="line">        </div><div class="line">        lv.setAdapter(arr_adapter);</div><div class="line"></div><div class="line">        <span class="comment">//1、为ListView绑定监听器</span></div><div class="line">        lv.setOnItemClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2、在监听器的实现方法中补充需要的代码</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; arg0, View arg1, <span class="keyword">int</span> position, <span class="keyword">long</span> arg3)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        String tx = lv.getItemIdAtPosition(position)+<span class="string">""</span>;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"position="</span>+position+<span class="string">" text="</span>+tx, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="监听ListView列滚动事件"><a href="#监听ListView列滚动事件" class="headerlink" title="监听ListView列滚动事件"></a>监听ListView列滚动事件</h3><p>onScrollListener: 监听ListView滚动的变化，用于视图在滚动中加载数据<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnScrollListener</span>&#123;</span></div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        lv = (ListView)findViewById(R.id.lv);</div><div class="line">        </div><div class="line">        <span class="comment">//省略创建简单适配器的代码</span></div><div class="line">        lv.setAdapter(sim_adapter);</div><div class="line"></div><div class="line">        <span class="comment">//1、为ListView绑定监听器</span></div><div class="line">        lv.setOnScrollListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2、在监听器的实现方法中补充需要的代码</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onScroll(AbsListView view, <span class="keyword">int</span> firstVisibleItem,</div><div class="line">            <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount) &#123;       </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onScrollStateChanged(AbsListView view, <span class="keyword">int</span> scrollState) &#123;</div><div class="line">        <span class="keyword">switch</span>(scrollState)&#123;</div><div class="line">            <span class="comment">//手指没有离开屏幕，视图正在滑动</span></div><div class="line">            <span class="keyword">case</span> <span class="string">SCROLL_STATE_TOUCH_SCROLL:</span></div><div class="line">                Log.i(<span class="string">"main"</span>,<span class="string">"手指没有离开屏幕，视图正在滑动"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">            <span class="comment">//用户在手中离开屏幕前，用力滑动一下，视图仍依靠惯性继续滑动</span></div><div class="line">            <span class="keyword">case</span> <span class="string">SCROLL_STATE_FLING:</span></div><div class="line">                <span class="comment">//实现下拉增加列表项的功能：</span></div><div class="line">                <span class="comment">//第一步：向下滑动增加一条列表项</span></div><div class="line">                Map&lt;String,Object&gt;map =<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">                map.put(<span class="string">"pic"</span>,R.drawable.ic_launcher);</div><div class="line">                map.put(<span class="string">"text"</span>,<span class="string">"增加项"</span>+<span class="number">21</span>);</div><div class="line">                dataList.add(map);</div><div class="line">                <span class="comment">//第二步：更新视图界面的数据</span></div><div class="line">                <span class="comment">//notifyDataSetChanged用于动态更新视图中所包含的数据</span></div><div class="line">                sim_adapter.notifyDataSetChanged();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">            <span class="comment">//视图已停止滑动</span></div><div class="line">            <span class="keyword">case</span> <span class="string">SCROLL_STATE_IDLE:</span></div><div class="line">                Log.i(<span class="string">"main"</span>,<span class="string">"视图已停止滑动"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="DatePicker和TimePicker"><a href="#DatePicker和TimePicker" class="headerlink" title="DatePicker和TimePicker"></a>DatePicker和TimePicker</h2><p>DatePicker——动态输入并显示日期<br>TimePicker——动态输入并显示时间</p>
<h3 id="DatePickerDialog和TimePickerDialog"><a href="#DatePickerDialog和TimePickerDialog" class="headerlink" title="DatePickerDialog和TimePickerDialog"></a>DatePickerDialog和TimePickerDialog</h3><p>DatePickerDialog——动态输入并显示日期的对话框<br>TimePickerDialog——动态输入并显示时间的对话框</p>
<h3 id="两组监听日期时间改变的监听器"><a href="#两组监听日期时间改变的监听器" class="headerlink" title="两组监听日期时间改变的监听器"></a>两组监听日期时间改变的监听器</h3><table>
<thead>
<tr>
<th style="text-align:center">控件</th>
<th style="text-align:center">对应的监听器</th>
<th style="text-align:center">监听器的作用</th>
<th style="text-align:left">监听器里需要实现的事件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DatePicker</td>
<td style="text-align:center">OnDateChangedListener</td>
<td style="text-align:center">当用户更改了DatePicker里的年、月、日，将触发OnDateChangedListener监听器的onDateChange()事件</td>
<td style="text-align:left">onDateChange()事件</td>
</tr>
<tr>
<td style="text-align:center">TimePicker</td>
<td style="text-align:center">OnTimeChangedListener</td>
<td style="text-align:center">当用户更改了TimePicker里的时、分，将触发OnTimeChangedListener监听器的onTimeChange()事件</td>
<td style="text-align:left">onTimeChange()事件</td>
</tr>
<tr>
<td style="text-align:center">DatePickerDialog</td>
<td style="text-align:center">OnDateSetListener</td>
<td style="text-align:center">当用户更改了DatePickerDialog里的年、月、日，将触发OnDateSetListener监听器的onDateSet()事件</td>
<td style="text-align:left">onDateSet()事件</td>
</tr>
<tr>
<td style="text-align:center">TimePickerDialog</td>
<td style="text-align:center">OnTimeSetListener</td>
<td style="text-align:center">当用户更改了TimePickerDialog里的时、分，将触发OnTimeSetListener监听器的onTimeSet()事件</td>
<td style="text-align:left">onTimeSet()事件</td>
</tr>
</tbody>
</table>
<h3 id="DatePicker与TimePicker的代码示例"><a href="#DatePicker与TimePicker的代码示例" class="headerlink" title="DatePicker与TimePicker的代码示例"></a>DatePicker与TimePicker的代码示例</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    </div><div class="line">    private DatePicker dp;</div><div class="line">    private TimePicker timepk;</div><div class="line">    private Calendar cal;</div><div class="line">    private int year,month,day,hour,minute;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span>获取日历的一个对象</div><div class="line">        cal =Calendar.getInstance();</div><div class="line">        <span class="regexp">//</span>获取年月日时分秒的信息</div><div class="line">        year = cal.get(Calendar.YEAR);</div><div class="line">        month = cal.get(Calendar.MONTH)+<span class="number">1</span>;<span class="regexp">//</span>Calendar的月从<span class="number">0</span>开始</div><div class="line">        day = cal.get(Calendar.DAY_OF_MONTH);</div><div class="line">        hour = cal.get(Calendar.HOUR_OF_DAY);</div><div class="line">        minute = cal.get(Calendar.MINUTE);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span>将时间设置为app的标题</div><div class="line">        setTitle(year+<span class="string">"-"</span>+month+<span class="string">"-"</span>+day+<span class="string">" "</span>+hour+<span class="string">":"</span>+minute);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span>使用DatePicker的步骤</div><div class="line">        <span class="regexp">//</span><span class="number">1</span>、获取对象</div><div class="line">        dp = (DatePicker) findViewById(R.id.dp);</div><div class="line">        timepk = (TimePicker) findViewById(R.id.tp);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span><span class="number">2</span>、datePicker初始化</div><div class="line">        <span class="regexp">//</span>注意：month参数从<span class="number">0</span>开始表示月份，所以直接使用cal.get(Calendar.MONTH)即可</div><div class="line">        dp.init(year, cal.get(Calendar.MONTH), day, new OnDateChangedListener() &#123;</div><div class="line">            </div><div class="line">            @Override</div><div class="line">            public void onDateChanged(DatePicker view, int year, int monthOfYear,</div><div class="line">                    int dayOfMonth) &#123;</div><div class="line">                <span class="regexp">//</span><span class="number">3</span>、获取选取后的日期结果</div><div class="line">                <span class="regexp">//m</span>onthOfYear返回的值从<span class="number">0</span>开始</div><div class="line">                setTitle(year+<span class="string">"-"</span>+(monthOfYear+<span class="number">1</span>)+<span class="string">"-"</span>+dayOfMonth);  </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span>使用TimePicker的步骤</div><div class="line">        <span class="regexp">//</span><span class="number">2</span>、绑定监听器</div><div class="line">        timepk.setOnTimeChangedListener(new OnTimeChangedListener()&#123;</div><div class="line">            @Override</div><div class="line">            public void onTimeChanged(TimePicker view, int hourOfDay, int minute) &#123;</div><div class="line">                <span class="regexp">//</span><span class="number">3</span>、获取选取后的时间结果</div><div class="line">                setTitle(hourOfDay+<span class="string">":"</span>+minute);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="DatePickerDialog与TimePickerDialog的代码示例"><a href="#DatePickerDialog与TimePickerDialog的代码示例" class="headerlink" title="DatePickerDialog与TimePickerDialog的代码示例"></a>DatePickerDialog与TimePickerDialog的代码示例</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    </div><div class="line">    private Calendar cal;</div><div class="line">    private int year,month,day,hour,minute;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="regexp">//</span> TODO Auto-generated method stub</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span>获取日历的一个对象</div><div class="line">        cal =Calendar.getInstance();</div><div class="line">        <span class="regexp">//</span>获取年月日时分秒的信息</div><div class="line">        year = cal.get(Calendar.YEAR);</div><div class="line">        month = cal.get(Calendar.MONTH)+<span class="number">1</span>;<span class="regexp">//</span>Calendar的月从<span class="number">0</span>开始</div><div class="line">        day = cal.get(Calendar.DAY_OF_MONTH);</div><div class="line">        hour = cal.get(Calendar.HOUR_OF_DAY);</div><div class="line">        minute = cal.get(Calendar.MINUTE);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span>将时间设置为app的标题</div><div class="line">        setTitle(year+<span class="string">"-"</span>+month+<span class="string">"-"</span>+day+<span class="string">" "</span>+hour+<span class="string">":"</span>+minute);</div><div class="line">        </div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span>使用DatePickerDialog的步骤</div><div class="line">        <span class="regexp">//</span><span class="number">1</span>、实例化DatePickerDialog对象并显示出来</div><div class="line">        new DatePickerDialog(this, new OnDateSetListener() &#123;</div><div class="line">            </div><div class="line">            @Override</div><div class="line">            public void onDateSet(DatePicker view, int year, int monthOfYear,</div><div class="line">                    int dayOfMonth) &#123;</div><div class="line">                <span class="regexp">//</span><span class="number">2</span>、获取选取后的日期结果</div><div class="line">                setTitle(year+<span class="string">"-"</span>+(monthOfYear+<span class="number">1</span>)+<span class="string">"-"</span>+dayOfMonth);</div><div class="line">            &#125;</div><div class="line">        &#125;, year, cal.get(Calendar.MONTH), day).show();</div><div class="line"></div><div class="line">        <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></div><div class="line">        <span class="regexp">//</span>使用TimePickerDialog的步骤</div><div class="line">        <span class="regexp">//</span><span class="number">1</span>、实例化TimePickerDialog对象并显示出来</div><div class="line">        new TimePickerDialog(this, new OnTimeSetListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onTimeSet(TimePicker view, int hourOfDay, int minute) &#123;</div><div class="line">                <span class="regexp">//</span><span class="number">2</span>、获取选取后的时间结果</div><div class="line">                setTitle(hourOfDay+<span class="string">":"</span>+minute);</div><div class="line">            &#125;</div><div class="line">        &#125;, hour, minute, true).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><pre><code>1、DatePicker和DatePickerDialog的对象的初始化及其返回值中的月份都是从0开始的。所以在显示月份时都需要加1
2、DatePicker对象以init()方法来指定DatePicker初始的年、月、日及OnDateChangedListener()的事件;
3、TimePicker对象直接以setOnTimeChangedListener()事件来处理时间改变时程序要做的操作;
4、DatePickerDialog与TimePickerDialog和上面两类Picker对象的最大差别在于
XXXPicker是直接显示在屏幕界面上，而XXXPickerDialog对象则是以弹出Dialog的方式来显示。
5、使用DatePickerDialog与TimePickerDialog的方法都是直接在初始化其对象时
传入上下文、监听器的实现和年月日/时分参数即可。
而不像DatePicker与TimePicker需要初始化或绑定事件监听器。
</code></pre><h2 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h2><p>GridView用于在界面上按行、列分布的方式来显示多个组件</p>
<h3 id="使用GridView的五个步骤————同ListView"><a href="#使用GridView的五个步骤————同ListView" class="headerlink" title="使用GridView的五个步骤————同ListView"></a>使用GridView的五个步骤————同ListView</h3><pre><code>1、初始化GridView视图对象
2、新建适配器
3、创建数据源并添加到适配器
4、为GridView视图加载适配器
5、为GridView配置事件监听器——OnItemClickListener
</code></pre><h3 id="GridView使用示例代码"><a href="#GridView使用示例代码" class="headerlink" title="GridView使用示例代码"></a>GridView使用示例代码</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class MainActivity extends Activity implements OnItemClickListener&#123;</div><div class="line">    <span class="keyword">private</span> GridView gv;</div><div class="line">    <span class="keyword">private</span> SimpleAdapter simAda;</div><div class="line">    <span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;&gt; dataList;</div><div class="line">    <span class="comment">//图标icon数组</span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[]icons = &#123;R.drawable.address_book,R.drawable.calendar,</div><div class="line">            R.drawable.<span class="built_in">camera</span>,R.drawable.clock,R.drawable.games_control,</div><div class="line">            R.drawable.messenger,R.drawable.ringtone,R.drawable.settings,</div><div class="line">            R.drawable.speech_balloon,R.drawable.weather,R.drawable.world,</div><div class="line">            R.drawable.youtube</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//图标icon名称数组</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span>[]iconsName =&#123;</div><div class="line">            <span class="string">"通讯录"</span>,<span class="string">"日历"</span>,<span class="string">"照相机"</span>,<span class="string">"时钟"</span>,<span class="string">"游戏"</span>,</div><div class="line">            <span class="string">"短信"</span>,<span class="string">"铃声"</span>,<span class="string">"设置"</span>,<span class="string">"语音"</span>,<span class="string">"天气"</span>,<span class="string">"浏览器"</span>,</div><div class="line">            <span class="string">"视频"</span></div><div class="line">    &#125;;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//使用GridView的四个步骤</span></div><div class="line">        <span class="comment">//1、初始化GridView视图对象</span></div><div class="line">        gv = (GridView) findViewById(R.id.gv);</div><div class="line">        </div><div class="line">        <span class="comment">//2、新建适配器</span></div><div class="line">        <span class="comment">//3、创建数据源dataList并添加到适配器</span></div><div class="line">        dataList = <span class="keyword">new</span> ArrayList&lt;Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;&gt;();</div><div class="line">        simAda = <span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>,getData(),R.layout.item,<span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"img"</span>,<span class="string">"txt"</span>&#125;,<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;R.id.img,R.id.txt&#125;);</div><div class="line">        </div><div class="line">        <span class="comment">//4、为GridView视图加载适配器</span></div><div class="line">        gv.setAdapter(simAda);</div><div class="line">        <span class="comment">//5、为GridView配置事件监听器——OnItemClickListener</span></div><div class="line">        gv.setOnItemClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//3、创建数据源dataList</span></div><div class="line">    <span class="keyword">private</span> List&lt;Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;&gt; getData() &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;icons.length;i++)&#123;</div><div class="line">            Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;<span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;();</div><div class="line">            <span class="built_in">map</span>.put(<span class="string">"img"</span>, icons[i]);</div><div class="line">            <span class="built_in">map</span>.put(<span class="string">"txt"</span>,iconsName[i]);</div><div class="line">            dataList.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dataList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//通过接口实现监听器</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onItemClick(AdapterView&lt;?&gt; arg0, View arg1, <span class="built_in">int</span> position, <span class="keyword">long</span> arg3) &#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>,<span class="string">"我是"</span>+iconsName[position],Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用GridView视图时，需要2个布局文件"><a href="#使用GridView视图时，需要2个布局文件" class="headerlink" title="使用GridView视图时，需要2个布局文件"></a>使用GridView视图时，需要2个布局文件</h3><p>一个布局GridView控件，另一个布局GridView内组件<br>在布局GridView控件时，需要用到的属性如下：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">LinearLayout</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">GridView</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/gv"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">        &lt;!<span class="attr">--</span>每一行显示多少列<span class="attr">--</span>&gt;</div><div class="line">        android:numColumns="3"</div><div class="line">        <span class="comment">&lt;!--两列之间的间距--&gt;</span></div><div class="line">        android:horizontalSpacing="10dp"</div><div class="line">        <span class="comment">&lt;!--两行之间的间距--&gt;</span></div><div class="line">        android:verticalSpacing="10dp"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">GridView</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>另一个布局GridView内组件的XML文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span> </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/img"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/txt"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"android"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Spinner"><a href="#Spinner" class="headerlink" title="Spinner"></a>Spinner</h2><p>使用Spinner实现下拉列表的功能</p>
<h3 id="使用Spinner的六个步骤"><a href="#使用Spinner的六个步骤" class="headerlink" title="使用Spinner的六个步骤"></a>使用Spinner的六个步骤</h3><pre><code>1、初始化Spinner视图对象
2、创建数据源
3、新建适配器，添加数据源
4、为适配器设置下拉列表下拉时的菜单样式
5、为Spinner加载适配器
6、为Spinner配置事件监听器——OnItemSelectedListener
</code></pre><h3 id="使用Spinner示例代码"><a href="#使用Spinner示例代码" class="headerlink" title="使用Spinner示例代码"></a>使用Spinner示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnItemSelectedListener</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> TextView tv;</div><div class="line">    <span class="keyword">private</span> Spinner sp;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt;list;</div><div class="line">    <span class="keyword">private</span> ArrayAdapter&lt;String&gt;ad;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//1、初始化Spinner视图对象</span></div><div class="line">        tv = (TextView)findViewById(R.id.tv);</div><div class="line">        tv.setText(<span class="string">"您选择的城市是：北京"</span>);</div><div class="line">        sp = (Spinner) findViewById(R.id.sp);</div><div class="line">        </div><div class="line">        <span class="comment">//2、设置数据源</span></div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        list.add(<span class="string">"北京"</span>);</div><div class="line">        list.add(<span class="string">"上海"</span>);</div><div class="line">        list.add(<span class="string">"广州"</span>);</div><div class="line">        list.add(<span class="string">"深圳"</span>);</div><div class="line">        <span class="comment">//3、新建ArrayAdapter</span></div><div class="line">        ad = <span class="keyword">new</span> ArrayAdapter(<span class="keyword">this</span>,android.R.layout.simple_spinner_item,list);</div><div class="line">        <span class="comment">//4、为适配器设置下拉列表下拉时的菜单样式</span></div><div class="line">        ad.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);</div><div class="line">        <span class="comment">//5、为Spinner加载适配器</span></div><div class="line">        sp.setAdapter(ad);</div><div class="line">        <span class="comment">//6、为Spinner配置事件监听器——OnItemSelectedListener</span></div><div class="line">        sp.setOnItemSelectedListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//6、为Spinner配置事件监听器——OnItemSelectedListener</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; arg0, View arg1, <span class="keyword">int</span> position,</span></span></div><div class="line">            <span class="keyword">long</span> arg3) &#123;</div><div class="line">        String cityName = ad.getItem(position);</div><div class="line">        <span class="comment">//或者使用如下方式获取下拉列表项</span></div><div class="line">        <span class="comment">//String cityName = list.get(position);</span></div><div class="line">        tv.setText(<span class="string">"您选择的城市是："</span>+cityName);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; arg0)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">           </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Spinner的布局文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Spinner</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/sp"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line">    </div><div class="line"> <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h2><p>ProgressBar是进度条组件，通常用于展示耗时操作完成的进度。<br>使用ProgressBar实现加载进度条效果</p>
<h3 id="定制ProgressBar显示风格"><a href="#定制ProgressBar显示风格" class="headerlink" title="定制ProgressBar显示风格"></a>定制ProgressBar显示风格</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout <span class="params">...</span>&gt;</div><div class="line">    &lt;ProgressBar</div><div class="line">        android:id=<span class="string">"@+id/pb"</span></div><div class="line">        style=<span class="string">"?android:attr/progressBarStyleLarge"</span>  <span class="comment">//大环形进度条</span></div><div class="line">        <span class="comment">//不设置style属性时，默认为中环形进度条</span></div><div class="line">        style=<span class="string">"?android:attr/progressBarStyleSmall"</span>   <span class="comment">//小环形进度条</span></div><div class="line">        style=<span class="string">"?android:attr/progressBarStyleHorizontal"</span>   <span class="comment">//水平进度条</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span> /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="ProgressBar的两个分类"><a href="#ProgressBar的两个分类" class="headerlink" title="ProgressBar的两个分类"></a>ProgressBar的两个分类</h3><p>一种是可以精确显示进度(可以显示刻度或百分比)————水平进度条<br>一种是不能精确显示进度(一直转,类似于一个过渡动画)————环形进度条</p>
<h3 id="标题栏显示ProgressBar"><a href="#标题栏显示ProgressBar" class="headerlink" title="标题栏显示ProgressBar"></a>标题栏显示ProgressBar</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//启用窗口特征，启用带进度和不带进度的进度条</span></div><div class="line">        requestWindowFeature(<span class="type">Window</span>.<span class="type">FEATURE_PROGRESS</span>);</div><div class="line">        requestWindowFeature(<span class="type">Window</span>.<span class="type">FEATURE_INDETERMINATE_PROGRESS</span>);</div><div class="line">        </div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//显示带进度的进度条;false为不显示进度条</span></div><div class="line">        setProgressBarVisibility(<span class="literal">true</span>);</div><div class="line">        <span class="comment">//设置带进度的进度条的刻度，最大刻度是一个常量值：1万</span></div><div class="line">        <span class="comment">//当设置为1万时，表示完成，进度条消失。</span></div><div class="line">        setProgress(<span class="number">600</span>);</div><div class="line">        <span class="comment">//显示不带进度的进度条;false为不显示进度条</span></div><div class="line">        setProgressBarIndeterminateVisibility(<span class="literal">true</span>);   </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ProgressBar的关键属性"><a href="#ProgressBar的关键属性" class="headerlink" title="ProgressBar的关键属性"></a>ProgressBar的关键属性</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">android:</span>secondaryProgress=<span class="string">"80"</span> <span class="comment">//缓存进度</span></div><div class="line"><span class="symbol">android:</span>progress=<span class="string">"50"</span>  <span class="comment">//播放进度</span></div><div class="line"><span class="symbol">android:</span>max=<span class="string">"100"</span>     <span class="comment">//最大进度</span></div><div class="line"><span class="comment">//设置是否精确显示，true表示不精确显示进度；false为精确显示进度</span></div><div class="line"><span class="symbol">android:</span>indeterminate=<span class="string">"true"</span></div></pre></td></tr></table></figure>
<h3 id="ProgressBar的关键方法"><a href="#ProgressBar的关键方法" class="headerlink" title="ProgressBar的关键方法"></a>ProgressBar的关键方法</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">setProgress</span><span class="params">(int)</span></span>  <span class="comment">//设置播放进度</span></div><div class="line"><span class="function"><span class="title">getProgress</span><span class="params">()</span></span>  <span class="comment">//获取播放进度</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">setSecondaryProgress</span><span class="params">(int)</span></span> <span class="comment">//设置缓存进度</span></div><div class="line"><span class="function"><span class="title">getSecondaryProgress</span><span class="params">()</span></span>  <span class="comment">//获取缓存进度</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">incrementProgressBy</span><span class="params">(int)</span></span>  <span class="comment">//增加或减少播放进度</span></div><div class="line"><span class="function"><span class="title">incrementSecondaryProgressBy</span><span class="params">(int)</span></span>  <span class="comment">//增加或减少缓存进度</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">getMax</span><span class="params">()</span></span>  <span class="comment">//获取最大进度</span></div></pre></td></tr></table></figure>
<h3 id="使用ProgressBar实现加载进度条示例代码"><a href="#使用ProgressBar实现加载进度条示例代码" class="headerlink" title="使用ProgressBar实现加载进度条示例代码"></a>使用ProgressBar实现加载进度条示例代码</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span> <span class="selector-tag">implements</span> <span class="selector-tag">OnClickListener</span>&#123;</div><div class="line">    </div><div class="line">    private ProgressBar pro;</div><div class="line">    private Button add,reduce,reset;</div><div class="line">    private TextView tv;</div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line">        </div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        <span class="comment">//初始化控件</span></div><div class="line">        pro = (ProgressBar) findViewById(R<span class="selector-class">.id</span><span class="selector-class">.hor</span>);</div><div class="line">        add = (Button)findViewById(R<span class="selector-class">.id</span><span class="selector-class">.add</span>);</div><div class="line">        reduce = (Button)findViewById(R<span class="selector-class">.id</span><span class="selector-class">.reduce</span>);</div><div class="line">        reset = (Button)findViewById(R<span class="selector-class">.id</span><span class="selector-class">.reset</span>);</div><div class="line">        tv = (TextView)findViewById(R<span class="selector-class">.id</span><span class="selector-class">.text</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//获取播放进度</span></div><div class="line">        int playProgress = pro<span class="selector-class">.getProgress</span>();</div><div class="line">        <span class="comment">//获取缓存进度</span></div><div class="line">        int cacheProgress = pro<span class="selector-class">.getSecondaryProgress</span>();</div><div class="line">        <span class="comment">//获取最大进度</span></div><div class="line">        int maxProgress = pro<span class="selector-class">.getMax</span>();</div><div class="line">        <span class="comment">//设置最初的显示文本</span></div><div class="line">        tv<span class="selector-class">.setText</span>(<span class="string">"播放进度"</span>+(int)(playProgress/(float)maxProgress*<span class="number">100</span>)+<span class="string">"% 缓存进度="</span>+(int)(cacheProgress/(float)maxProgress*<span class="number">100</span>)+<span class="string">"%"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//设置button的监听器</span></div><div class="line">        add<span class="selector-class">.setOnClickListener</span>(this);</div><div class="line">        reduce<span class="selector-class">.setOnClickListener</span>(this);</div><div class="line">        reset<span class="selector-class">.setOnClickListener</span>(this);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//在监听器中处理按钮的逻辑</span></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        </div><div class="line">        <span class="selector-tag">switch</span>(v.getId())&#123;</div><div class="line">            <span class="selector-tag">case</span> <span class="selector-tag">R</span><span class="selector-class">.id</span><span class="selector-class">.add</span>:&#123;</div><div class="line">                <span class="comment">//增加播放进度和缓存进度 10个刻度</span></div><div class="line">                pro<span class="selector-class">.incrementProgressBy</span>(<span class="number">10</span>);</div><div class="line">                pro<span class="selector-class">.incrementSecondaryProgressBy</span>(<span class="number">10</span>);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            case R.id.<span class="attribute">reduce</span>:&#123;</div><div class="line">                <span class="comment">//减少播放进度和缓存进度 10个刻度</span></div><div class="line">                pro<span class="selector-class">.incrementProgressBy</span>(-<span class="number">10</span>);</div><div class="line">                pro<span class="selector-class">.incrementSecondaryProgressBy</span>(-<span class="number">10</span>);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            case R.id.<span class="attribute">reset</span>:&#123;</div><div class="line">                <span class="comment">//重置进度条</span></div><div class="line">                pro<span class="selector-class">.setProgress</span>(<span class="number">50</span>);</div><div class="line">                pro<span class="selector-class">.setSecondaryProgress</span>(<span class="number">80</span>);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//设置最后的显示文本</span></div><div class="line">        tv<span class="selector-class">.setText</span>(<span class="string">"播放进度"</span>+(int)(pro.getProgress()/(float)pro.getMax()*<span class="number">100</span>)+<span class="string">"% 缓存进度="</span>+(int)(pro.getSecondaryProgress()/(float)pro.getMax()*<span class="number">100</span>)+<span class="string">"%"</span>);           </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="对话框形式的进度条ProgressDialog的使用"><a href="#对话框形式的进度条ProgressDialog的使用" class="headerlink" title="对话框形式的进度条ProgressDialog的使用"></a>对话框形式的进度条ProgressDialog的使用</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MainActivity</span> <span class="selector-tag">extends</span> <span class="selector-tag">Activity</span>&#123;</div><div class="line">    </div><div class="line">    private Button btn;</div><div class="line">    private ProgressDialog pd;</div><div class="line"></div><div class="line">    <span class="variable">@Override</span></div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super<span class="selector-class">.onCreate</span>(savedInstanceState);</div><div class="line">        setContentView(R<span class="selector-class">.layout</span><span class="selector-class">.activity_main</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//ProgressDialog的使用</span></div><div class="line">        btn = (Button)findViewById(R<span class="selector-class">.id</span><span class="selector-class">.btn</span>);</div><div class="line">        <span class="selector-tag">btn</span><span class="selector-class">.setOnClickListener</span>(new OnClickListener() &#123;</div><div class="line">            </div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                </div><div class="line">                <span class="comment">//1、设置ProgressDialog界面风格</span></div><div class="line"></div><div class="line">                <span class="comment">//创建ProgressDialog对象</span></div><div class="line">                pd = new ProgressDialog(MainActivity<span class="selector-class">.this</span>);</div><div class="line">                <span class="comment">//设置显示风格——进度条的种类</span></div><div class="line">                pd<span class="selector-class">.setProgressStyle</span>(pd.STYLE_HORIZONTAL);</div><div class="line">                <span class="comment">//设置标题</span></div><div class="line">                pd<span class="selector-class">.setTitle</span>(<span class="string">"X课网"</span>);</div><div class="line">                <span class="comment">//设置对话框里的文字信息</span></div><div class="line">                pd<span class="selector-class">.setMessage</span>(<span class="string">"欢迎访问本博客"</span>);</div><div class="line">                <span class="comment">//设置标题icon</span></div><div class="line">                pd<span class="selector-class">.setIcon</span>(R.drawable.ic_launcher);</div><div class="line">                </div><div class="line">                <span class="comment">//2、设置ProgressDialog进度条信息</span></div><div class="line"></div><div class="line">                <span class="comment">//设置进度条最大刻度</span></div><div class="line">                pd<span class="selector-class">.setMax</span>(<span class="number">100</span>);</div><div class="line">                <span class="comment">//设置初始状态已经增长到的进度</span></div><div class="line">                pd<span class="selector-class">.incrementProgressBy</span>(<span class="number">50</span>);</div><div class="line">                <span class="comment">//设置进度条精确显示进度</span></div><div class="line">                pd<span class="selector-class">.setIndeterminate</span>(false);</div><div class="line">                </div><div class="line">                <span class="comment">//3、设置一个确定按钮</span></div><div class="line">                <span class="selector-tag">pd</span><span class="selector-class">.setButton</span>(DialogInterface.BUTTON_POSITIVE, <span class="string">"确定"</span>, new DialogInterface.OnClickListener() &#123;</div><div class="line">                    </div><div class="line">                    <span class="variable">@Override</span></div><div class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                        Toast<span class="selector-class">.makeText</span>(MainActivity.this, <span class="string">"欢迎大家访问本博客"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                </div><div class="line">                <span class="comment">//4、设置是否可以通过返回物理按钮退出对话框</span></div><div class="line">                <span class="selector-tag">pd</span><span class="selector-class">.setCancelable</span>(true);<span class="comment">//true表示可以</span></div><div class="line">                </div><div class="line">                <span class="comment">//5、显示ProgressDialog</span></div><div class="line">                <span class="selector-tag">pd</span><span class="selector-class">.show</span>();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义进度条样式"><a href="#自定义进度条样式" class="headerlink" title="自定义进度条样式"></a>自定义进度条样式</h3><h4 id="默认进度条样式的引用路径"><a href="#默认进度条样式的引用路径" class="headerlink" title="默认进度条样式的引用路径"></a>默认进度条样式的引用路径</h4><p>从ProgressBar的xml布局文件的style<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@android:style/Widget.ProgressBar.Horizontal"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>进入到style.xml文件的android:progressDrawable<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=<span class="string">"Widget.ProgressBar.Horizontal"</span>&gt;</div><div class="line">    &lt;item name=<span class="string">"android:progressDrawable"</span>&gt;<span class="variable">@android</span><span class="symbol">:drawable/progress_horizontal&lt;/item&gt;</span></div><div class="line">&lt;<span class="regexp">/style&gt;</span></div></pre></td></tr></table></figure></p>
<p>再进入到progress_horizontal.xml文件<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">item</span> android:<span class="built_in">id</span>=<span class="string">"@android:id/background"</span>&gt;设置进度条背景&lt;/<span class="built_in">item</span>&gt;</div><div class="line">&lt;<span class="built_in">item</span> android:<span class="built_in">id</span>=<span class="string">"@android:id/secondaryProgress"</span>&gt;设置缓存进度条&lt;/<span class="built_in">item</span>&gt;</div><div class="line">&lt;<span class="built_in">item</span> android:<span class="built_in">id</span>=<span class="string">"@android:id/progress"</span>&gt;设置播放进度条&lt;/<span class="built_in">item</span>&gt;</div></pre></td></tr></table></figure></p>
<h4 id="自定义进度条样式-1"><a href="#自定义进度条样式-1" class="headerlink" title="自定义进度条样式"></a>自定义进度条样式</h4><p>1、首先在drawable文件夹下按照progress_horizontal.xml文件的格式重新编写进度条的样式，并命名为如progress_bar.xml<br>2、修改ProgressBar的xml布局文件，覆盖默认的progressDrawable引用，指向自定义的xml进度条样式文件progress_bar.xml<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ProgressBar</div><div class="line">    style=<span class="string">"@android:style/Widget.ProgressBar.Horizontal"</span></div><div class="line">    android:progressDrawable=<span class="string">"@drawable/progress_bar"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><h3 id="通过Intent调用系统浏览器"><a href="#通过Intent调用系统浏览器" class="headerlink" title="通过Intent调用系统浏览器"></a>通过Intent调用系统浏览器</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="type">String</span> url = <span class="string">"http://www.baidu.com"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="type">Uri</span> uri = <span class="type">Uri</span>.parse(url);<span class="comment">//url为你要链接的地址</span></div><div class="line">        <span class="type">Intent</span> intent = <span class="keyword">new</span> <span class="type">Intent</span>(<span class="type">Intent</span>.<span class="type">ACTION_VIEW</span>,uri);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用WebView在界面中显示网页"><a href="#使用WebView在界面中显示网页" class="headerlink" title="使用WebView在界面中显示网页"></a>使用WebView在界面中显示网页</h3><p>使用WebView在界面中显示网页的八个步骤：</p>
<pre><code>1、将WebView加入到你的应用中
      要在你的应用中加入WebView，只需在xml布局文件中加入&lt;WebView&gt;元素即可
      &lt;LinearLayout ...&gt;
            &lt;WebView 
                android:id=&quot;@+id/web&quot;
                android:layout_width=&quot;match_parent&quot;
                android:layout_height=&quot;match_parent&quot;/&gt;
      &lt;/LinearLayout&gt;
2、使用WebView加载页面
      要在WebView加载页面，使用loadUrl()方法
         加载web资源：webView.loadUrl(&quot;http://www.baidu.com&quot;);
         加载本地文件：webView.loadUrl(&quot;file:///android_asset/XX.html&quot;);
             本地文件存放在assets文件夹中

         //使页面获得焦点，进行输入等操作
         webView.requestFocus();
 3、获取网络访问权限
       在WebView有效工作之前，要保证应用能访问网络，即在配置文件中配置了
       INTERNET权限。
       &lt;manifest ...&gt;
       ...
         &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;
       ...
       &lt;/manifest&gt;

4、处理页面导航
       当用户点击一个WebView中的页面链接时，通常由默认的浏览器打开并加载目标URL。
         然而，可以在WebView中覆盖这一由默认浏览器打开页面的行为————
       通过webView.setWebViewClient(new WebViewClient(){})那么链接就会在WebView中打开。

5、在WebView中使用JavaScript
        如果想在加载的WebView中的web页面上使用javascript，需要在WebView中启用javascript。
        启用Javascript通过WebView中带有的WebSettings来启用。可通过getSettings()来获取WebSettings的值，然后通过setJavaScriptEnabled()来启用Javascript

         WebView web = (WebView) findViewById(R.id.web);
         WebSettings websettings = web.getSettings();
         websettings.setJavaScriptEnabled(true);

6、网页后退与前进
       当WebView覆盖了URL加载——即第5步操作，它会自动生成历史访问记录。可以通过goBack()或
       goForward()向前或向后访问已访问过的站点

       @Override
       public boolean onKeyDown(int keyCode,KeyEvent event){
         if((keyCode == KeyEvent.KEYCODE_BACK)&amp;&amp; webView.canGoBack()){
             webView.goBack();
             return true;
         }
         return super.onKeyDown(keyCode,event);
       }


7、判断页面加载过程
         由于网页可能加载缓慢，所以需要去判断页面的加载过程，制作进度条给予
        用户良好的体验

        web.setWebChromeClient(new WebChromeClient(){

         @Override
         public void onProgressChanged(WebView view,int newProgress){
             if(newProgress == 100){
             //加载完成
             }else{
             //加载中
             }
         }
        }

8、提升访问网页的速度————WebView缓存的运用
        优先使用缓存：
         webView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        不使用缓存(默认)：
         webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
</code></pre><h3 id="使用WebView在界面中显示网页代码示例"><a href="#使用WebView在界面中显示网页代码示例" class="headerlink" title="使用WebView在界面中显示网页代码示例"></a>使用WebView在界面中显示网页代码示例</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> WebView web;</div><div class="line">    <span class="keyword">private</span> ProgressDialog dialog;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//1、初始化WebView</span></div><div class="line">        web = (WebView) findViewById(R.id.web);</div><div class="line">        </div><div class="line">        <span class="comment">//2、使用WebView加载页面</span></div><div class="line">        <span class="comment">//加载本地文件</span></div><div class="line">        <span class="comment">//web.loadUrl("file:///android_asset/demo.html");</span></div><div class="line">        <span class="comment">//加载web资源</span></div><div class="line">        web.loadUrl(<span class="string">"http://www.baidu.com"</span>);</div><div class="line">        <span class="comment">//3、在manifest.xml中配置网络访问权限</span></div><div class="line">        <span class="comment">//4、覆盖WebView默认通过系统或第三方浏览器打开页面的行为，使得网页可以在WebView中打开</span></div><div class="line"></div><div class="line">        web.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">                <span class="comment">//返回值为true: 网页在WebView中打开</span></div><div class="line">                <span class="comment">//返回值为false: 网页通过系统或第三方浏览器打开</span></div><div class="line">                </div><div class="line">                view.loadUrl(url);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//WebViewClient用于帮助WebView处理一些页面控制和请求通知</span></div><div class="line">        </div><div class="line">        <span class="comment">//5、启动支持Javascript</span></div><div class="line">        WebSettings websettings = web.getSettings();</div><div class="line">        websettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">//8、WebView加载页面优先使用缓存加载</span></div><div class="line">        websettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</div><div class="line">        <span class="comment">//7、判断页面加载进度</span></div><div class="line">        web.setWebChromeClient(<span class="keyword">new</span> WebChromeClient()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">                <span class="comment">//TODO Auto-generated method stub</span></div><div class="line">                </div><div class="line">                <span class="comment">//newProgress 反应页面加载进度的整数 1-100</span></div><div class="line">                <span class="keyword">if</span>(newProgress == <span class="number">100</span>)&#123;</div><div class="line">                    <span class="comment">//网页加载完成，关闭对话框</span></div><div class="line">                    closeDialog();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//网页正在加载中，显示对话框</span></div><div class="line">                    openDialog(newProgress);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">openDialog</span><span class="params">(<span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                <span class="keyword">if</span>(dialog==<span class="keyword">null</span>)&#123;</div><div class="line">                    dialog = <span class="keyword">new</span> ProgressDialog(MainActivity.<span class="keyword">this</span>);</div><div class="line">                    dialog.setTitle(<span class="string">"正在加载中..."</span>);</div><div class="line">                    dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</div><div class="line">                    dialog.show();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//刷新进度</span></div><div class="line">                    dialog.setProgress(newProgress);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">closeDialog</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span>(dialog!=<span class="keyword">null</span>&amp;&amp;dialog.isShowing())&#123;</div><div class="line">                    dialog.dismiss();</div><div class="line">                    dialog=<span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//6、改写物理返回按键的逻辑</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">if</span>((keyCode == KeyEvent.KEYCODE_BACK)&amp;&amp; web.canGoBack())&#123;</div><div class="line">            web.goBack();<span class="comment">//返回上一页面</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onKeyDown</span><span class="params">(keyCode, event)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、一个Manifest.xml清单文件中只能包含一个application节点。<br>   这个节点中可以包含各种组件如activity、Service、Content Provider、Broadcase Receiver。<br>2、启动一个没有在Manifest.xml清单中定义的Activity会抛出异常，程序会崩溃。<br>3、Manifest.xml中的每个组件都必须包含android:name属性，推荐其值为”包名.类名”，intent-filter(过滤器)可以选写。<br>4、Manifest.xml中的四大组件中除了BroadcastReceiver可以使用代码声明注册外，<br>其他组件必须要在Manifest.xml中进行声明配置，否则程序会报错崩溃。<br>5、DatePicker和DatePickerDialog的对象的初始化传入参数及其返回值中的月份都是从0开始的，所以在界面显示真实月份时都需要加1。<br>6、选中xml文件中的文本，用ctrl+1、双击弹出来的”Extract String”,来设置文本字符串。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下定时自动备份和删除]]></title>
      <url>https://aiolos123.github.io/2016/09/05/how-to-use-crontab-on-linux/</url>
      <content type="html"><![CDATA[<p>本文介绍一下linux下的定时任务crontab的安装和使用<br><a id="more"></a></p>
<h2 id="安装和使用crontab"><a href="#安装和使用crontab" class="headerlink" title="安装和使用crontab"></a>安装和使用crontab</h2><h3 id="安装crontab"><a href="#安装crontab" class="headerlink" title="安装crontab"></a>安装crontab</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># yum install crontabs</span></div></pre></td></tr></table></figure>
<h3 id="crontab服务常用命令"><a href="#crontab服务常用命令" class="headerlink" title="crontab服务常用命令"></a>crontab服务常用命令</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># service crond start <span class="comment">//启动服务</span></span></div><div class="line"><span class="meta"># service crond stop <span class="comment">//关闭服务</span></span></div><div class="line"><span class="meta"># service crond restart <span class="comment">//重启服务</span></span></div><div class="line"><span class="meta"># service crond reload <span class="comment">//重新载入配置</span></span></div><div class="line"><span class="meta"># service crond status  <span class="comment">//查看crontab服务状态</span></span></div><div class="line"></div><div class="line"><span class="meta"># ntsysv <span class="comment">//查看crontab服务是否已设置为开机启动</span></span></div><div class="line"></div><div class="line"><span class="meta"># chkconfig –level 35 crond on <span class="comment">//加入开机自动启动</span></span></div></pre></td></tr></table></figure>
<h2 id="查看crontab日志"><a href="#查看crontab日志" class="headerlink" title="查看crontab日志"></a>查看crontab日志</h2><p>crontab的执行日志位置一般位于/var/log/cron，利用下面的语句即可查看日志。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> /var/<span class="built_in">log</span>/cron</div></pre></td></tr></table></figure></p>
<p>上面的/var/log/cron只会记录是否执行了某些计划的脚本，但是具体执行是否正确以及脚本执行过程中的一些信息linux会通过邮件形式发送到给该用户。<br>对于root用户该邮件记录位于/var/spool/mail/root，通过以下命令可以查看最近的crontab执行情况。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f <span class="regexp">/var/</span>spool<span class="regexp">/mail/</span>root</div></pre></td></tr></table></figure></p>
<p>mail邮件一般只会记录脚本执行成功与否，如果执行失败，无法给出进一步的错误信息，这时需要我们将语句执行的错误信息重定向至文件中，这样可以很方便的查看错误信息。下面就给出了一个简单的例子<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">6</span> * * * /root/script/ss.sh &gt;&gt; /root/crontab/mylog.<span class="keyword">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>上述语句表示把错误输出和标准输出都输出到mylog.log中，<br>在执行的时候会将命令执行的相关信息记录至mylog.log文件中。</p>
<h2 id="linux下定时自动备份oracle数据库"><a href="#linux下定时自动备份oracle数据库" class="headerlink" title="linux下定时自动备份oracle数据库"></a>linux下定时自动备份oracle数据库</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># mkdir -p /home/expdp  #以root用户新建Oracle数据库备份目录</span></div><div class="line"><span class="meta"># chown -R  oracle:oinstall /home/expdp -R  #设置目录权限为oinstall用户组的oracle用户（用户oracle与用户组oinstall是在安装Oracle数据库时设置的）</span></div></pre></td></tr></table></figure>
<p>新建备份脚本文件<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># vi /home/expdp/ordbak.sh</span></div></pre></td></tr></table></figure></p>
<p>输入以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">export</span> ORACLE_BASE=/home/oracle</div><div class="line"><span class="built_in">export</span> ORACLE_HOME=<span class="variable">$ORACLE_BASE</span>/112</div><div class="line"><span class="built_in">export</span> ORACLE_SID=orcl</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ORACLE_HOME</span>/bin:<span class="variable">$HOME</span>/bin</div><div class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$ORACLE_HOME</span>/lib:/lib:/usr/lib</div><div class="line"><span class="built_in">export</span> NLS_LANG=’Simplified Chinese_CHINA.AL32UTF8’</div><div class="line"><span class="comment">#以上代码为Oracle数据库运行账号oracle的系统环境变量设置，必须添加，否则crontab任务计划不能执行</span></div><div class="line">date=`date +%Y_%m_%d`   <span class="comment">#获取系统当前日期时间</span></div><div class="line">days=7  <span class="comment">#设置删除7天之前的备份文件</span></div><div class="line">orsid=`127.0.0.0:1521/orcl`  <span class="comment">#Oracle数据库服务器IP、端口、SID</span></div><div class="line"><span class="comment">#orsid=`orcl`</span></div><div class="line"><span class="comment">#备份user数据库</span></div><div class="line">orowner=user  <span class="comment">#备份此用户下面的数据</span></div><div class="line">bakuser=user  <span class="comment">#用此用户来执行备份，必须要有备份操作的权限</span></div><div class="line">bakpass=<span class="built_in">pwd</span>  <span class="comment">#执行备注的用户密码</span></div><div class="line">bakdir=/home/expdp/  <span class="comment">#备份文件路径，需要提前创建好</span></div><div class="line">bakdata=<span class="variable">$orowner</span><span class="variable">$date</span>.dmp <span class="comment">#备份数据库名称</span></div><div class="line">baklog=<span class="variable">$orowner</span><span class="variable">$date</span>.log <span class="comment">#备份执行时候生成的日志文件名称</span></div><div class="line">ordatabak=<span class="variable">$orowner</span><span class="variable">$date</span>.tar.gz <span class="comment">#最后保存的Oracle数据库备份文件</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$bakdir</span> <span class="comment">#进入备份目录</span></div><div class="line"><span class="comment">#mkdir -p $orowner #按需要备份的Oracle用户创建目录</span></div><div class="line"><span class="comment">#cd $orowner #进入目录</span></div><div class="line">expdp <span class="variable">$bakuser</span>/<span class="variable">$bakpass</span>@<span class="variable">$orsid</span> schemas=<span class="variable">$bakuser</span> dumpfile=<span class="variable">$bakdata</span> directory=expdp_dir logfile=<span class="variable">$baklog</span> <span class="comment">#执行备份</span></div><div class="line">tar -zcvf <span class="variable">$ordatabak</span> <span class="variable">$bakdata</span>  <span class="variable">$baklog</span>  <span class="comment">#压缩备份文件和日志文件</span></div><div class="line"> <span class="comment">#删除备份文件</span></div><div class="line">find <span class="variable">$bakdir</span>  -type f -name <span class="variable">$baklog</span> -exec rm &#123;&#125; \;</div><div class="line"><span class="comment">#删除日志文件</span></div><div class="line">find <span class="variable">$bakdir</span>  -type f -name <span class="variable">$bakdata</span> -exec rm &#123;&#125; \; </div><div class="line"><span class="comment">#删除7天前的备份（注意：&#123;&#125; \中间有空格）</span></div><div class="line">find <span class="variable">$bakdir</span>  -type f -name <span class="string">"<span class="variable">$orowner</span><span class="variable">$date</span>.tar.gz"</span> -mtime +<span class="variable">$days</span> -exec rm -rf &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>:wq! #保存退出<br>为ordbak.sh脚本添加执行权限<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># chmod +x <span class="regexp">/home/</span>oracle<span class="regexp">/expdp_dir/</span>ordatabak.sh</div></pre></td></tr></table></figure></p>
<p>编辑任务计划<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#crontab</span> -e</div></pre></td></tr></table></figure></p>
<p>将下列代码加止末尾<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#每天凌晨<span class="number">2</span>点<span class="number">45</span>分，以oracle用户执行ordbak.sh备份文件</div><div class="line"><span class="number">45</span> <span class="number">2</span> * * * oracle  /home/expdp/ordbak.sh  &gt;&gt; /home/expdp/crontablog.log <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>:wq! #保存退出<br>通过如下命令查看定时任务执行情况<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># tail -f /<span class="built_in">var</span>/<span class="built_in">log</span>/cron</div></pre></td></tr></table></figure></p>
<h2 id="linux下定时自动删除"><a href="#linux下定时自动删除" class="headerlink" title="linux下定时自动删除"></a>linux下定时自动删除</h2><h3 id="删除文件命令"><a href="#删除文件命令" class="headerlink" title="删除文件命令"></a>删除文件命令</h3><p>引用自：<a href="http://www.cnblogs.com/peida/archive/2013/03/25/2980121.html" target="_blank" rel="external">http://www.cnblogs.com/peida/archive/2013/03/25/2980121.html</a><br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">find</span> 对应目录 -mtime +天数 -<span class="built_in">name</span> <span class="string">"文件名"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>实例命令：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">find</span> /opt/soft/<span class="built_in">log</span>/ -mtime +<span class="number">30</span> -<span class="built_in">name</span> <span class="string">"*.log"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>本例实现了将/opt/soft/log/目录下所有30天前带”.log”的文件删除。具体参数说明如下：</p>
<pre><code>find：linux的查找命令，用户查找指定条件的文件；
/opt/soft/log/：想要进行清理的任意目录；
-mtime：标准语句写法；
+30：查找30天前的文件，这里用数字代表天数；
&quot;*.log&quot;：希望查找的数据类型，&quot;*.jpg&quot;表示查找扩展名为jpg的所有文件，&quot;*&quot;表示查找所有文件，这个可以灵活运用，举一反三；
-exec：固定写法；
rm -rf：强制删除文件，包括目录；
{} \; ：固定写法，一对大括号+空格+\+; 
</code></pre><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>若嫌每次手动执行语句太麻烦，可以将这小语句写到一个可执行shell脚本文件中，再设置cron调度执行，那就可以让系统自动去清理相关文件。</p>
<h4 id="创建shell文件"><a href="#创建shell文件" class="headerlink" title="创建shell文件"></a>创建shell文件</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">touch /<span class="keyword">opt</span>/soft/bin/auto-del-<span class="number">30</span>-days-ago-<span class="built_in">log</span>.<span class="keyword">sh</span></div><div class="line">chmod +<span class="keyword">x</span> auto-del-<span class="number">30</span>-days-ago-<span class="built_in">log</span>.<span class="keyword">sh</span></div></pre></td></tr></table></figure>
<p>新建一个可执行文件auto-del-30-days-ago-log.sh，并分配可运行权限</p>
<h4 id="编辑shell脚本"><a href="#编辑shell脚本" class="headerlink" title="编辑shell脚本"></a>编辑shell脚本</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="keyword">vi</span> auto-del-<span class="number">30</span>-days-ago-<span class="built_in">log</span>.<span class="keyword">sh</span></div></pre></td></tr></table></figure>
<p>编辑auto-del-30-days-ago-log.sh文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">find /opt/soft/<span class="built_in">log</span>/ -mtime +30 -name <span class="string">"*.log"</span> -exec rm -rf &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>ok，保存退出(:wq)。</p>
<h4 id="执行计划任务"><a href="#执行计划任务" class="headerlink" title="执行计划任务"></a>执行计划任务</h4><p>crontab -l   //列出所有定时任务<br>crontab -e   //编辑定时任务,如果不存在,则创建一个新的crontab文件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#crontab</span> -e</div></pre></td></tr></table></figure></p>
<p>将auto-del-30-days-ago-log.sh执行脚本加入到系统计划任务，到点自动执行<br>输入：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">10 </span><span class="number">0</span> * * * /opt/soft/<span class="keyword">log</span>/<span class="keyword">auto</span>-del-<span class="number">7</span>-days-ago-<span class="keyword">log</span>.sh &gt;/home/del.<span class="keyword">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>这里的设置是每天凌晨0点10分执行auto-del-7-days-ago-log.sh文件进行数据清理任务了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[liunx常用命令]]></title>
      <url>https://aiolos123.github.io/2016/08/24/liunx-common-commands/</url>
      <content type="html"><![CDATA[<p>本文记录一些本人常用的liunx命令，其中有些内容是引用自其他博客。本文将持续更新中…<br><a id="more"></a></p>
<h2 id="查看与及关闭SELinux"><a href="#查看与及关闭SELinux" class="headerlink" title="查看与及关闭SELinux"></a>查看与及关闭SELinux</h2><h3 id="查看SELinux状态"><a href="#查看SELinux状态" class="headerlink" title="查看SELinux状态"></a>查看SELinux状态</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#如果SELinux status参数为enabled即为开启状态</span></div><div class="line"><span class="meta"># /usr/sbin/sestatus -v</span></div></pre></td></tr></table></figure>
<h3 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h3><p>修改配置文件并重启机器后生效</p>
<pre><code>修改/etc/selinux/config文件
将SELINUX=enforcing改为SELINUX=disabled
重启机器即可
</code></pre><h2 id="查看与开关linux防火墙"><a href="#查看与开关linux防火墙" class="headerlink" title="查看与开关linux防火墙"></a>查看与开关linux防火墙</h2><p>注意：对于Linux下的其它服务都可以用以下命令执行开启和关闭操作。</p>
<h3 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># service iptables status</span></div></pre></td></tr></table></figure>
<h3 id="永久开关防火墙"><a href="#永久开关防火墙" class="headerlink" title="永久开关防火墙"></a>永久开关防火墙</h3><p>设置后需要重启服务器，重启后生效<br>永久开启防火墙命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chkconfig iptables on</span></div></pre></td></tr></table></figure></p>
<p>永久关闭防火墙命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chkconfig iptables off</span></div></pre></td></tr></table></figure></p>
<h3 id="临时开关防火墙"><a href="#临时开关防火墙" class="headerlink" title="临时开关防火墙"></a>临时开关防火墙</h3><p>重启后失效<br>临时开启防火墙命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># service iptables start</span></div></pre></td></tr></table></figure></p>
<p>临时关闭防火墙命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># service iptables stop</span></div></pre></td></tr></table></figure></p>
<h3 id="在开启了防火墙时，做如下设置，开启相关端口"><a href="#在开启了防火墙时，做如下设置，开启相关端口" class="headerlink" title="在开启了防火墙时，做如下设置，开启相关端口"></a>在开启了防火墙时，做如下设置，开启相关端口</h3><p>修改/etc/sysconfig/iptables 文件，添加以下内容：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//开启80端口</span></div><div class="line">-A RH-Firewall<span class="number">-1</span>-INPUT -m <span class="section">state</span> --<span class="section">state</span> NEW -m tcp -p tcp --dport <span class="number">80</span> -j ACCEPT </div><div class="line"><span class="comment">//开启22端口</span></div><div class="line">-A RH-Firewall<span class="number">-1</span>-INPUT -m <span class="section">state</span> --<span class="section">state</span> NEW -m tcp -p tcp --dport <span class="number">22</span> -j ACCEPT</div></pre></td></tr></table></figure></p>
<h2 id="telent命令"><a href="#telent命令" class="headerlink" title="telent命令"></a>telent命令</h2><p>telnet用于测试某个端口是否开通。<br>格式为： telnet ip 端口号<br>输入命令后，如果出现SSH-1.99…的信息，说明端口已开通；否则端口未开通，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/1.jpg" alt="telent命令"></p>
<h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>tail命令设计用于显示文本文件的最后几行</p>
<pre><code>1．命令格式;
    tail[必要参数][选择参数][文件]   
2．命令功能：
    用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。
3．命令参数：
    -f 当日志增加新的内容时，tail将继续显示新的输出。
    -q 不显示处理信息
    -v 显示详细的处理信息
    -c&lt;数目&gt; 显示的字节数
    -n&lt;行数&gt; 显示行数
    --pid=PID 与-f合用,表示在进程ID,PID死掉之后结束. 
    -q, --quiet, --silent 从不输出给出文件名的首部 
    -s, --sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒 
</code></pre><p>使用实例<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># tail -<span class="keyword">n</span> 5 log2014.<span class="keyword">log</span> <span class="comment">//显示文件最后5行内容</span></div><div class="line"># tail -f <span class="keyword">test</span>.<span class="keyword">log</span> <span class="comment">//持续显示文件最新内容</span></div></pre></td></tr></table></figure></p>
<h2 id="查看是否安装apache及其版本"><a href="#查看是否安装apache及其版本" class="headerlink" title="查看是否安装apache及其版本"></a>查看是否安装apache及其版本</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># rpm -qa | grep -i http</span></div><div class="line"><span class="comment">//或者</span></div><div class="line"><span class="meta"># apachectl -v  </span></div><div class="line"><span class="comment">//或者</span></div><div class="line"><span class="meta"># httpd -v</span></div></pre></td></tr></table></figure>
<h2 id="两台服务器之间的文件复制"><a href="#两台服务器之间的文件复制" class="headerlink" title="两台服务器之间的文件复制"></a>两台服务器之间的文件复制</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>将远程服务器上<span class="regexp">/home/</span>root<span class="regexp">/目录下的文件夹bmw复制到本地服务器的/</span>home<span class="regexp">/daisy/</span>目录下</div><div class="line"><span class="comment"># scp -r root@10.28.11.5:/home/root/bmw  /home/daisy/</span></div><div class="line"><span class="regexp">//</span>将本地<span class="regexp">/home/</span>www目录下的文件夹bmw复制到远程服务器<span class="number">10.28</span>.<span class="number">11.5</span>的<span class="regexp">/home/</span>www目录下</div><div class="line"><span class="comment"># scp -r  /home/www/bmw  root@10.28.11.5:/home/www/</span></div></pre></td></tr></table></figure>
<h2 id="通过netstat查看端口状态"><a href="#通过netstat查看端口状态" class="headerlink" title="通过netstat查看端口状态"></a>通过netstat查看端口状态</h2><p>原文地址：<a href="http://jingyan.baidu.com/article/59703552c2fd838fc1074046.html" target="_blank" rel="external">http://jingyan.baidu.com/article/59703552c2fd838fc1074046.html</a></p>
<p>在Linux使用过程中，可以通过netstat命令查询系统开放了哪些端口，并且可以查看开放这些端口的具体进程和用户。</p>
<p>netstat命令各个参数说明如下：</p>
<pre><code>　　-t : 指明显示TCP端口
　　-u : 指明显示UDP端口
　　-l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)
　　-p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。
　　-n : 不进行DNS轮询，显示IP(可以加速操作)
</code></pre><p>使用方法</p>
<p>使用netstat -ntlp即可显示当前服务器上所有端口及进程服务，<br>结合grep可查看某个具体端口及服务情况。</p>
<p>如下例</p>
<pre><code>netstat -ntlp   //查看当前服务器上所有tcp端口及进程服务·
netstat -ntulp|grep 80   //查看所有80端口使用情况·
netstat -an|grep 3306   //查看所有3306端口使用情况·
</code></pre><p>例如要查看当前Mysql默认端口3306是否启动可以输入命令<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># netstat -ntlp</span></div><div class="line"><span class="comment">//或者</span></div><div class="line"><span class="meta"># netstat -an|grep 3306</span></div></pre></td></tr></table></figure></p>
<p>如果出现下图，则说明端口已经启动<br><img src="http://ocej2soxx.bkt.clouddn.com/%E7%AB%AF%E5%8F%A3.jpg" alt="查看3306端口是否启动"></p>
<h2 id="yum用法"><a href="#yum用法" class="headerlink" title="yum用法"></a>yum用法</h2><h3 id="yum配置"><a href="#yum配置" class="headerlink" title="yum配置"></a>yum配置</h3><p>请参考：<a href="http://jingyan.baidu.com/article/ed2a5d1f5a9fbe09f6be17ea.html" target="_blank" rel="external">http://jingyan.baidu.com/article/ed2a5d1f5a9fbe09f6be17ea.html</a></p>
<h3 id="yum常用命令"><a href="#yum常用命令" class="headerlink" title="yum常用命令"></a>yum常用命令</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># yum search software_name  <span class="comment">//搜索软件</span></span></div><div class="line"><span class="meta"># yum install  software_name <span class="comment">//安装软件</span></span></div><div class="line"><span class="meta"># yum list  software_name  <span class="comment">//列出已装软件</span></span></div><div class="line"><span class="meta"># yum remove  software_name  <span class="comment">//卸载软件</span></span></div></pre></td></tr></table></figure>
<h3 id="yum安装出错-Error-Protected-multilib-versions"><a href="#yum安装出错-Error-Protected-multilib-versions" class="headerlink" title="yum安装出错 Error: Protected multilib versions"></a>yum安装出错 Error: Protected multilib versions</h3><p>yum 安装zlib出错<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># yum install zlib-1.2.3-29.el6.i686</span></div><div class="line"></div><div class="line">    <span class="keyword">Error</span>: <span class="keyword">Protected</span> multilib versions: zlib<span class="number">-1.2</span><span class="number">.3</span><span class="number">-29.</span>el6.i686 != zlib<span class="number">-1.2</span><span class="number">.3</span><span class="number">-27.</span>el6.x86_64</div><div class="line">    You could <span class="keyword">try</span> <span class="keyword">using</span> --<span class="keyword">skip</span>-broken <span class="keyword">to</span> work around the problem</div><div class="line">    You could <span class="keyword">try</span> running: rpm -Va --nofiles --nodigest</div></pre></td></tr></table></figure></p>
<p><strong>原因：多个库共存冲突</strong></p>
<p>解决办法：在执行命令后面加上：–setopt=protected_multilib=false </p>
<p>再次执行：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install zlib<span class="number">-1.2</span><span class="number">.3</span><span class="number">-29.</span>el6.i686  --setopt=protected_multilib=false</div></pre></td></tr></table></figure></p>
<p>成功！<br>原文地址：<a href="http://blog.csdn.net/qianlong4526888/article/details/9497165" target="_blank" rel="external">http://blog.csdn.net/qianlong4526888/article/details/9497165</a></p>
<p>以下摘录自： <a href="http://mushme.iteye.com/blog/1001478" target="_blank" rel="external">http://mushme.iteye.com/blog/1001478</a></p>
<h2 id="查看linux日志"><a href="#查看linux日志" class="headerlink" title="查看linux日志"></a>查看linux日志</h2><pre><code>日志文件说明：
/var/log/message    系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一 
/var/log/secure 与安全相关的日志信息 
/var/log/maillog    该日志文件记录了每一个发送到系统或从系统发出的电子邮件的活动。它可以用来查看用户使用哪个系统发送工具或把数据发送到哪个系统。 
/var/log/cron   该日志文件记录crontab守护进程crond所派生的子进程的动作，前面加上用户、登录时间和PID，以及派生出的进程的动作。 
/var/log/spooler    与UUCP和news设备相关的日志信息 
/var/log/boot.log   该文件记录了系统在引导过程中发生的事件，就是Linux系统开机自检过程显示的信息 
</code></pre><h2 id="查看linux系统信息"><a href="#查看linux系统信息" class="headerlink" title="查看linux系统信息"></a>查看linux系统信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># uname -a   # 查看内核/操作系统/CPU信息 </span></div><div class="line"><span class="meta"># cat /etc/issue </span></div><div class="line"><span class="meta"># cat /etc/redhat-release # 查看操作系统版本 </span></div><div class="line"><span class="meta"># cat /proc/cpuinfo  # 查看CPU信息 </span></div><div class="line"><span class="meta"># hostname   # 查看计算机名 </span></div><div class="line"><span class="meta"># lspci -tv   # 列出所有PCI设备 </span></div><div class="line"><span class="meta"># lsusb -tv   # 列出所有USB设备 </span></div><div class="line"><span class="meta"># lsmod    # 列出加载的内核模块 </span></div><div class="line"><span class="meta"># env    # 查看环境变量</span></div><div class="line"><span class="meta"># lsb_release -a  #查看linux版本，这个命令适用于所有的linux，包括Redhat、SuSE、Debian、Centos等发行版</span></div></pre></td></tr></table></figure>
<h2 id="查看linux资源信息"><a href="#查看linux资源信息" class="headerlink" title="查看linux资源信息"></a>查看linux资源信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># free -m   # 查看内存使用量和交换区使用量 </span></div><div class="line"><span class="meta"># df -h    # 查看各分区使用情况 </span></div><div class="line"><span class="meta"># du -sh &lt;目录名&gt;  # 查看指定目录的大小 </span></div><div class="line"><span class="meta"># grep MemTotal /proc/meminfo # 查看内存总量 </span></div><div class="line"><span class="meta"># grep MemFree /proc/meminfo # 查看空闲内存量 </span></div><div class="line"><span class="meta"># uptime   # 查看系统运行时间、用户数、负载 </span></div><div class="line"><span class="meta"># cat /proc/loadavg  # 查看系统负载</span></div></pre></td></tr></table></figure>
<h2 id="查看linux磁盘和分区信息"><a href="#查看linux磁盘和分区信息" class="headerlink" title="查看linux磁盘和分区信息"></a>查看linux磁盘和分区信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># mount | column -t  # 查看挂接的分区状态 </span></div><div class="line"><span class="meta"># fdisk -l   # 查看所有分区 </span></div><div class="line"><span class="meta"># swapon -s   # 查看所有交换分区 </span></div><div class="line"><span class="meta"># hdparm -i /dev/hda  # 查看磁盘参数(仅适用于IDE设备) </span></div><div class="line"><span class="meta"># dmesg | grep IDE  # 查看启动时IDE设备检测状况</span></div></pre></td></tr></table></figure>
<h2 id="查看linux网络信息"><a href="#查看linux网络信息" class="headerlink" title="查看linux网络信息"></a>查看linux网络信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ifconfig   # 查看所有网络接口的属性 </span></div><div class="line"><span class="meta"># iptables -L   # 查看防火墙设置 </span></div><div class="line"><span class="meta"># route -n   # 查看路由表 </span></div><div class="line"><span class="meta"># netstat -lntp   # 查看所有监听端口 </span></div><div class="line"><span class="meta"># netstat -antp   # 查看所有已经建立的连接 </span></div><div class="line"><span class="meta"># netstat -s   # 查看网络统计信息</span></div></pre></td></tr></table></figure>
<h2 id="查看linux进程信息"><a href="#查看linux进程信息" class="headerlink" title="查看linux进程信息"></a>查看linux进程信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ps -ef   # 查看所有进程 </span></div><div class="line"><span class="meta"># top    # 实时显示进程状态</span></div><div class="line"><span class="meta"># ps -ef|grep 进程名 #查看特定进程</span></div></pre></td></tr></table></figure>
<h2 id="查看linux用户信息"><a href="#查看linux用户信息" class="headerlink" title="查看linux用户信息"></a>查看linux用户信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># w    # 查看活动用户 </span></div><div class="line"><span class="meta"># id &lt;用户名&gt;   # 查看指定用户信息 </span></div><div class="line"><span class="meta"># last    # 查看用户登录日志 </span></div><div class="line"><span class="meta"># cut -d: -f1 /etc/passwd # 查看系统所有用户 </span></div><div class="line"><span class="meta"># cut -d: -f1 /etc/group # 查看系统所有组 </span></div><div class="line"><span class="meta"># crontab -l   # 查看当前用户的计划任务</span></div></pre></td></tr></table></figure>
<h2 id="查看linux服务信息"><a href="#查看linux服务信息" class="headerlink" title="查看linux服务信息"></a>查看linux服务信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chkconfig –list  # 列出所有系统服务 </span></div><div class="line"><span class="meta"># chkconfig –list | grep on # 列出所有启动的系统服务</span></div></pre></td></tr></table></figure>
<h2 id="查看linux程序信息"><a href="#查看linux程序信息" class="headerlink" title="查看linux程序信息"></a>查看linux程序信息</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># rpm -qa   # 查看所有安装的软件包</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android入门一]]></title>
      <url>https://aiolos123.github.io/2016/08/23/learn-android-step-by-step-one/</url>
      <content type="html"><![CDATA[<p>本文为android入门的第一课，学习了android基础控件、布局、Activity组件的相关知识。<br>学习来源：<a href="http://www.imooc.com/learn/96" target="_blank" rel="external">http://www.imooc.com/learn/96</a><br><a id="more"></a></p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre><code>src：程序源文件
res：资源文件。都会在R.java中自动生成id
assets：资源文件。不会在R.java中生成id
</code></pre><h2 id="自定义Activity类的基本结构"><a href="#自定义Activity类的基本结构" class="headerlink" title="自定义Activity类的基本结构"></a>自定义Activity类的基本结构</h2><p>自动生成的自定义Activity类的基本结构是不对的，需要改为如下结构<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//三、需要导入的包为如下2个</span></div><div class="line"><span class="keyword">import</span> android.app.<span class="type">Activity</span>;</div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"></div><div class="line"><span class="comment">//一、自定义Activity类必须继承自Activity</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//二、重写onCreate方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        </div><div class="line">        <span class="comment">//coding...</span></div><div class="line">          </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><table>
<thead>
<tr>
<th style="text-align:center">Android控件</th>
<th style="text-align:center">控件的作用</th>
<th style="text-align:center">HTML中与之功能相似的标签</th>
<th style="text-align:left">控件属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TextView</td>
<td style="text-align:center">显示文本</td>
<td style="text-align:center">label</td>
<td style="text-align:left">android:id/android:layout_width<br>android:layout_height/android:text<br>android:textSize/android:textColor<br>android:background</td>
</tr>
<tr>
<td style="text-align:center">EditText</td>
<td style="text-align:center">输入文本</td>
<td style="text-align:center">input</td>
<td style="text-align:left">TextView属性+android:hint/android:inputType</td>
</tr>
<tr>
<td style="text-align:center">ImageView</td>
<td style="text-align:center">显示图片</td>
<td style="text-align:center">img</td>
<td style="text-align:left">TextView属性+android:src=”@drawable/ic_launcher” #ImageView的图片内容<br> android:background=”@drawable/ic_launcher” #ImageView的背景图片</td>
</tr>
<tr>
<td style="text-align:center">Button</td>
<td style="text-align:center">按钮</td>
<td style="text-align:center">button</td>
<td style="text-align:left">TextView属性</td>
</tr>
<tr>
<td style="text-align:center">ImageButton</td>
<td style="text-align:center">图片按钮</td>
<td style="text-align:center">button</td>
<td style="text-align:left">TextView属性+android:src</td>
</tr>
<tr>
<td style="text-align:center">AutoCompleteTextView</td>
<td style="text-align:center">动态匹配输入内容，只能选择一个值。如搜索的下拉提示框</td>
<td style="text-align:center">无</td>
<td style="text-align:left">TextView属性+android:completionThreshold=2<br></td>
</tr>
<tr>
<td style="text-align:center">MultiAutoCompleteTextView</td>
<td style="text-align:center">支持多次输入、选择多个值，以分隔符分开。如邮件的收件人框</td>
<td style="text-align:center">无</td>
<td style="text-align:left">同AutoCompleteTextView</td>
</tr>
<tr>
<td style="text-align:center">ToggleButton</td>
<td style="text-align:center">类似于开关，有选中和未选中两种状态，并且在不同状态可设置显示不同文本</td>
<td style="text-align:center">无</td>
<td style="text-align:left">android:checked #是否被选中<br>android:textOff #未选中状态下显示的文本 <br>android:textOn #选中状态下显示的文本</td>
</tr>
<tr>
<td style="text-align:center">CheckBox</td>
<td style="text-align:center">复选框，有选中和取消两种状态。可实现多选多</td>
<td style="text-align:center">input[type=checkbox]</td>
<td style="text-align:left">TextView属性+android:checked #是否被选中</td>
</tr>
<tr>
<td style="text-align:center">RadioButton</td>
<td style="text-align:center">单选框。RadioButton一旦选中，无法取消，所以不建议单独使用，一般都是与RadioGroup配合使用；</td>
<td style="text-align:center">一个input[type=radio]</td>
<td style="text-align:left">TextView属性+android:checked #是否被选中</td>
</tr>
<tr>
<td style="text-align:center">RadioGroup</td>
<td style="text-align:center">RadioGroup是RadioButton的一个集合，提供多选一机制</td>
<td style="text-align:center">多个input[type=radio]</td>
<td style="text-align:left">TextView属性+<br>android:orientation: #设置其中radioButton的排布方式——vertical/horizontal</td>
</tr>
</tbody>
</table>
<h3 id="常见控件的属性值"><a href="#常见控件的属性值" class="headerlink" title="常见控件的属性值"></a>常见控件的属性值</h3><pre><code>wrap_content: 实际内容的宽高
match_parent: 铺满父类容器
fill_parent:  铺满父类容器     
</code></pre><p>   match_parent与fill_parent的异同：</p>
<pre><code>match_parent与fill_parent完全相同;
只是match_parent是2.3API之后引入的属性值;
而fill_parent是2.3之前引入的一个属性值。
</code></pre><h3 id="实现事件监听的三个步骤"><a href="#实现事件监听的三个步骤" class="headerlink" title="实现事件监听的三个步骤"></a>实现事件监听的三个步骤</h3><pre><code>1、初始化对象  ————  findViewById()
2、为对象绑定事件监听器  ———— setOnClickListener(listener)
3、在监听器内部实现事件处理(即定义事件发生后的处理动作)   ———— listener
</code></pre><h4 id="在监听器内部实现事件处理的三种方式"><a href="#在监听器内部实现事件处理的三种方式" class="headerlink" title="在监听器内部实现事件处理的三种方式"></a>在监听器内部实现事件处理的三种方式</h4><h5 id="a、通过匿名内部类来实现"><a href="#a、通过匿名内部类来实现" class="headerlink" title="a、通过匿名内部类来实现"></a>a、通过匿名内部类来实现</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//匿名内部类来实现</span></div><div class="line">        loginBtn.setOnClickListener(<span class="keyword">new</span> <span class="type">OnClickListener</span>() &#123;     </div><div class="line">             <span class="meta">@Override</span></div><div class="line">             public void onClick(<span class="type">View</span> arg0) &#123;</div><div class="line">                 <span class="comment">//在当前onClick方法中监听点击button的事件</span></div><div class="line">                 <span class="comment">//some coding</span></div><div class="line">             &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="b、通过外部类来实现————-比较少用"><a href="#b、通过外部类来实现————-比较少用" class="headerlink" title="b、通过外部类来实现————(比较少用)"></a>b、通过外部类来实现————(比较少用)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//主类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="comment">//在监听器内使用外部类实现事件监听</span></div><div class="line">    loginBtn.setOnClickListener(<span class="keyword">new</span> MyOnClickListener()&#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">              <span class="comment">//调用父类MyOnClickListener的onClick方法</span></div><div class="line">              <span class="keyword">super</span>.onClick(arg0);</div><div class="line">              <span class="comment">//在当前onClick方法中监听点击button的事件</span></div><div class="line">              <span class="comment">//some coding</span></div><div class="line">          &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//定义外部类MyOnClickListener,并且需要实现OnClickListener接口</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOnClickListener</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">        <span class="comment">//some coding</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="c、通过外部类来实现的另一种写法"><a href="#c、通过外部类来实现的另一种写法" class="headerlink" title="c、通过外部类来实现的另一种写法"></a>c、通过外部类来实现的另一种写法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//主类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="comment">//将外部类赋予一个OnClickListener接口的对象listener</span></div><div class="line">        loginBtn.setOnClickListener(listener);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//将外部类赋予一个OnClickListener接口的对象</span></div><div class="line">    OnClickListener listener = <span class="keyword">new</span> MyOnClickListener()&#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">              <span class="comment">//调用父类的onClick方法</span></div><div class="line">              <span class="keyword">super</span>.onClick(arg0);</div><div class="line">              <span class="comment">//在当前onClick方法中监听点击button的事件</span></div><div class="line">              <span class="comment">//some coding</span></div><div class="line">          &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">//定义外部类MyOnClickListener,并且需要实现OnClickListener接口</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOnClickListener</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">        <span class="comment">//some coding</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="d、通过实现接口的方式来实现"><a href="#d、通过实现接口的方式来实现" class="headerlink" title="d、通过实现接口的方式来实现"></a>d、通过实现接口的方式来实现</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainActivity类直接实现OnClickListener接口，并重写onClick()方法</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="title">implements</span> <span class="title">OnClickListener</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="comment">//将监听事件的对象——MainActivity的当前对象(即this)绑定到当前控件loginBtn上</span></div><div class="line">        loginBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写onClick()方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onClick(<span class="type">View</span> v) &#123;</div><div class="line">        <span class="comment">//some coding</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Button与ImageButton的异同</p>
<pre><code>都可以作为按钮产生点击事件、都会产生明显的点击效果；
Button有text属性，ImageButton没有；
ImageButton有src属性，Button没有
</code></pre><h3 id="常见控件的使用步骤"><a href="#常见控件的使用步骤" class="headerlink" title="常见控件的使用步骤"></a>常见控件的使用步骤</h3><h4 id="autoCompleteTextView与MultiAutoCompleteTextView的使用步骤"><a href="#autoCompleteTextView与MultiAutoCompleteTextView的使用步骤" class="headerlink" title="autoCompleteTextView与MultiAutoCompleteTextView的使用步骤"></a>autoCompleteTextView与MultiAutoCompleteTextView的使用步骤</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、初始化对象</span></div><div class="line">actv = (AutoCompleteTextView) findViewById(R.id.actv1);</div><div class="line"><span class="comment">//2、初始化数据源，这些数据源用来匹配文本框中输入的内容</span></div><div class="line"><span class="keyword">String</span>[] res=&#123;<span class="string">"beijing1"</span>,<span class="string">"beijing2"</span>,<span class="string">"beijian"</span>,<span class="string">"shanghai"</span>&#125;;</div><div class="line"><span class="comment">//3、创建一个适配器，通过适配器来适配文本框的输入内容，下拉框的内容就是通过适配器来操作的</span></div><div class="line">ArrayAdapter&lt;<span class="keyword">String</span>&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;<span class="keyword">String</span>&gt;(<span class="keyword">this</span>,android.R.layout.simple_list_item_1,res);</div><div class="line"><span class="comment">//4、将adapter与当前autoCompleteTextView控件绑定</span></div><div class="line">actv.setAdapter(adapter);</div><div class="line"><span class="comment">//5、在xml文件中设置android:completionThreshold，设置输入多少字符时自动匹配</span></div><div class="line"><span class="comment">//6、对MultiAutoCompleteTextView而言，以上步骤完全相同，仅多一步设置分隔符</span></div><div class="line">mactv.setTokenizer(<span class="keyword">new</span> MultiAutoCompleteTextView.CommaTokenizer());</div></pre></td></tr></table></figure>
<p>AutoCompleteTextView与MultiAutoCompleteTextView控件的区别</p>
<pre><code>AutoCompleteTextView：匹配多个值、只选择一个值。常用于搜索下拉提示框；
MultiAutoCompleteTextView：匹配多个值、可选择多个值、以分隔符分隔。常用于邮件收件人输入框；
</code></pre><h4 id="ToggleButton的使用步骤"><a href="#ToggleButton的使用步骤" class="headerlink" title="ToggleButton的使用步骤"></a>ToggleButton的使用步骤</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、初始化控件</span></div><div class="line">tb = (ToggleButton) findViewById(R.id.toggleButton1);     <span class="comment">//2、监听ToggleButton按钮，为当前的tbs设置onCheckedChangeListener监听器</span></div><div class="line">tb.setOnCheckedChangeListener(<span class="keyword">this</span>); <span class="comment">//通过实现接口的方式来实现事件监听</span></div><div class="line"><span class="comment">//3、重写onCheckedChanged()方法——当点击tb控件，更换textview的文字</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(CompoundButton buttonView, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</div><div class="line">    <span class="comment">//当tb被点击时，该方法会执行</span></div><div class="line">    <span class="comment">//参数buttonView代表被点击的控件对象本身</span></div><div class="line">    <span class="comment">//参数isChecked代表被点击的控件的状态,true或false</span></div><div class="line">    <span class="comment">//实现思路：当点击tb控件，更换textview的文字即可</span></div><div class="line">    tv.setText(isChecked?<span class="string">"open"</span>:<span class="string">"close"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>textOn  对应checked=true状态下的文字
textOff 对应checked=false状态下的文字
</code></pre><h4 id="CheckBox的使用步骤"><a href="#CheckBox的使用步骤" class="headerlink" title="CheckBox的使用步骤"></a>CheckBox的使用步骤</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、初始化控件checkBox控件对象</span></div><div class="line">dViewById(R.id.checkBox1);</div><div class="line"><span class="comment">//2、设置checkbox的监听器setOnCheckedChangeListener()</span></div><div class="line">cb.setOnCheckedChangeListener(<span class="literal">new</span> OnCheckedChangeListener() &#123;</div><div class="line"><span class="comment">//3、通过监听器的onCheckedChanged()方法来判断当前checkbox是否被选中，并作相应处理</span></div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="literal">void</span> onCheckedChanged(CompoundButton buttonView, <span class="built_in">boolean</span> isChecked) &#123;</div><div class="line">            <span class="comment">//参数buttonView代表被点击的当前控件对象本身</span></div><div class="line">            <span class="comment">//参数isChecked代表当前checkbox是否被选中</span></div><div class="line">            <span class="keyword">if</span>(isChecked)&#123;</div><div class="line">                <span class="comment">//获取checkbox的文本内容</span></div><div class="line">                <span class="built_in">String</span> txt = buttonView.getText().toString();</div><div class="line">                <span class="keyword">Log</span>.i(<span class="string">"tag"</span>,txt);<span class="comment">//android中输出的一种方式，使用Log</span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">Log</span>.i(<span class="string">"tag"</span>,<span class="string">"取消选中"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h4 id="RadioGroup的使用步骤"><a href="#RadioGroup的使用步骤" class="headerlink" title="RadioGroup的使用步骤"></a>RadioGroup的使用步骤</h4><p>XML文件中的写法<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;RadioGroup</div><div class="line">          android:orientation=<span class="string">"horizontal"</span></div><div class="line">          android:<span class="built_in">id</span>=<span class="string">"@+id/radioGroup1"</span></div><div class="line">          android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">          android:layout_height=<span class="string">"wrap_content"</span> &gt;</div><div class="line">          &lt;RadioButton</div><div class="line">              android:<span class="built_in">id</span>=<span class="string">"@+id/radio0"</span></div><div class="line">              android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">              android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">              android:checked=<span class="string">"true"</span>  </div><div class="line">              android:<span class="built_in">text</span>=<span class="string">"男"</span> /&gt;</div><div class="line">          &lt;RadioButton</div><div class="line">              android:<span class="built_in">id</span>=<span class="string">"@+id/radio1"</span></div><div class="line">              android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">              android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">              android:<span class="built_in">text</span>=<span class="string">"女"</span> /&gt;    </div><div class="line">&lt;/RadioGroup&gt;</div></pre></td></tr></table></figure></p>
<p>activity.java文件中<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、初始化控件RadioGroup控件对象</span></div><div class="line">rg = (RadioGroup) findViewById(R.id.radioGroup1);</div><div class="line"><span class="comment">//2、设置RadioGroup的监听器setOnCheckedChangeListener()</span></div><div class="line"><span class="comment">//3、通过监听器的onCheckedChanged()方法来判断当前RadioGroup中的哪个radioButton被选中</span></div><div class="line"><span class="comment">//注意：RadioGroup的接口OnCheckedChangeListener是android.widget.RadioGroup包下的</span></div><div class="line">rg.setOnCheckedChangeListener(<span class="keyword">new</span> android.widget.RadioGroup.OnCheckedChangeListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(RadioGroup group, <span class="keyword">int</span> checkedId)</span> </span>&#123;</div><div class="line">            <span class="comment">//参数group代表被点击的控件RadioGroup对象本身</span></div><div class="line">            <span class="comment">//参数checkedId代表被选中的radioButton的id</span></div><div class="line">            <span class="keyword">switch</span> (checkedId) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.radio0:</div><div class="line">                Log.i(<span class="string">"tag"</span>,<span class="string">"当前——男孩被选中"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.radio1:</div><div class="line">                Log.i(<span class="string">"tag"</span>,<span class="string">"当前——女孩被选中"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p><strong>注意：RadioGroup的接口OnCheckedChangeListener是android.widget.RadioGroup包下的</strong></p>
<h2 id="五大布局"><a href="#五大布局" class="headerlink" title="五大布局"></a>五大布局</h2><table>
<thead>
<tr>
<th style="text-align:center">布局名称</th>
<th style="text-align:center">特点</th>
<th style="text-align:center">语法</th>
<th style="text-align:left">属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">LinearLayout</td>
<td style="text-align:center">其包含的子控件将以横向或竖向方式排列</td>
<td style="text-align:center">&lt;LinearLayout attr=value&gt;&lt;/LinearLayout&gt;</td>
<td style="text-align:left">android:orientation<br>android:gravity</td>
</tr>
<tr>
<td style="text-align:center">RelativeLayout</td>
<td style="text-align:center">其包含的子控件将以子控件之间的相对位置或子控件相对父容器的位置的方式排列</td>
<td style="text-align:center">&lt;RelativeLayout attr=value&gt;&lt;/RelativeLayout&gt;</td>
<td style="text-align:left">本身无特殊属性，但该布局的子控件有特殊属性</td>
</tr>
<tr>
<td style="text-align:center">FrameLayout</td>
<td style="text-align:center">其包含的所有子控件都不能被指定存放位置，统统都放于该布局的左上角。并且后面的控件直接覆盖前面的控件，并将其部分或全部遮挡</td>
<td style="text-align:center">&lt;FrameLayout attr=value&gt;&lt;/FrameLayout&gt;</td>
<td style="text-align:left">本身无特殊属性，但该布局的子控件有特殊属性</td>
</tr>
<tr>
<td style="text-align:center">AbsoluteLayout</td>
<td style="text-align:center">直接指定子控件的在xy轴上的绝对位置。由于屏幕适配问题很少用到</td>
<td style="text-align:center">忽略</td>
<td style="text-align:left">忽略</td>
</tr>
<tr>
<td style="text-align:center">TableLayout</td>
<td style="text-align:center">以行列的表格形式管理子控件，每一行为一个TableRow的对象，也可以是一个View的对象</td>
<td style="text-align:center">&lt;TableLayout attr=value&gt;&lt;/TableLayout&gt;</td>
<td style="text-align:left">android:stretchColumns<br>android:shrinkColumns</td>
</tr>
</tbody>
</table>
<h3 id="LinearLayout的常用属性及其用法"><a href="#LinearLayout的常用属性及其用法" class="headerlink" title="LinearLayout的常用属性及其用法"></a>LinearLayout的常用属性及其用法</h3><h4 id="LinearLayout本身常用到的2个属性"><a href="#LinearLayout本身常用到的2个属性" class="headerlink" title="LinearLayout本身常用到的2个属性"></a>LinearLayout本身常用到的2个属性</h4><pre><code>android:orientation  //决定其子控件的水平或垂直排布方式，
//其值为：
    vertical 垂直
    horizontal 水平
android:gravity //决定其子控件的水平和垂直上的位置
//其值有：
      center_vertical  子控件垂直居中
      center 子控件垂直水平居中
      center_horizontal 子控件水平居中
      right  子控件位于当前布局的右边
      left   子控件位于当前布局的左边
      bottom 子控件位于当前布局的底部
</code></pre><p><strong>注：android:gravity支持多个属性,以|分隔,如android:gravity=”bottom|center_vertical”</strong></p>
<h4 id="LinearLayout的子控件的常用属性"><a href="#LinearLayout的子控件的常用属性" class="headerlink" title="LinearLayout的子控件的常用属性"></a>LinearLayout的子控件的常用属性</h4><pre><code>android:layout_gravity //子控件本身在当前父容器的xy轴上的位置
    其值同android:gravity
android:layout_weight  //子控件本身占当前父容器的一个比例
    其值为整数或小数
</code></pre><p><strong>注意：android:layout_gravity与android:gravity的异同</strong></p>
<pre><code>都用于设置水平和垂直上的位置
属性值都相同

android:gravity是LinearLayout的属性，决定布局的子控件的位置
android:layout_gravity是LinearLayout的子控件的属性，决定子控件自身的位置
某些属性值在android:layout_gravity上不起作用，此时需使用android:gravity
</code></pre><h4 id="LinearLayout的实例代码"><a href="#LinearLayout的实例代码" class="headerlink" title="LinearLayout的实例代码"></a>LinearLayout的实例代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span>  <span class="comment">//LinearLayout的常用属性</span></div><div class="line">    android:gravity=<span class="string">"bottom"</span>  <span class="comment">//LinearLayout的常用属性</span></div><div class="line">    &gt;</div><div class="line">    <span class="xml"><span class="comment">&lt;!--子控件--&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button1"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span> </div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span>  //<span class="attr">LinearLayout</span>的子控件的常用属性</div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> //<span class="attr">LinearLayout</span>的子控件的常用属性</div><div class="line">    /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="RelativeLayout的常用属性及其用法"><a href="#RelativeLayout的常用属性及其用法" class="headerlink" title="RelativeLayout的常用属性及其用法"></a>RelativeLayout的常用属性及其用法</h3><p>RelativeLayout本身无特殊属性，但其子控件有特殊属性</p>
<h4 id="RelativeLayout的子控件的常用属性-当前子控件相对于其父容器的一个位置"><a href="#RelativeLayout的子控件的常用属性-当前子控件相对于其父容器的一个位置" class="headerlink" title="RelativeLayout的子控件的常用属性 (当前子控件相对于其父容器的一个位置)"></a>RelativeLayout的子控件的常用属性 (当前子控件相对于其父容器的一个位置)</h4><pre><code>android:layout_alignParentXXX = &quot;true&quot;  //子控件相对当前父容器靠左|右|上|下
android:layout_marginXXX =&quot;30dp&quot; //子控件距当前父容器左|右|上|下边的距离
android:layout_centerXXX = &quot;true&quot; //子控件相对当前父容器水平|垂直居中
</code></pre><h4 id="RelativeLayout的子控件的常用属性-当前子控件相对于其他子控件的位置"><a href="#RelativeLayout的子控件的常用属性-当前子控件相对于其他子控件的位置" class="headerlink" title="RelativeLayout的子控件的常用属性 (当前子控件相对于其他子控件的位置)"></a>RelativeLayout的子控件的常用属性 (当前子控件相对于其他子控件的位置)</h4><pre><code>android:layout_XXX  = &quot;@+id/btn1&quot;  //子控件相对与id为btn1的子控件的位置
</code></pre><h4 id="RelativeLayout的实例代码"><a href="#RelativeLayout的实例代码" class="headerlink" title="RelativeLayout的实例代码"></a>RelativeLayout的实例代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;RelativeLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span> </div><div class="line">    &gt;</div><div class="line"></div><div class="line">    &lt;Button </div><div class="line">        android:id=<span class="string">"@+id/btn1"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"第一个按钮"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        <span class="comment">//当前子控件相对于其父容器的一个位置</span></div><div class="line">        android:layout_centerHorizontal=<span class="string">"true"</span>    </div><div class="line">   /&gt;</div><div class="line"></div><div class="line">   &lt;Button </div><div class="line">        android:id=<span class="string">"@+id/btn2"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"第二个按钮"</span></div><div class="line">        android:layout_width=<span class="string">"200dp"</span></div><div class="line">        android:layout_height=<span class="string">"100dp"</span></div><div class="line">        <span class="comment">//当前子控件相对于其他子控件的位置</span></div><div class="line">        android:layout_alignTop=<span class="string">"@+id/btn1"</span></div><div class="line">   /&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="FrameLayout的常用属性及其用法"><a href="#FrameLayout的常用属性及其用法" class="headerlink" title="FrameLayout的常用属性及其用法"></a>FrameLayout的常用属性及其用法</h3><p>FrameLayout本身无特殊属性，但其子控件有特殊属性</p>
<h4 id="FrameLayout的子控件的常用属性"><a href="#FrameLayout的子控件的常用属性" class="headerlink" title="FrameLayout的子控件的常用属性"></a>FrameLayout的子控件的常用属性</h4><pre><code>android:layout_gravity  //同LinearLayout子控件的属性
</code></pre><h4 id="FrameLayout的实例代码"><a href="#FrameLayout的实例代码" class="headerlink" title="FrameLayout的实例代码"></a>FrameLayout的实例代码</h4><p>FrameLayout常用于进度条布局，如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> </div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/progressBar1"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleLarge"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/textView1"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"80%"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="TableLayout的常用属性及其用法"><a href="#TableLayout的常用属性及其用法" class="headerlink" title="TableLayout的常用属性及其用法"></a>TableLayout的常用属性及其用法</h3><h4 id="TableLayout本身常用到的3个属性"><a href="#TableLayout本身常用到的3个属性" class="headerlink" title="TableLayout本身常用到的3个属性"></a>TableLayout本身常用到的3个属性</h4><pre><code>//隐藏第N列(0为第一列),列之间用逗号隔开
android:collapseColumns=&quot;2,3&quot;
//收缩第N列(0为第一列)的高度和宽度，防止可收缩的列因为内容过多而太宽被挤出屏幕外,列之间用逗号隔开，*代表收缩所有列
//注：一列能同时表示收缩和拉伸
android:shrinkColumns=&quot;2,4&quot;
//拉伸第N列(0为第一列)的高度和宽度，以填满剩下的多余空白空间,列之间用逗号隔开
android:stretchColumns=&quot;1,2&quot;  
</code></pre><h4 id="TableLayout子控件常用到的属性"><a href="#TableLayout子控件常用到的属性" class="headerlink" title="TableLayout子控件常用到的属性"></a>TableLayout子控件常用到的属性</h4><pre><code>//该子控件显示在第2列
android:layout_column =&quot;1&quot; 
//该子控件占据2列
android:layout_span=&quot;2&quot;  
</code></pre><h4 id="TableLayout的实例代码"><a href="#TableLayout的实例代码" class="headerlink" title="TableLayout的实例代码"></a>TableLayout的实例代码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TableLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:shrinkColumns</span>=<span class="string">"2"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 一个view控件也可以是一行   --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button4"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TableRow</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tableRow2"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:layout_span</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/button5"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Button"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/button6"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Button"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Android四大组件之Activity"><a href="#Android四大组件之Activity" class="headerlink" title="Android四大组件之Activity"></a>Android四大组件之Activity</h2><p>Activity是一个应用程序组件，提供用户与程序交互的界面</p>
<pre><code>Android四大组件
    Activity
    Service
    Broadcast Receiver
    Content Provider
</code></pre><h3 id="创建并使用Activity步骤"><a href="#创建并使用Activity步骤" class="headerlink" title="创建并使用Activity步骤"></a>创建并使用Activity步骤</h3><p>以代码示例创建并使用Activity的4个步骤<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.<span class="type">Activity</span>;</div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"><span class="comment">//1、创建一个继承了Android的Activity的类</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="comment">//2、在类中重写onCreate()方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//3、在onCreate()方法中设置显示布局</span></div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        <span class="comment">//some coding</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>//4、在AndroidManifest.xml文件中注册该Activity<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">application</span></span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--注册activity--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            &lt;!<span class="attr">--android:name</span>=<span class="string">"包名.类名"</span><span class="attr">--</span>&gt;</div><div class="line">            android:name="com.example.myfourthapp.MainActivity"</div><div class="line">            android:label="@string/app_name" &gt;</div><div class="line">            <span class="comment">&lt;!--应用程序的主入口Activity设置--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><p>Activity整个生命周期如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/2.jpg" alt="Activity生命周期"><br>其中各方法的作用为：</p>
<pre><code>onCreate()  //创建
onStart()   //运行
onResume()  //获取焦点
onPause()   //失去焦点
onStop()    //暂停
onDestroy() //销毁
onRestart() //重新运行
</code></pre><p>从创建到销毁(如按多次返回键)的生命周期如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/3.jpg" alt="Activity创建到销毁的生命周期"><br>从启动到后台(如按Home键)，再到前台的生命周期<br><img src="http://ocej2soxx.bkt.clouddn.com/3.jpg" alt=""><br>从启动到失去焦点(如弹出新的半透明Activity)，再到获取焦点的生命周期<br><img src="http://ocej2soxx.bkt.clouddn.com/5.jpg" alt=""></p>
<h4 id="Activity的四种状态"><a href="#Activity的四种状态" class="headerlink" title="Activity的四种状态"></a>Activity的四种状态</h4><pre><code>活动状态(Running) Activity处于界面最顶端，获取焦点 
暂定状态(Paused) Activity失去焦点，但对用户可见。如弹出dailog
停止状态(Stopped) Activity被完全遮挡，但保留所有状态和成员信息。如按下home键
非活动状态(killed) Activity被停止
</code></pre><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>Intent用于完成Android各个组件之间的通讯。</p>
<p>Intent实现页面跳转的两种方式</p>
<h3 id="无返回结果的页面跳转"><a href="#无返回结果的页面跳转" class="headerlink" title="无返回结果的页面跳转"></a>无返回结果的页面跳转</h3><p>通过startActivity(intent)来实现无返回结果的页面跳转的3个步骤<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.为控件注册监听事件，即通过什么事件触发页面跳转</span></div><div class="line">btn1 = (Button) findViewById(R.id.btn1);</div><div class="line">btn1.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;   </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">            <span class="comment">//2.初始化Intent对象</span></div><div class="line"></div><div class="line">            <span class="comment">//使用Intent的构造方法为Intent(context , class) ,其中：</span></div><div class="line">            <span class="comment">//第一个参数content是启动Activity的上下文对象，</span></div><div class="line">            <span class="comment">//有两种写法：FirstActivity.this</span></div><div class="line">            <span class="comment">//或者定义FirstActivity类的成员变量Content mContext,</span></div><div class="line">            <span class="comment">//并在onCreate()方法中设置mContext=this;</span></div><div class="line">            </div><div class="line">            <span class="comment">//第二个参数：想要跳转到的目标Activity类</span></div><div class="line">            <span class="comment">//Intent intent = new Intent(mContext, SecondActivity.class);</span></div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">            <span class="comment">//3.通过startActivity(intent对象)来实现页面跳转</span></div><div class="line">            startActivity(intent);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>通过上例，即可实现从FirstActivity跳转到SecondActivity</p>
<h3 id="有返回结果的页面跳转"><a href="#有返回结果的页面跳转" class="headerlink" title="有返回结果的页面跳转"></a>有返回结果的页面跳转</h3><p>通过startActivityForResult()来实现有返回结果的页面跳转的7个步骤<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="comment">//1.为控件注册监听事件，即通过什么事件触发页面跳转</span></div><div class="line">    btn2 = (Button) findViewById(R.id.btn2);</div><div class="line">    btn2.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">                <span class="comment">//2.初始化Intent对象</span></div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">                <span class="comment">//3.通过startActivityForResult(intent,requestCode)来实现页面跳转，其中：</span></div><div class="line">                <span class="comment">//第一个参数为Intent对象</span></div><div class="line">                <span class="comment">//第二个参数requestCode为请求的一个标识</span></div><div class="line">                startActivityForResult(intent,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">&#125;  </div><div class="line"><span class="comment">//4.通过重写onActivityResult()方法接收第二个Activity返回的数据</span></div><div class="line"><span class="comment">//其中的参数的含义：</span></div><div class="line"><span class="comment">//requestCode为请求的标识</span></div><div class="line"><span class="comment">//resultCode为第二个Activity返回的标识</span></div><div class="line"><span class="comment">//data为第二个Activity返回的数据</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">    <span class="comment">//6.判断请求标识和返回标识是否匹配</span></div><div class="line">    <span class="keyword">if</span>(requestCode ==<span class="number">1</span> &amp;&amp; resultCode ==<span class="number">2</span>)&#123;</div><div class="line">        <span class="comment">//7.获取第二个Activity返回的数据</span></div><div class="line">        String content = data.getStringExtra(<span class="string">"data"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>//5.在第二个Activity需要设置返回标识<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="type">Button</span> bt;</div><div class="line">    <span class="keyword">private</span> <span class="type">String</span> content = <span class="string">"你好"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.second_activity);</div><div class="line">        </div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 第二个Activity什么时候给第一个Activity回传数据?</div><div class="line">         * ————被动式的回传数据————当点击第二个Activity的按钮时回传</div><div class="line">         * 回传到第一个Activity的数据实际上是一个Intent对象</div><div class="line">         * 通过setResult设置返回码</div><div class="line">         * */</div><div class="line">        bt = (<span class="type">Button</span>) findViewById(<span class="type">R</span>.id.sBtn1);</div><div class="line">        bt.setOnClickListener(<span class="keyword">new</span> <span class="type">OnClickListener</span>() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            public void onClick(<span class="type">View</span> arg0) &#123;</div><div class="line">                <span class="comment">//创建用于回传数据的Intent对象</span></div><div class="line">                <span class="type">Intent</span> data = <span class="keyword">new</span> <span class="type">Intent</span>();</div><div class="line">                <span class="comment">//data用键值对保存数据</span></div><div class="line">                data.putExtra(<span class="string">"data"</span>, content);</div><div class="line">                <span class="comment">//第一个参数为resultCode，即返回的标识码</span></div><div class="line">                <span class="comment">//第二个参数为回传的数据，即Intent对象</span></div><div class="line">                setResult(<span class="number">2</span>,data);</div><div class="line">                <span class="comment">//结束当前页面</span></div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过上例，即可实现从FirstActivity跳转到SecondActivity,并将SecondActivity的数据返回到FirstActivity。</p>
<p><strong>注：通过startActivityForResult()来实现有返回结果的页面跳转时，需要下面2个方法的配合</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">onActivityResult</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">setResult</span><span class="params">()</span></span></div></pre></td></tr></table></figure></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、一般情况下，布局属性与对象的setXXX方法一一对应</p>
<pre><code>比如设置字体颜色，在xml中属性是android:textColor，而在Activity中则是setTextColor方法
</code></pre><p>2、将布局文件Demo.xml引入到该activity中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">setContentView</span>(<span class="selector-tag">R</span><span class="selector-class">.layout</span><span class="selector-class">.Demo</span>);</div></pre></td></tr></table></figure></p>
<p>3、快捷键</p>
<pre><code>alt+/  代码提示与自动补全
ctrl+/ 注释
</code></pre><p>4、文字大小的单位常用sp;宽高的单位常用dp;android:hint为提示信息文体<br>5、执行android项目</p>
<pre><code>右键项目--&gt;run as android project
</code></pre><p>6、android底层自动根据手机屏幕分辨率选择不同分辨率的图片<br>7、res目录下的所有资源都会在R.java中自动生成对应的一个id</p>
<pre><code>&quot;@string/btn_name&quot;的含义是访问string.xml文件中的btn_name属性;
能访问的原因是由于R.java的存在,将其转换为R.string.btn_name;

findViewById()是如何查找到对应View的id————通过R.java中内部静态类id中的静态变量
</code></pre><p>8、android SDK开发文档：</p>
<pre><code>在sdk目录下的docs文件夹内，常用的是Develop栏目下的API Guides/Reference/Tools

查看android.support.design包控件的属性步骤
    点击进入android.support.design包下的R.styleable类、搜索控件属性即可
查看android控件的属性步骤
    点击进入android包下的R.styleable类、搜索控件属性即可
</code></pre><p>9、android信息输出</p>
<pre><code>可以使用Log.i(&quot;Tag&quot;,info) 输出信息
也可以使用System.out.println(info)
</code></pre><p>10、RadioGroup的接口OnCheckedChangeListener是android.widget.RadioGroup包下的<br>11、五大布局之间可以嵌套使用<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;LinearLayout&gt;</span></div><div class="line">    <span class="section">&lt;RelativeLayout&gt;</span></div><div class="line">    <span class="section">&lt;/RelativeLayout&gt;</span></div><div class="line"><span class="section">&lt;/LinearLayout&gt;</span></div></pre></td></tr></table></figure></p>
<p>12、长文本滚动效果<br>            <a href="http://www.imooc.com/video/4308" target="_blank" rel="external">http://www.imooc.com/video/4308</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何使用hexo搭建github博客]]></title>
      <url>https://aiolos123.github.io/2016/08/21/how-to-deploy-github-blog-with-hexo/</url>
      <content type="html"><![CDATA[<p>作为本人在github上的第一篇文档，本文详细讲解一下我是如何利用hexo在github上搭建博客的。算是送给自己的一份special gift。<br><a id="more"></a></p>
<p>特别感谢如下博客提供的帮助，为我解决了许多问题：<br><a href="http://www.tuicool.com/articles/ueI7naV" target="_blank" rel="external">http://www.tuicool.com/articles/ueI7naV</a></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="全局安装Hexo"><a href="#全局安装Hexo" class="headerlink" title="全局安装Hexo"></a>全局安装Hexo</h3><p>Hexo是基于Node的，所以首先要安装Node(安装过程略)，然后再全局安装Hexo，即加-g参数，安装命令如下：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install hexo-<span class="keyword">cli</span> -g</div></pre></td></tr></table></figure>
<p>本人系统的node版本和hexo安装过程截图如下：<br><img src="http://ocej2soxx.bkt.clouddn.com/g1.jpg" alt="node版本和hexo安装过程图"></p>
<h3 id="校验hexo是否安装成功"><a href="#校验hexo是否安装成功" class="headerlink" title="校验hexo是否安装成功"></a>校验hexo是否安装成功</h3><p>安装完成后，通过如下命令查看是否安装成功</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="built_in">version</span></div></pre></td></tr></table></figure>
<p>执行过程如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g2.jpg" alt="查看hexo是否安装成功图"></p>
<h3 id="创建Hexo项目"><a href="#创建Hexo项目" class="headerlink" title="创建Hexo项目"></a>创建Hexo项目</h3><p>安装好后，我们就可以使用Hexo创建项目了。进入到一个目录后，执行如下命令<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo init <span class="string">[目标文件夹名]</span></div></pre></td></tr></table></figure></p>
<p>Hexo即会自动在目标文件夹内建立网站所需要的所有文件。执行过程如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g3.jpg" alt="Hexo创建项目过程图"></p>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>切换到该目录，运行如下命名安装依赖包<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm <span class="keyword">install</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g4.jpg" alt="安装依赖包"></p>
<h3 id="启动Hexo服务器，本地查看"><a href="#启动Hexo服务器，本地查看" class="headerlink" title="启动Hexo服务器，本地查看"></a>启动Hexo服务器，本地查看</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="keyword">server</span>  <span class="comment">//或者hexo s</span></div></pre></td></tr></table></figure>
<p>打开浏览器，输入 http:localhost:4000 回车就看到如下界面<br><img src="http://ocej2soxx.bkt.clouddn.com/g5.jpg" alt="启动Hexo服务器"></p>
<p>至此，Hexo在本地已经搭建起来了，下一步需要对hexo进行适当配置。</p>
<h2 id="Hexo的配置"><a href="#Hexo的配置" class="headerlink" title="Hexo的配置"></a>Hexo的配置</h2><h3 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a>目录和文件</h3><p>安装完成的Hexo的目录结构如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/g6.jpg" alt="Hexo的目录结构"><br>其中：<br>    source ：为资源文件夹，用于存放用户资源的地方。<br>    source/_post ：为文件箱。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件/ 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。<br>    themes ：为主题文件夹。Hexo会根据主题来生成静态页面。<br>    _config.yml ：为全局的配置文件，每次更改要重启服务。  </p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>在_config.yml 中只需修改site部分和url部分即可，其他保持默认：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Site 站点配置</span></div><div class="line"><span class="symbol">title:</span> Hexo-demo <span class="meta">#网站标题</span></div><div class="line"><span class="symbol">subtitle:</span> hexo is simple <span class="keyword">and</span> easy to study <span class="meta">#网站副标题</span></div><div class="line"><span class="symbol">description:</span> this is hexo-demo <span class="meta">#网栈描述</span></div><div class="line"><span class="symbol">author:</span> pomy <span class="meta">#你的名字</span></div><div class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Hans <span class="meta">#网站使用的语言</span></div><div class="line"><span class="symbol">timezone:</span> Asia/Shanghai <span class="meta">#网站时区</span></div><div class="line"></div><div class="line"><span class="meta"># URL</span></div><div class="line"><span class="meta">## If your site is put in a subdirectory, </span></div><div class="line"><span class="meta">## set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="symbol">url:</span> https://aiolos123.github.io/  <span class="meta">#网址</span></div><div class="line"><span class="symbol">root:</span> / <span class="meta">#网站根目录</span></div><div class="line"><span class="symbol">permalink:</span> :year/:month/:day/:title/ <span class="meta">#永久链接格式</span></div><div class="line"><span class="symbol">permalink_defaults:</span> <span class="meta">#永久链接中各部分的默认值</span></div></pre></td></tr></table></figure></p>
<p><strong>修改全局配置文件时，注意缩进，同时注意冒号后面要有一个空格。</strong></p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>见第6章  《更改主题》</p>
<h2 id="Hexo的基本使用"><a href="#Hexo的基本使用" class="headerlink" title="Hexo的基本使用"></a>Hexo的基本使用</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>通过 new 命令新建一篇文章：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt; </div><div class="line"><span class="comment">//其中layout是可选参数，默认值为post。</span></div><div class="line"><span class="comment">//或hexo n</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g7.jpg" alt="新建文章"><br>新建的文件则会保存到source/_post目录下。打开后即可编辑<br><img src="http://ocej2soxx.bkt.clouddn.com/g8.jpg" alt="编辑文章"><br>编辑完成后，启动服务器，便能看到刚刚发表的文章<br><img src="http://ocej2soxx.bkt.clouddn.com/g9.jpg" alt="查看文章"></p>
<p>下一步需要将其部署到github上。</p>
<h2 id="github-创建博客"><a href="#github-创建博客" class="headerlink" title="github 创建博客"></a>github 创建博客</h2><p>以下内容参考自 <a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="external">http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html</a></p>
<h3 id="创建页面仓库"><a href="#创建页面仓库" class="headerlink" title="创建页面仓库"></a>创建页面仓库</h3><p>登录github后(没有账号的请自行注册，本文略)，点击右上角的new repository新建仓库。<br><strong>注：这个仓库的名字必须与你的账号对应，格式: github账号.github.io</strong><br>输入基本信息，然后点击创建仓库。操作过程如下图(图片来源于<a href="http://www.jianshu.com/p/701b1095da11" target="_blank" rel="external">http://www.jianshu.com/p/701b1095da11</a>)<br><img src="http://ocej2soxx.bkt.clouddn.com/g10.jpg" alt="新建仓库"></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在刚刚创建的Repository下，找到http clone url，如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g11.jpg" alt=""><br>将其中的url地址复制到全局配置文件的deploy项的repository后<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">deploy:</span></div><div class="line"><span class="symbol">  type:</span> git</div><div class="line"><span class="symbol">  repository:</span> <span class="meta">#上述复制的url</span></div><div class="line"><span class="symbol">  branch:</span> master</div></pre></td></tr></table></figure></p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>以下内容参考自 <a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="external">http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html</a></p>
<h4 id="使用Git-Bash生成ssh-key，命令如下"><a href="#使用Git-Bash生成ssh-key，命令如下" class="headerlink" title="使用Git Bash生成ssh key，命令如下"></a>使用Git Bash生成ssh key，命令如下</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">cd</span> <span class="regexp">~  #保证当前路径在”~”下</span></div><div class="line">ssh-keygen -t rsa -C <span class="string">"xxxxxx<span class="variable">@yy</span>.com"</span>  <span class="comment">#建议填写自己真实有效的邮箱地址</span></div></pre></td></tr></table></figure>
<p>执行过程如下图(填写密码处直接回车)：<br><img src="http://ocej2soxx.bkt.clouddn.com/g12.jpg" alt="生成ssh key"></p>
<h4 id="添加ssh-key到GItHub"><a href="#添加ssh-key到GItHub" class="headerlink" title="添加ssh key到GItHub"></a>添加ssh key到GItHub</h4><p>登录GitHub系统；点击右上角账号头像的“▼”→Settings→SSH kyes→Add SSH key。<br><img src="http://ocej2soxx.bkt.clouddn.com/g13.jpg" alt="添加ssh key到GItHub"></p>
<p>打开c:/Users/xxxx_000/.ssh/目录下的id_rsa.pub文件，全选复制公钥内容。将公钥粘贴到GitHub中Add an SSH key的key输入框，Title自定义，最后点击“Add Key”。</p>
<h4 id="配置账户"><a href="#配置账户" class="headerlink" title="配置账户"></a>配置账户</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> user.name “your_username”  <span class="meta">#设置用户名</span></div><div class="line">git config --<span class="keyword">global</span> user.email “your_registered_github_Email”  <span class="meta">#设置邮箱地址(建议用注册giuhub的邮箱)</span></div></pre></td></tr></table></figure>
<h4 id="测试ssh-keys是否设置成功"><a href="#测试ssh-keys是否设置成功" class="headerlink" title="测试ssh keys是否设置成功"></a>测试ssh keys是否设置成功</h4><p>输入如下命令<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g14.jpg" alt="配置账户"><br>如上图，如果出现Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 这句话，说明设置成功。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>最后一步就是部署博客到github上</p>
<h3 id="静态化"><a href="#静态化" class="headerlink" title="静态化"></a>静态化</h3><p>在部署之前，需要通过命令把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。<br>使用的命令为：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;hexo <span class="keyword">generate</span></div><div class="line"><span class="comment">//或hexo g</span></div></pre></td></tr></table></figure></p>
<p>在当前目录下，会生成一个public的目录，里面包括了所有静态化的文件。</p>
<p><img src="http://ocej2soxx.bkt.clouddn.com/g15.jpg" alt="静态化文件"></p>
<h3 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h3><p>生成静态文件之后，如果要发布到github，还需要安装 hexo-deployer-git<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git -S</div></pre></td></tr></table></figure></p>
<p>执行过程如下图：<br><img src="http://ocej2soxx.bkt.clouddn.com/g16.jpg" alt="安装deploygit"><br><strong>强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy文件夹</strong>，命名如下：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo clean</span></div></pre></td></tr></table></figure></p>
<p>然后，使用如下命令进行部署<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy  <span class="comment">//或hexo d</span></div></pre></td></tr></table></figure></p>
<p>执行过程如下图<br><img src="http://ocej2soxx.bkt.clouddn.com/g17.jpg" alt="部署"></p>
<p>然后，在github上便能看到刚刚部署的静态web网站：<br><img src="http://ocej2soxx.bkt.clouddn.com/g18.jpg" alt="部署成功"><br>现在，我们的博客就已经完全搭建起来了，在浏览器输入博客地址，即可查看。</p>
<h3 id="后期维护"><a href="#后期维护" class="headerlink" title="后期维护"></a>后期维护</h3><p>每次修改本地文件后，需要键入hexo generate才能保存。每次使用命令时，都要在Hexo目录下。每次想要上传文件到Github时，就应该先键入hexo generate保存之后，再键入hexo deploy。大概成功之后是酱紫的：<br><img src="http://ocej2soxx.bkt.clouddn.com/g19.jpg" alt="部署成功"></p>
<h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>如果觉得默认的主题不好，可自己更换一个主题，步骤如下。</p>
<h3 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h3><p>本人选用next主题，故参考如下地址内容即可<br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a> </p>
<p>安装完成的next主题如下：<br><img src="http://ocej2soxx.bkt.clouddn.com/g20.jpg" alt="安装完成的next主题"></p>
<h4 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h4><p>更改主题配置文件中的 highlight_theme 字段，将其值设定成你所喜爱的高亮主题。NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Code Highlight theme</span></div><div class="line"><span class="symbol">highlight_theme:</span> normal</div></pre></td></tr></table></figure></p>
<h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h4><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。配置如下：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Han</div></pre></td></tr></table></figure></p>
<h3 id="集成第三方服务"><a href="#集成第三方服务" class="headerlink" title="集成第三方服务"></a>集成第三方服务</h3><h4 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h4><p>在 站点配置文件 中新增 duoshuo_shortname 字段，值设置成多说域名的第一个.前的值。<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">duoshuo_shortname:</span> iissnan-notes</div></pre></td></tr></table></figure></p>
<h4 id="本地检索"><a href="#本地检索" class="headerlink" title="本地检索"></a>本地检索</h4><p>安装 hexo-generator-search，在站点的根目录下执行以下命令：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install hexo-generator-<span class="keyword">search</span> --<span class="keyword">save</span></div></pre></td></tr></table></figure></p>
<p>编辑 站点配置文件，新增以下内容到任意位置：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.<span class="keyword">xml</span></div><div class="line">  <span class="title">field</span>: post</div></pre></td></tr></table></figure></p>
<p>更多next主题内容请参考：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>上传图片使用：图床  <a href="http://tuchuang.org/" target="_blank" rel="external">http://tuchuang.org/</a></p>
]]></content>
    </entry>
    
  
  
</search>
